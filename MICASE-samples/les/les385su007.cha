@UTF8
@PID:	11312/a-00010199-1
@Begin
@Languages:	eng
@Participants:	S1 Instructor Teacher, S2 Student Student, S3 Student
	Student, S4 Student Student, S5 Student Student, S6 Student
	Student, S7 Student Student, S8 Student Student, S9 Student
	Student, S10 Student Student, SU2 Student Student, SU3
	Student Student, SU4 Student Student, SU8 Student Student,
	SUM Student Student, SUF Student Student, SS Unknown
	Unidentified
@ID:	eng|MICASE|S1|36;|male|NNS||Teacher|JF||
@ID:	eng|MICASE|S2|20;|male|NS||Student|SU||
@ID:	eng|MICASE|S3|20;|male|NS||Student|SU||
@ID:	eng|MICASE|S4|20;|male|NS||Student|SU||
@ID:	eng|MICASE|S5|20;|male|NS||Student|SU||
@ID:	eng|MICASE|S6|20;|female|NS||Student|SU||
@ID:	eng|MICASE|S7|20;|male|NS||Student|JU||
@ID:	eng|MICASE|S8|20;|male|NS||Student|SU||
@ID:	eng|MICASE|S9||male|NS||Student|UN||
@ID:	eng|MICASE|S10|20;|male|NS||Student|SU||
@ID:	eng|MICASE|SU2||male|NS||Student|UN||
@ID:	eng|MICASE|SU3||male|NS||Student|UN||
@ID:	eng|MICASE|SU4||male|NS||Student|UN||
@ID:	eng|MICASE|SU8||male|NS||Student|UN||
@ID:	eng|MICASE|SUM||male|NS||Student|UN||
@ID:	eng|MICASE|SUF||female|NS||Student|UN||
@ID:	eng|MICASE|SS|||NS||Unidentified|UN||
@Media:	les385su007, audio, unlinked
@Date:	18-MAR-1998
@Situation:	Classroom, East Hall
*S1:	mod [: modulo] three forty four .
%mor:	prep|modulo det:num|three det:num|forty det:num|four .
%gra:	1|0|INCROOT 2|4|DATE 3|4|DATE 4|1|POBJ 5|1|PUNCT
*S1:	and then two to the one seventy is congruent to one mod [: modulo]
	three forty one (.) just xxx .
%mor:	coord|and adv:tem|then det:num|two prep|to det:art|the det:num|one
	det:num|seventy cop|be&3S adj|congruent prep|to pro:indef|one
	prep|modulo det:num|three det:num|forty det:num|one adj|just .
%gra:	1|3|LINK 2|3|JCT 3|8|LINK 4|3|JCT 5|6|DET 6|4|POBJ 7|8|SUBJ 8|0|ROOT
	9|8|PRED 10|9|JCT 11|10|POBJ 12|8|JCT 13|15|ENUM 14|15|DATE 15|16|QUANT
	16|12|POBJ 17|8|PUNCT
*S2:	that it .
%mor:	comp|that pro:per|it .
%gra:	1|0|INCROOT 2|1|OBJ 3|1|PUNCT
*S1:	two to the thirty forty is congruent to one mod [: modulo] three
	forty one .
%mor:	det:num|two prep|to det:art|the det:num|thirty det:num|forty
	cop|be&3S adj|congruent prep|to det:num|one prep|modulo
	det:num|three det:num|forty det:num|one .
%gra:	1|6|LINK 2|1|JCT 3|4|DET 4|2|POBJ 5|6|SUBJ 6|0|ROOT 7|6|PRED 8|7|JCT
	9|8|POBJ 10|9|NJCT 11|13|ENUM 12|13|DATE 13|10|POBJ 14|6|PUNCT
*S1:	so how can you use this to [/] to prove that three forty one is
	composite but how can you use it to [/] to actually factor the
	number three forty one ?
%mor:	co|so pro:rel|how mod|can pro:per|you v|use pro:dem|this inf|to
	v|prove comp|that det:num|three det:num|forty det:num|one cop|be&3S
	adj|composite conj|but pro:rel|how mod|can pro:per|you v|use
	pro:per|it inf|to adv|actual&dadj-LY v|factor det:art|the n|number
	det:num|three det:num|forty det:num|one ?
%gra:	1|5|COM 2|5|JCT 3|5|AUX 4|5|SUBJ 5|0|ROOT 6|5|OBJ 7|8|INF 8|5|XJCT
	9|13|LINK 10|11|DATE 11|13|QUANT 12|13|SUBJ 13|8|COMP 14|13|PRED 15|13|CONJ
	16|19|LINK 17|19|AUX 18|19|SUBJ 19|15|COORD 20|19|OBJ 21|23|INF
	22|23|JCT 23|19|COMP 24|25|DET 25|23|OBJ 26|27|QUANT 27|28|ENUM 28|25|APP
	29|5|PUNCT
*S1:	any [/] &volun any volunteers ?
%mor:	qn|any n|volunteer-PL ?
%gra:	1|2|QUANT 2|0|INCROOT 3|2|PUNCT
*S1:	okay .
%mor:	co|okay .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	anyone get this problem ?
%mor:	pro:indef|anyone v|get det:dem|this n|problem ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|OBJ 5|2|PUNCT
*S1:	&=laughs:multiple Kurt ?
%mor:	n:prop|Kurt ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S3:	I can tell you &-uh how [/] how [/] &y how we know it's composite .
%mor:	pro:sub|I mod|can v|tell pro:per|you pro:int|how pro:sub|we v|know
	pro:per|it~cop|be&3S adj|composite .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|OBJ 5|7|LINK 6|7|SUBJ 7|3|COMP 8|9|SUBJ
	9|7|COMP 10|9|PRED 11|3|PUNCT
*S1:	so how do you know it's composite ?
%mor:	adv|so pro:int|how mod|do pro:per|you v|know pro:per|it~cop|be&3S
	adj|composite ?
%gra:	1|5|JCT 2|5|JCT 3|5|AUX 4|5|SUBJ 5|0|ROOT 6|7|SUBJ 7|5|COMP 8|7|PRED
	9|5|PUNCT
*S3:	well there's a theorem that says &-um that (.) M is &-uh given M
	prime (.) .
%mor:	co|well pro:exist|there~cop|be&3S det:art|a n|theorem pro:rel|that
	v|say-3S comp|that n:prop|M aux|be&3S part|give&PASTP n:prop|M
	n|prime .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|PRED 6|7|LINK 7|5|CMOD 8|11|LINK
	9|11|SUBJ 10|11|AUX 11|7|COMP 12|13|MOD 13|11|OBJ 14|3|PUNCT
*S1:	yeah .
%mor:	co|yeah .
%gra:	1|0|INCROOT 2|1|PUNCT
*S3:	x@l squared is congruent to &-uh +...
%mor:	n:let|x part|square-PASTP cop|be&3S adj|congruent prep|to +...
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|3|JCT 6|3|PUNCT
*S3:	one .
%mor:	det:num|one .
%gra:	1|0|INCROOT 2|1|PUNCT
*S3:	&=writes:board:S1 .
*S1:	x@l squared is congruent to one .
%mor:	n:let|x part|square-PASTP cop|be&3S adj|congruent prep|to
	pro:indef|one .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|4|JCT 6|5|POBJ 7|3|PUNCT
*S3:	mod [: modulo] (.) M &-uh if and only if X is &cong X equals (.) or
	X is congruent to plus or minus one +...
%mor:	prep|modulo n:prop|M comp|if coord|and adv|only conj|if n:prop|X
	cop|be&3S n:prop|X n|equal-PL coord|or n:prop|X cop|be&3S
	adj|congruent prep|to n|plus coord|or prep|minus pro:indef|one +...
%gra:	1|0|INCROOT 2|1|POBJ 3|1|POBJ 4|3|CONJ 5|4|COORD 6|8|LINK 7|8|SUBJ
	8|3|CJCT 9|10|MOD 10|8|PRED 11|13|LINK 12|13|SUBJ 13|8|CJCT 14|13|PRED
	15|14|JCT 16|15|POBJ 17|13|CONJ 18|17|COORD 19|18|POBJ 20|1|PUNCT
*S3:	mod [: modulo] M .
%mor:	prep|modulo n:prop|M .
%gra:	1|0|INCROOT 2|1|POBJ 3|1|PUNCT
*S3:	&=pause_while_writing .
*S1:	yes so (.) if M is a prime number (.) then +...
%mor:	co|yes adv|so conj|if n:prop|M cop|be&3S det:art|a n|prime n|number
	adv:tem|then +...
%gra:	1|5|COM 2|3|JCT 3|5|LINK 4|5|SUBJ 5|0|ROOT 6|8|DET 7|8|MOD 8|5|PRED
	9|8|OM 10|5|PUNCT
*S1:	thirty two squared cannot be congruent to one mod [: modulo] M .
%mor:	det:num|thirty det:num|two part|square-PASTP mod|can~neg|not cop|be
	adj|congruent prep|to pro:indef|one prep|modulo n:prop|M .
%gra:	1|2|QUANT 2|6|LINK 3|6|SUBJ 4|6|AUX 5|4|NEG 6|0|ROOT 7|6|PRED 8|6|JCT
	9|8|POBJ 10|9|NJCT 11|10|POBJ 12|6|PUNCT
*S1:	and (.) now &wh what was the proof of this ?
%mor:	coord|and adv|now pro:int|what cop|be&PAST&13S det:art|the n|proof
	prep|of pro:dem|this ?
%gra:	1|4|LINK 2|4|JCT 3|4|SUBJ 4|0|ROOT 5|6|DET 6|4|PRED 7|6|NJCT 8|7|POBJ
	9|4|PUNCT
*S1:	and [/] and this was one of the homework problems .
%mor:	coord|and pro:dem|this cop|be&PAST&13S det:num|one prep|of
	det:art|the n|+n|home+n|work n|problem-PL .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|4|NJCT 6|8|DET 7|8|MOD 8|5|POBJ
	9|3|PUNCT
*S1:	of_course you get that M divides x@l squared minus one (.) which is
	X minus one times X plus one +...
%mor:	co|of_course pro:per|you v|get comp|that n:prop|M v|divide-3S
	n:let|x v|square-PAST prep|minus pro:indef|one pro:rel|which
	cop|be&3S n:prop|X prep|minus pro:indef|one v|time-3S n:prop|X
	prep|plus pro:indef|one +...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|6|LINK 5|6|SUBJ 6|3|COMP 7|8|SUBJ 8|6|COMP
	9|8|JCT 10|9|POBJ 11|12|LINK 12|10|CMOD 13|12|PRED 14|13|NJCT 15|14|POBJ
	16|12|CPRED 17|16|OBJ 18|16|JCT 19|18|POBJ 20|3|PUNCT
*S1:	so if M is prime then M (.) must divide either X minus one or X
	plus one .
%mor:	adv|so conj|if n:prop|M cop|be&3S adj|prime adv:tem|then n:prop|M
	mod|must v|divide adv|either n:prop|X prep|minus det:num|one
	coord|or n:prop|X prep|plus pro:indef|one .
%gra:	1|2|JCT 2|4|LINK 3|4|SUBJ 4|9|CJCT 5|4|PRED 6|9|JCT 7|9|SUBJ 8|9|AUX
	9|0|ROOT 10|9|JCT 11|10|POBJ 12|11|NJCT 13|12|POBJ 14|13|CONJ 15|14|COORD
	16|13|NJCT 17|16|POBJ 18|9|PUNCT
*S4:	<then two to &th> [?] two to the one seventieth is not (.)
	congruent to one mod [: modulo] &thir three forty one +..?
%mor:	adv:tem|then det:num|two prep|to det:num|two prep|to det:art|the
	pro:indef|one adj|seventieth aux|be&3S neg|not adj|congruent prep|to
	det:num|one prep|modulo det:num|three det:num|forty det:num|one +..?
%gra:	1|2|JCT 2|0|ROOT 3|2|JCT 4|3|POBJ 5|4|NJCT 6|7|DET 7|5|POBJ 8|2|PUNCT
	9|8|INCROOT 10|9|NEG 11|9|PRED 12|11|JCT 13|12|POBJ 14|13|NJCT 15|17|ENUM
	16|17|DATE 17|14|POBJ 18|9|PUNCT
*S5:	it is .
%mor:	pro:per|it cop|be&3S .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PUNCT
*S4:	oh ⌈ it is ⌉ ?
%mor:	co|oh pro:per|it cop|be&3S ?
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|PUNCT
*S1:	⌊ it is ⌋ congruent to one ⌈ mod [: modulo] &thr ⌉ .
%mor:	pro:per|it cop|be&3S adj|congruent prep|to pro:indef|one
	prep|modulo .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|2|JCT 5|4|POBJ 6|5|NJCT 7|2|PUNCT
*S4:	⌊ it is ⌋ ?
%mor:	pro:per|it cop|be&3S ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PUNCT
*S1:	yeah .
%mor:	co|yeah .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	but &t what's two to the one seventy ?
%mor:	conj|but pro:int|what~cop|be&3S det:num|two prep|to det:art|the
	det:num|one det:num|seventy ?
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|4|JCT 6|8|DET 7|8|QUANT 8|5|POBJ
	9|3|PUNCT
*S1:	it's two to the eighty five to the square .
%mor:	pro:per|it~cop|be&3S det:num|two prep|to det:art|the det:num|eighty
	det:num|five prep|to det:art|the n|square .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|3|JCT 5|7|DET 6|7|QUANT 7|4|POBJ 8|7|NJCT
	9|10|DET 10|8|POBJ 11|2|PUNCT
*S4:	right .
%mor:	co|right .
%gra:	1|0|INCROOT 2|1|PUNCT
*S4:	⌈ so ⌉ .
%mor:	co|so .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	⌊ so ⌋ so here (.) what we get is that thirty two squared (.) is
	congruent to one (.) mod [: modulo] three forty one +...
%mor:	co|so adv|so adv|here pro:int|what pro:sub|we v|get cop|be&3S
	comp|that det:num|thirty det:num|two part|square-PASTP cop|be&3S
	adj|congruent prep|to det:num|one prep|modulo det:num|three
	det:num|forty det:num|one +...
%gra:	1|3|COM 2|3|JCT 3|4|JCT 4|6|LINK 5|6|SUBJ 6|0|ROOT 7|6|COMP 8|11|LINK
	9|10|QUANT 10|11|QUANT 11|7|CPRED 12|11|OBJ 13|19|MOD 14|13|JCT
	15|14|POBJ 16|15|NJCT 17|18|QUANT 18|16|POBJ 19|12|PRED 20|6|PUNCT
*S1:	but thirty three is not congruent to one or negative one mod
	[: modulo] three forty one .
%mor:	conj|but det:num|thirty det:num|three aux|be&3S neg|not
	adj|congruent prep|to det:num|one coord|or adj|negative det:num|one
	prep|modulo det:num|three det:num|forty det:num|one .
%gra:	1|6|LINK 2|3|QUANT 3|6|SUBJ 4|6|AUX 5|4|NEG 6|0|ROOT 7|6|JCT 8|7|POBJ
	9|8|CONJ 10|11|MOD 11|9|COORD 12|8|JCT 13|15|ENUM 14|15|DATE 15|12|POBJ
	16|6|PUNCT
*S1:	three forty one cannot be prime .
%mor:	det:num|three det:num|forty det:num|one mod|can~neg|not cop|be
	adj|prime .
%gra:	1|2|QUANT 2|6|LINK 3|6|SUBJ 4|6|AUX 5|4|NEG 6|0|ROOT 7|6|PRED 8|6|PUNCT
*S4:	okay (be)cause I oops (.) (be)cause (.) alright (be)cause it (.)
	couldn't you use that same (.) theorem &-um since we were given that
	two to the thirty fortieth is congruent to one mod [: modulo] three
	forty one ?
%mor:	co|okay conj|because pro:sub|I co|oops conj|because adj|alright
	conj|because pro:per|it mod|could~neg|not pro:per|you v|use
	pro:dem|that adj|same n|theorem conj|since pro:sub|we aux|be&PAST
	part|give&PASTP pro:dem|that det:num|two prep|to det:art|the
	det:num|thirty adj|fortieth aux|be&3S adj|congruent prep|to
	det:num|one prep|modulo det:num|three det:num|forty det:num|one ?
%gra:	1|4|COM 2|3|LINK 3|4|SUBJ 4|0|ROOT 5|6|LINK 6|4|PUNCT 7|12|LINK
	8|12|SUBJ 9|12|AUX 10|9|NEG 11|12|SUBJ 12|6|ROOT 13|15|DET 14|15|MOD 15|12|OBJ
	16|19|LINK 17|19|SUBJ 18|19|AUX 19|12|ROOT 20|21|DET 21|19|OBJ 22|21|JCT
	23|24|DET 24|25|QUANT 25|22|POBJ 26|25|INCROOT 27|26|PRED 28|27|JCT
	29|28|POBJ 30|29|JCT 31|33|ENUM 32|33|DATE 33|30|POBJ 34|26|PUNCT
*S4:	⌈ xxx ⌉ .
*S1:	⌊ since &two to the ⌋ thirty forty's congruent to one mod
	[: modulo] three forty one &-uh that's not (.) that in itself (.)
	doesn't show that three forty one is composite .
%mor:	conj|since prep|to det:art|the det:num|thirty adj|forty&dn-POSS
	adj|congruent prep|to det:num|one prep|modulo det:num|three
	det:num|forty det:num|one pro:dem|that~cop|be&3S neg|not adv|that
	adv|in pro:refl|itself mod|do&3S~neg|not n|show pro:rel|that
	det:num|three det:num|forty det:num|one cop|be&3S adj|composite .
%gra:	1|2|LINK 2|0|INCROOT 3|5|DET 4|5|QUANT 5|2|POBJ 6|13|MOD 7|6|JCT
	8|7|POBJ 9|8|NJCT 10|12|DATE 11|12|DATE 12|9|POBJ 13|14|SUBJ 14|5|CMOD
	15|14|NEG 16|17|JCT 17|14|JCT 18|17|POBJ 19|21|AUX 20|19|NEG 21|18|POBJ
	22|24|LINK 23|24|DATE 24|26|QUANT 25|26|SUBJ 26|21|CMOD 27|26|PRED 28|2|PUNCT
*S4:	no I okay I [/] I'm sorry I just I used (.) the same theorem that
	you used to disprove it (.) &t &-um from what I thought was to prove
	it that it was a SPSP +...
%mor:	co|no pro:sub|I co|okay pro:sub|I~cop|be&1S adj|sorry pro:sub|I
	adv|just pro:sub|I v|use-PAST det:art|the adj|same n|theorem
	pro:rel|that pro:per|you v|use-PAST inf|to dis#v|prove pro:per|it
	prep|from pro:int|what pro:sub|I v|think&PAST cop|be&PAST&13S inf|to
	v|prove pro:per|it comp|that pro:per|it cop|be&PAST&13S det:art|a
	n:prop|SPSP +...
%gra:	1|5|COM 2|5|SUBJ 3|5|COM 4|5|SUBJ 5|10|CJCT 6|5|PRED 7|10|SUBJ 8|10|JCT
	9|10|SUBJ 10|0|ROOT 11|13|DET 12|13|MOD 13|10|OBJ 14|16|LINK 15|16|SUBJ
	16|13|CMOD 17|18|INF 18|16|COMP 19|18|OBJ 20|19|JCT 21|23|LINK
	22|23|SUBJ 23|20|CPOBJ 24|23|COMP 25|26|INF 26|24|CPRED 27|26|OBJ 28|30|LINK
	29|30|SUBJ 30|26|COMP 31|32|DET 32|30|PRED 33|10|PUNCT
*S4:	⌈ I don't know whatever I ⌉ .
%mor:	pro:sub|I mod|do~neg|not v|know pro:int|whatever pro:sub|I .
%gra:	1|4|SUBJ 2|4|AUX 3|2|NEG 4|0|ROOT 5|6|LINK 6|4|COMP 7|4|PUNCT
*S1:	⌊ well what do you &t ⌋ it is not an SPSP because +/.
%mor:	co|well pro:int|what mod|do pro:per|you pro:per|it cop|be&3S
	neg|not det:art|a n:prop|SPSP conj|because +/.
%gra:	1|6|COM 2|6|SUBJ 3|6|AUX 4|6|SUBJ 5|6|SUBJ 6|0|ROOT 7|6|NEG 8|9|DET
	9|6|PRED 10|6|PRED 11|6|PUNCT
*S1:	+, ⌊ because ⌋ it fails the test .
%mor:	conj|because pro:per|it v|fail-3S det:art|the n|test .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|OBJ 6|3|PUNCT
*S1:	but +/.
%mor:	conj|but +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S4:	+, ⌈ I [/] &d I just was xxx ⌉ +/.
%mor:	pro:sub|I adj|just aux|be&PAST&13S +/.
%gra:	1|3|SUBJ 2|3|MOD 3|0|ROOT 4|3|PUNCT
*S1:	+, ⌊ but what &d that's the ⌋ that's method that's the that's
	exactly ⌈ what the method you [?] ⌉ .
%mor:	conj|but pro:int|what pro:dem|that~cop|be&3S det:art|the
	pro:rel|that~cop|be&3S n|method pro:rel|that~cop|be&3S det:art|the
	pro:rel|that~cop|be&3S adv|exact&dadj-LY pro:int|what det:art|the
	n|method pro:per|you .
%gra:	1|4|LINK 2|3|DET 3|4|SUBJ 4|0|ROOT 5|7|DET 6|7|LINK 7|4|PRED 8|7|PRED
	9|10|LINK 10|8|CMOD 11|13|DET 12|13|LINK 13|10|PRED 14|13|JCT 15|17|DET
	16|17|DET 17|14|COBJ 18|17|OBJ 19|4|PUNCT
*S4:	⌊ but I used the same method ⌋ though +/.
%mor:	conj|but pro:sub|I v|use-PAST det:art|the adj|same n|method
	adv|though +/.
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|OBJ 7|3|JCT 8|3|PUNCT
*S1:	⌈ okay ⌉ +/.
%mor:	co|okay +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S4:	+, ⌊ but ⌋ a step up with two to the thirty forty as +/.
%mor:	conj|but det:art|a n|step adv|up prep|with det:num|two prep|to
	det:art|the det:num|thirty det:num|forty adv|as +/.
%gra:	1|0|INCROOT 2|3|DET 3|1|POBJ 4|3|NJCT 5|3|NJCT 6|5|POBJ 7|6|JCT
	8|10|DET 9|10|QUANT 10|11|QUANT 11|7|POBJ 12|1|PUNCT
*S1:	+, ⌈ oh but (.) oh okay ⌉ +/.
%mor:	co|oh conj|but co|oh co|okay +/.
%gra:	1|0|INCROOT 2|1|CONJ 3|4|COM 4|2|COORD 5|1|PUNCT
*S4:	+, ⌊ <the square that I used> [?] (.) and then I squared that ⌋ (.)
	and I got one to the three (.) so I mean that's what (0.5) .
%mor:	det:art|the adj|square pro:rel|that pro:sub|I v|use-PAST coord|and
	adv:tem|then pro:sub|I v|square-PAST pro:dem|that coord|and
	pro:sub|I v|get&PAST det:num|one prep|to det:art|the det:num|three
	co|so pro:sub|I v|mean pro:dem|that~cop|be&3S pro:int|what .
%gra:	1|2|DET 2|0|INCROOT 3|5|LINK 4|5|SUBJ 5|2|CMOD 6|9|LINK 7|9|JCT
	8|9|SUBJ 9|5|CJCT 10|9|OBJ 11|13|LINK 12|13|SUBJ 13|9|CJCT 14|13|OBJ 15|14|JCT
	16|17|DET 17|15|POBJ 18|20|COM 19|20|SUBJ 20|13|CJCT 21|22|SUBJ
	22|20|COMP 23|22|PRED 24|2|PUNCT
*SU3:	oops .
%mor:	co|oops .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	I +...
%mor:	pro:sub|I +...
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	&=begin_background_student_conversation I'm not sure if I
	understand what you say so you're saying &y you went from (.) two to
	the one seventy to two to the thirty forty ?
%mor:	pro:sub|I~cop|be&1S neg|not adv|sure conj|if pro:sub|I v|understand
	pro:int|what pro:per|you v|say conj|so pro:per|you~aux|be&PRES
	part|say-PRESP pro:per|you v|go&PAST prep|from det:num|two prep|to
	det:art|the det:num|one det:num|seventy prep|to det:num|two prep|to
	det:art|the det:num|thirty det:num|forty ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|NEG 4|2|JCT 5|7|LINK 6|7|SUBJ 7|2|CJCT 8|10|LINK
	9|10|SUBJ 10|7|COMP 11|14|LINK 12|14|SUBJ 13|14|AUX 14|2|CJCT 15|16|SUBJ
	16|14|COMP 17|16|JCT 18|17|POBJ 19|18|JCT 20|21|DET 21|19|POBJ
	22|23|QUANT 23|21|NJCT 24|23|POBJ 25|24|JCT 26|28|DET 27|28|QUANT 28|25|POBJ
	29|2|PUNCT
*S4:	yeah (be)cause .
%mor:	co|yeah conj|because .
%gra:	1|2|COM 2|0|INCROOT 3|2|PUNCT
*S1:	yeah but (.) yeah .
%mor:	co|yeah conj|but co|yeah .
%gra:	1|0|INCROOT 2|1|CONJ 3|2|COORD 4|1|PUNCT
*S1:	so then [/] then the test is &{l=SIC undecisive (.) &}l=SIC but
	there's then this other pair (.) then you go from (.) two to the
	eighty five to [/] &two to the one seventy (.) and that's ⌈ when the
	test is decisive (.) that's ⌉ &=mumbling_becomes_intelligible +/.
%mor:	adv|so adv:tem|then det:art|the n|test cop|be&3S un#adj|decisive
	conj|but pro:exist|there~cop|be&3S adv:tem|then pro:dem|this
	qn|other n|pair adv:tem|then pro:per|you v|go prep|from det:num|two
	prep|to det:art|the det:num|eighty det:num|five prep|to det:art|the
	det:num|one det:num|seventy coord|and pro:dem|that~cop|be&3S
	conj|when det:art|the n|test cop|be&3S adj|decisive
	pro:dem|that~cop|be&3S +/.
%gra:	1|2|JCT 2|5|JCT 3|4|DET 4|5|SUBJ 5|0|ROOT 6|5|PRED 7|9|LINK 8|9|SUBJ
	9|5|CJCT 10|11|JCT 11|9|PRED 12|13|QUANT 13|11|OBJ 14|16|JCT 15|16|SUBJ
	16|13|CMOD 17|16|JCT 18|17|POBJ 19|18|NJCT 20|21|DET 21|19|POBJ
	22|29|QUANT 23|29|LINK 24|25|DET 25|29|SUBJ 26|29|SUBJ 27|26|CONJ 28|27|COORD
	29|21|CMOD 30|33|LINK 31|32|DET 32|33|SUBJ 33|29|PRED 34|36|JCT 35|36|SUBJ
	36|33|PRED 37|5|PUNCT
*S6:	⌊ oh X (.) not x@l squared ⌋ +/.
%mor:	co|oh n:prop|X neg|not n:let|x part|square-PASTP +/.
%gra:	1|5|COM 2|5|SUBJ 3|2|NEG 4|5|AUX 5|0|ROOT 6|5|PUNCT
*S1:	+, when the test is decisive (.) it [/] it (.) it comes up with
	something whose square is one (.) but the thing itself is not
	congruent to plus or minus one .
%mor:	conj|when det:art|the n|test cop|be&3S adj|decisive pro:per|it
	pro:per|it v|come-3S adv|up prep|with pro:indef|something
	pro:int|whose adj|square aux|be&3S pro:indef|one conj|but
	det:art|the n|thing pro:refl|itself cop|be&3S neg|not adj|congruent
	inf|to adv|plus coord|or n|minus pro:indef|one .
%gra:	1|4|LINK 2|3|DET 3|4|SUBJ 4|0|ROOT 5|4|PRED 6|4|PRED 7|8|SUBJ 8|6|CMOD
	9|8|JCT 10|8|JCT 11|10|POBJ 12|15|LINK 13|15|SUBJ 14|15|AUX 15|11|COBJ
	16|20|LINK 17|18|DET 18|20|SUBJ 19|20|SUBJ 20|15|CMOD 21|20|NEG
	22|20|PRED 23|24|INF 24|22|XMOD 25|24|CONJ 26|27|MOD 27|25|COORD 28|4|PUNCT
*S1:	now <how can you> [/] how can you use this (.) to factor three
	forty one ?
%mor:	adv|now pro:rel|how mod|can pro:per|you v|use pro:dem|this inf|to
	v|factor det:num|three det:num|forty det:num|one ?
%gra:	1|0|INCROOT 2|5|LINK 3|5|AUX 4|5|SUBJ 5|1|CMOD 6|5|OBJ 7|8|INF 8|5|XJCT
	9|11|ENUM 10|11|DATE 11|8|OBJ 12|1|PUNCT
*S1:	anyone ?
%mor:	pro:indef|anyone ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	anyone got that ?
%mor:	pro:indef|anyone v|get&PAST comp|that ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|OBJ 4|2|PUNCT
*S1:	Phil ?
%mor:	n:prop|Phil ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S7:	you know that the [/] the theorem that &-uh the GCD between X minus
	one and M (.) &=writes:board:S1 will be &-uh greater than one but
	less than M (.) and that would be a factor (.) of ⌈ M ⌉ .
%mor:	pro:per|you v|know comp|that det:art|the n|theorem pro:rel|that
	det:art|the n:prop|GCD prep|between n:prop|X n|minus det:num|one
	coord|and n:prop|M mod|will cop|be adj|great-CP prep|than
	det:num|one conj|but adj|less prep|than n:prop|M coord|and comp|that
	mod|will&COND cop|be det:art|a n|factor prep|of n:prop|M .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|OBJ 4|5|DET 5|3|OBJ 6|8|LINK 7|8|DET 8|5|CMOD
	9|8|NJCT 10|11|MOD 11|12|MOD 12|9|POBJ 13|16|LINK 14|16|SUBJ 15|16|AUX
	16|12|CJCT 17|16|PRED 18|17|JCT 19|18|POBJ 20|16|CONJ 21|20|COORD 22|21|NJCT
	23|22|POBJ 24|27|LINK 25|27|SUBJ 26|27|AUX 27|21|CJCT 28|29|DET
	29|27|PRED 30|29|NJCT 31|30|POBJ 32|2|PUNCT
*S1:	⌊ that ⌋ that was +/.
%mor:	comp|that pro:dem|that cop|be&PAST&13S +/.
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PUNCT
*S7:	yeah +/.
%mor:	co|yeah +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	+, that was &-uh one of the homework problems .
%mor:	pro:dem|that cop|be&PAST&13S det:num|one prep|of det:art|the
	n|+n|home+n|work n|problem-PL .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|3|NJCT 5|7|DET 6|7|MOD 7|4|POBJ 8|2|PUNCT
*S1:	but you can just (.) so you can just quote it (.) or if you want to
	work it out here (.) this says that three forty one (.)
	&=writes:board divides (.) thirty two squared minus one +...
%mor:	conj|but pro:per|you mod|can adv|just adv|so pro:per|you mod|can
	adj|just n|quote pro:per|it coord|or conj|if pro:per|you v|want
	inf|to v|work pro:per|it prep|out n|here det:dem|this v|say-3S
	comp|that det:num|three det:num|forty det:num|one v|divide-3S
	det:num|thirty det:num|two part|square-PASTP n|minus pro:indef|one
	+...
%gra:	1|9|LINK 2|9|SUBJ 3|9|AUX 4|5|JCT 5|9|JCT 6|9|SUBJ 7|9|AUX 8|9|MOD
	9|14|CJCT 10|9|OBJ 11|10|CONJ 12|11|COORD 13|14|SUBJ 14|0|ROOT 15|16|INF
	16|14|COMP 17|16|OBJ 18|16|JCT 19|18|POBJ 20|21|DET 21|14|CJCT 22|26|LINK
	23|24|QUANT 24|26|QUANT 25|26|SUBJ 26|21|COMP 27|28|QUANT 28|30|QUANT
	29|30|MOD 30|26|OBJ 31|30|OM 32|14|PUNCT
*S1:	and this is easy to factor (.) what's the factorization of thirty
	two squared minus one ?
%mor:	coord|and pro:dem|this cop|be&3S adj|ease&dn-Y inf|to v|factor
	pro:int|what~cop|be&3S det:art|the n|factor&dv-IZE-TION prep|of
	det:num|thirty det:num|two v|square-PAST prep|minus pro:indef|one ?
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|6|INF 6|4|XMOD 7|8|SUBJ 8|6|COMP
	9|10|DET 10|8|PRED 11|10|NJCT 12|11|POBJ 13|14|QUANT 14|10|CMOD
	15|14|JCT 16|15|POBJ 17|3|PUNCT
*SUM:	thirty two plus one and thirty two minus one ?
%mor:	det:num|thirty det:num|two adv|plus det:num|one coord|and
	det:num|thirty det:num|two prep|minus pro:indef|one ?
%gra:	1|2|QUANT 2|3|QUANT 3|4|JCT 4|0|ROOT 5|4|CONJ 6|5|COORD 7|8|QUANT
	8|4|JCT 9|8|POBJ 10|4|PUNCT
*S1:	yeah (.) it's thirty two plus one +...
%mor:	co|yeah pro:per|it~cop|be&3S det:num|thirty det:num|two adv|plus
	pro:indef|one +...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|5|QUANT 5|6|QUANT 6|7|JCT 7|3|PRED
	8|3|PUNCT
*S1:	and thirty two (.) minus one .
%mor:	coord|and det:num|thirty det:num|two prep|minus pro:indef|one .
%gra:	1|3|LINK 2|3|QUANT 3|0|INCROOT 4|3|JCT 5|4|POBJ 6|3|PUNCT
*S1:	so we get thirty three times thirty one (.) and three forty one
	divides that +...
%mor:	co|so pro:sub|we v|get det:num|thirty det:num|three n|time-PL
	det:num|thirty det:num|one coord|and det:num|three det:num|forty
	det:num|one v|divide-3S comp|that +...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|6|QUANT 5|6|QUANT 6|13|SUBJ 7|8|QUANT
	8|13|JCT 9|8|CONJ 10|9|COORD 11|12|DATE 12|13|SUBJ 13|3|COMP 14|13|OBJ
	15|3|PUNCT
*S1:	so what are the (.) possible factors of three forty one ?
%mor:	co|so pro:int|what cop|be&PRES det:art|the adj|possible n|factor-PL
	prep|of det:num|three det:num|forty det:num|one ?
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|PRED 7|6|NJCT 8|10|ENUM
	9|10|DATE 10|7|POBJ 11|3|PUNCT
*S1:	&=unintelligible_answers:multiple .
*S1:	what was it xxx .
%mor:	pro:int|what cop|be&PAST&13S pro:per|it .
%gra:	1|2|LINK 2|0|ROOT 3|2|PRED 4|2|PUNCT
*S8:	three eleven and thirty one .
%mor:	det:num|three det:num|eleven coord|and det:num|thirty det:num|one .
%gra:	1|2|QUANT 2|0|INCROOT 3|2|CONJ 4|5|ENUM 5|3|COORD 6|2|PUNCT
*S1:	yeah .
%mor:	co|yeah .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	and (.) what's the actual factorization ?
%mor:	coord|and pro:int|what~cop|be&3S det:art|the adj|actual
	n|factor&dv-IZE-TION ?
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|PRED 7|3|PUNCT
*SU8:	two [?] eleven .
%mor:	det:num|two det:num|eleven .
%gra:	1|2|QUANT 2|0|INCROOT 3|2|PUNCT
*S1:	eleven and thirty one (.) it's not divisible by three
	&=pause_while_writing so three forty one is &-uh eleven times thirty
	one .
%mor:	det:num|eleven coord|and det:num|thirty det:num|one
	pro:per|it~cop|be&3S neg|not adj|divisible prep|by det:num|three
	adv|so det:num|three det:num|forty det:num|one aux|be&3S
	det:num|eleven n|time-PL det:num|thirty det:num|one .
%gra:	1|6|LINK 2|1|CONJ 3|4|QUANT 4|2|COORD 5|6|SUBJ 6|0|ROOT 7|6|NEG
	8|6|PRED 9|8|JCT 10|12|QUANT 11|12|JCT 12|14|ENUM 13|14|DATE 14|17|SUBJ
	15|17|AUX 16|17|QUANT 17|19|DATE 18|19|QUANT 19|9|POBJ 20|6|PUNCT
*S1:	you can cancel out the three because three plus four plus one is
	eight it's not divisible by three .
%mor:	pro:per|you mod|can v|cancel prep|out det:art|the det:num|three
	conj|because det:num|three adv|plus det:num|four adv|plus
	pro:indef|one cop|be&3S det:num|eight pro:per|it~cop|be&3S neg|not
	adj|divisible prep|by det:num|three .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|JCT 5|6|DET 6|4|POBJ 7|13|LINK 8|10|QUANT
	9|10|JCT 10|11|QUANT 11|13|JCT 12|13|SUBJ 13|3|CJCT 14|16|QUANT
	15|16|SUBJ 16|13|PRED 17|16|NEG 18|16|PRED 19|18|JCT 20|19|POBJ 21|3|PUNCT
*S1:	(0.9) .
*SU8:	why do you have the three there ?
%mor:	pro:int|why mod|do pro:per|you v|have det:art|the det:num|three
	adv|there ?
%gra:	1|4|LINK 2|4|AUX 3|4|SUBJ 4|0|ROOT 5|6|DET 6|4|OBJ 7|4|JCT 8|4|PUNCT
*S1:	hm ?
%mor:	co|hm ?
%gra:	1|0|INCROOT 2|1|PUNCT
*SU8:	xxx oh +/.
%mor:	co|oh +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	well it (.) ⌈ it ⌉ +/.
%mor:	co|well pro:per|it pro:per|it +/.
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|PUNCT
*SU8:	+, ⌊ oh okay never mind ⌋ +/.
%mor:	co|oh co|okay adv|never n|mind +/.
%gra:	1|4|COM 2|4|COM 3|4|JCT 4|0|INCROOT 5|4|PUNCT
*S1:	+, it <does show> [?] +/.
%mor:	pro:per|it mod|do&3S n|show +/.
%gra:	1|3|SUBJ 2|3|AUX 3|0|INCROOT 4|3|PUNCT
*SU8:	+, the factorization of xxx .
%mor:	det:art|the n|factor&dv-IZE-TION prep|of .
%gra:	1|2|DET 2|0|INCROOT 3|2|NJCT 4|2|PUNCT
*S1:	yeah what you get here is not +//.
%mor:	co|yeah pro:int|what pro:per|you v|get adv|here cop|be&3S neg|not
	+//.
%gra:	1|4|COM 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|6|JCT 6|4|COMP 7|6|NEG 8|4|PUNCT
*S1:	so (.) <you can put> [//] <you can> [/] you can conclude that the
	GCD of thirty one and M is less than M and greater than one (.) and
	the GCD of thirty three and M (.) is less than one and (.) greater
	than M <if you wanna use> [/] if you wanna use that homework problem
	.
%mor:	co|so pro:per|you mod|can v|conclude comp|that det:art|the
	n:prop|GCD prep|of det:num|thirty det:num|one coord|and n:prop|M
	cop|be&3S adj|less prep|than n:prop|M coord|and adj|great-CP
	prep|than det:num|one coord|and det:art|the n:prop|GCD prep|of
	det:num|thirty det:num|three coord|and n:prop|M cop|be&3S adj|less
	prep|than det:num|one coord|and adj|great-CP prep|than n:prop|M
	conj|if pro:per|you v|want~inf|to v|use det:dem|that
	n|+n|home+n|work n|problem .
%gra:	1|4|COM 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|13|LINK 6|7|DET 7|13|SUBJ 8|7|NJCT
	9|10|ENUM 10|8|POBJ 11|7|CONJ 12|11|COORD 13|4|COMP 14|13|PRED 15|14|JCT
	16|15|POBJ 17|13|CONJ 18|17|COORD 19|18|JCT 20|19|POBJ 21|20|CONJ
	22|23|DET 23|29|SUBJ 24|29|LINK 25|26|QUANT 26|29|SUBJ 27|26|CONJ 28|27|COORD
	29|21|COORD 30|29|PRED 31|30|JCT 32|31|POBJ 33|32|CONJ 34|33|COORD
	35|34|JCT 36|35|POBJ 37|39|LINK 38|39|SUBJ 39|4|CJCT 40|41|INF 41|39|COMP
	42|44|DET 43|44|MOD 44|41|OBJ 45|4|PUNCT
*S1:	so if you don't wanna (.) if you don't actually wanna (.) make this
	computation you can just quote the homework problem .
%mor:	adv|so conj|if pro:per|you mod|do~neg|not v|want~inf|to conj|if
	pro:per|you mod|do~neg|not adv|actual&dadj-LY v|want~inf|to v|make
	det:dem|this n|compute&dv-TION pro:per|you mod|can adj|just n|quote
	det:art|the n|+n|home+n|work n|problem .
%gra:	1|2|JCT 2|6|LINK 3|6|SUBJ 4|6|AUX 5|4|NEG 6|0|ROOT 7|8|INF 8|6|COMP
	9|13|SUBJ 10|13|AUX 11|10|NEG 12|13|JCT 13|8|CPOBJ 14|15|INF 15|13|COMP
	16|17|DET 17|15|OBJ 18|21|SUBJ 19|21|AUX 20|21|MOD 21|17|CMOD 22|24|DET
	23|24|MOD 24|21|OBJ 25|6|PUNCT
*S1:	that's another way of getting the factors +...
%mor:	pro:dem|that~cop|be&3S pro:indef|another adv|way prep|of
	n:gerund|get-PRESP det:art|the n|factor-PL +...
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|5|JCT 5|3|NJCT 6|5|POBJ 7|8|DET 8|6|OBJ
	9|2|PUNCT
*S1:	&-uh first you get that the [/] &G the GCD of thirty one (.) and
	three forty one +...
%mor:	adv|first pro:per|you v|get comp|that det:art|the n:prop|GCD
	prep|of det:num|thirty det:num|one coord|and det:num|three
	det:num|forty det:num|one +...
%gra:	1|3|JCT 2|3|SUBJ 3|0|ROOT 4|13|LINK 5|6|DET 6|13|SUBJ 7|6|NJCT 8|9|ENUM
	9|7|POBJ 10|9|CONJ 11|12|QUANT 12|10|COORD 13|3|COMP 14|3|PUNCT
*S1:	and then you get the GCD of thirty three and three forty one .
%mor:	coord|and adv:tem|then pro:per|you v|get det:art|the n:prop|GCD
	prep|of det:num|thirty det:num|three coord|and det:num|three
	det:num|forty det:num|one .
%gra:	1|4|LINK 2|4|JCT 3|4|SUBJ 4|0|ROOT 5|6|DET 6|4|OBJ 7|6|NJCT 8|9|QUANT
	9|7|POBJ 10|9|CONJ 11|13|ENUM 12|13|DATE 13|10|COORD 14|4|PUNCT
*S1:	now (.) what we're gonna do today is [/] is what we started last
	time &-um and that's &-uh the multiplicative structure (.) xxx
	multiplicative structure of [/] of &-uh the +...
%mor:	adv|now pro:int|what pro:sub|we~aux|be&PRES part|go-PRESP~inf|to
	v|do adv:tem|today cop|be&3S pro:int|what pro:sub|we
	part|start-PASTP adj|last n|time coord|and pro:dem|that~cop|be&3S
	det:art|the adj|multiplicative n|structure adj|multiplicative
	n|structure prep|of det:art|the +...
%gra:	1|5|JCT 2|5|LINK 3|5|SUBJ 4|5|AUX 5|0|ROOT 6|7|INF 7|5|COMP 8|9|SUBJ
	9|7|COMP 10|9|PRED 11|10|OM 12|11|XMOD 13|14|MOD 14|17|SUBJ 15|14|CONJ
	16|15|COORD 17|12|COMP 18|20|DET 19|20|MOD 20|17|PRED 21|22|MOD 22|20|APP
	23|22|NJCT 24|23|POBJ 25|5|PUNCT
*S1:	the numbers modulo M (.) so (.) &wha &thi what we can do then is
	(.) pick a number A which is relatively prime to M +...
%mor:	det:art|the n|number-PL prep|modulo n:prop|M conj|so pro:int|what
	pro:sub|we mod|can v|do adv:tem|then cop|be&3S v|pick det:art|a
	n|number n:prop|A pro:rel|which cop|be&3S adv|relative&dadj-LY
	adj|prime inf|to n:prop|M +...
%gra:	1|2|DET 2|12|SUBJ 3|2|NJCT 4|3|POBJ 5|9|LINK 6|9|LINK 7|9|SUBJ 8|9|AUX
	9|12|CJCT 10|9|JCT 11|12|AUX 12|0|ROOT 13|14|DET 14|12|OBJ 15|14|APP
	16|17|LINK 17|14|CMOD 18|19|JCT 19|17|PRED 20|21|INF 21|19|XMOD 22|12|PUNCT
*S1:	&=writes:board and (.) we can ask the following question (.) what's
	the smallest positive number (.) such_that +...
%mor:	coord|and pro:sub|we mod|can v|ask det:art|the part|follow-PRESP
	n|question pro:int|what~cop|be&3S det:art|the adj|small-SP
	n|positive n|number conj|such_that +...
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|7|DET 6|7|MOD 7|4|OBJ 8|9|SUBJ
	9|4|COMP 10|13|DET 11|13|MOD 12|13|MOD 13|9|PRED 14|9|OM 15|4|PUNCT
*S1:	A raised to that [/] that power (.) is gonna be congruent to one
	modulo M .
%mor:	n:prop|A v|raise-PAST prep|to det:dem|that n|power aux|be&3S
	part|go-PRESP~inf|to cop|be adj|congruent prep|to pro:indef|one
	prep|modulo n:prop|M .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|5|DET 5|3|POBJ 6|7|AUX 7|2|XJCT 8|9|INF
	9|7|COMP 10|9|PRED 11|9|JCT 12|11|POBJ 13|12|NJCT 14|13|POBJ 15|2|PUNCT
*S1:	&=pause_while_writing there's there are certain numbers &-uh with
	this property for example phi of M &-uh +...
%mor:	pro:exist|there~cop|be&3S adv|there cop|be&PRES adj|certain
	n|number-PL prep|with det:dem|this n|property prep|for ex#adj|ample
	n|phi prep|of n:prop|M +...
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|2|PRED 5|6|MOD 6|4|PRED 7|4|JCT 8|9|DET
	9|7|POBJ 10|4|JCT 11|10|POBJ 12|11|OBJ 13|12|NJCT 14|13|POBJ 15|2|PUNCT
*S1:	is one of them by Euler's theorem &-um so this A is just called
	&=pause_while_writing of A (.) modulo M +...
%mor:	aux|be&3S pro:indef|one prep|of pro:obj|them prep|by
	adj|Euler&dn-POSS n|theorem conj|so det:dem|this n:prop|A aux|be&3S
	adv|just part|call-PASTP prep|of n:prop|A prep|modulo n:prop|M +...
%gra:	1|13|AUX 2|1|PRED 3|2|NJCT 4|3|POBJ 5|2|NJCT 6|7|MOD 7|5|POBJ 8|13|LINK
	9|10|DET 10|13|SUBJ 11|13|AUX 12|13|JCT 13|0|ROOT 14|13|JCT 15|14|POBJ
	16|13|JCT 17|16|POBJ 18|13|PUNCT
*S1:	so what we're going to start with is an example (.) when the
	modulus is eleven &=pause_while_writing of all the possible powers
	that you can have +...
%mor:	adv|so pro:int|what pro:sub|we~aux|be&PRES part|go-PRESP inf|to
	v|start prep|with cop|be&3S det:art|a n|example conj|when
	det:art|the n|modulus cop|be&3S det:num|eleven prep|of qn|all
	det:art|the adj|possible n|power-PL pro:rel|that pro:per|you mod|can
	v|have +...
%gra:	1|2|JCT 2|5|LINK 3|5|SUBJ 4|5|AUX 5|0|ROOT 6|7|INF 7|5|COMP 8|7|JCT
	9|8|POBJ 10|11|DET 11|9|PRED 12|15|LINK 13|14|DET 14|15|SUBJ 15|11|CMOD
	16|15|PRED 17|16|NJCT 18|21|QUANT 19|21|DET 20|21|MOD 21|17|POBJ 22|25|LINK
	23|25|SUBJ 24|25|AUX 25|21|CMOD 26|5|PUNCT
*S1:	I'd like you to fill out these tables
	&=pause_while_distributing_tables so &le let's do the first one
	together &-um (0.6) ⌈ do you have the ⌉ +/.
%mor:	pro:sub|I~mod|genmod v|like pro:per|you inf|to v|fill adv|out
	det:dem|these n|table-PL adv|so v|let~pro:obj|us v|do det:art|the
	adv|first det:num|one adv|together v|do pro:per|you v|have
	det:art|the +/.
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|OBJ 5|6|INF 6|3|PUNCT 7|6|JCT 8|9|DET
	9|7|POBJ 10|11|JCT 11|6|ROOT 12|11|OBJ 13|11|COMP 14|16|DET 15|16|JCT
	16|13|OBJ 17|13|JCT 18|13|ROOT 19|20|SUBJ 20|18|COMP 21|22|DET 22|20|OBJ
*SUM:	⌊ we need another one ⌋ .
%mor:	pro:sub|we v|need qn|another pro:indef|one .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|QUANT 4|2|OBJ 5|2|PUNCT
*S1:	+, you (.) need one more ?
%mor:	pro:per|you v|need pro:indef|one adv|more ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|OBJ 4|2|JCT 5|2|PUNCT
*SUM:	one more .
%mor:	det:num|one adv|more .
%gra:	1|0|INCROOT 2|1|JCT 3|1|PUNCT
*S6:	thanks .
%mor:	co|thanks .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so let's start with the first one (.) if &-uh the powers of two mod
	[: modulo] eleven &-um <what's the> [/] what's the first (.) what's
	the first I such_that two to the I (.) is congruent to one modulo
	eleven ?
%mor:	adv|so v|let~pro:obj|us v|start prep|with det:art|the adj|first
	pro:indef|one comp|if det:art|the n|power-PL prep|of det:num|two
	prep|modulo det:num|eleven pro:int|what~cop|be&3S det:art|the
	adj|first pro:int|what~cop|be&3S det:art|the adv|first pro:sub|I
	conj|such_that det:num|two prep|to det:art|the pro:sub|I cop|be&3S
	adj|congruent prep|to pro:indef|one prep|modulo det:num|eleven ?
%gra:	1|2|JCT 2|0|ROOT 3|2|OBJ 4|2|PUNCT 5|4|JCT 6|8|DET 7|8|MOD 8|5|POBJ
	9|8|NJCT 10|11|DET 11|9|INCROOT 12|11|NJCT 13|12|POBJ 14|13|NJCT 15|14|POBJ
	16|17|SUBJ 17|11|ROOT 18|19|DET 19|17|PRED 20|21|SUBJ 21|19|ROOT
	22|23|DET 23|36|JCT 24|36|SUBJ 25|24|OM 26|27|QUANT 27|25|JCT 28|30|DET
	29|30|SUBJ 30|27|POBJ 31|30|PRED 32|31|JCT 33|32|POBJ 34|33|NJCT 35|34|POBJ
	36|21|ROOT
*S1:	well you have to go all the way up to ten (.) we know by Euler's
	theorem that ten will work &-um well actually (.) that's (.) you
	know Fermat's theorem .
%mor:	co|well pro:per|you v|have inf|to v|go qn|all det:art|the n|way
	adv|up prep|to det:num|ten pro:sub|we v|know prep|by
	adj|Euler&dn-POSS n|theorem pro:rel|that det:num|ten mod|will v|work
	adv|well adv|actual&dadj-LY pro:dem|that~cop|be&3S pro:per|you
	v|know adj|Fermat&dn-POSS n|theorem .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|5|INF 5|3|COMP 6|8|QUANT 7|8|DET 8|5|OBJ
	9|5|JCT 10|5|JCT 11|10|POBJ 12|13|SUBJ 13|3|CJCT 14|13|JCT 15|16|MOD
	16|14|POBJ 17|20|LINK 18|20|SUBJ 19|20|AUX 20|16|CMOD 21|20|JCT 22|20|JCT
	23|24|SUBJ 24|20|COMP 25|26|SUBJ 26|24|CPRED 27|28|MOD 28|26|OBJ 29|3|PUNCT
*S1:	&=pause_while_writing a@l to the ten (.) is gonna be congruent to
	one modulo eleven (.) for any number A (.) which is not divisible by
	eleven .
%mor:	n:let|a prep|to det:art|the det:num|ten aux|be&3S
	part|go-PRESP~inf|to cop|be adj|congruent prep|to det:num|one
	prep|modulo det:num|eleven prep|for qn|any n|number n:prop|A
	pro:rel|which cop|be&3S neg|not adj|divisible prep|by det:num|eleven
	.
%gra:	1|6|LINK 2|6|JCT 3|4|DET 4|6|SUBJ 5|6|AUX 6|0|ROOT 7|8|INF 8|6|COMP
	9|8|PRED 10|8|JCT 11|10|POBJ 12|11|NJCT 13|12|POBJ 14|13|NJCT 15|16|QUANT
	16|17|MOD 17|14|POBJ 18|19|LINK 19|17|CMOD 20|19|NEG 21|19|PRED 22|21|JCT
	23|22|POBJ 24|6|PUNCT
*S1:	that's Fermat's theorem (.) so +...
%mor:	pro:dem|that~cop|be&3S adj|Fermat&dn-POSS n|theorem adv|so +...
%gra:	1|2|SUBJ 2|0|ROOT 3|4|MOD 4|2|PRED 5|2|JCT 6|2|PUNCT
*S1:	ten will always work but sometimes (.) the order is not ten (.) but
	something less but for two (.) the order is ten &-uh what's the
	order of three ?
%mor:	det:num|ten mod|will adv|always n|work conj|but adv|sometimes
	det:art|the n|order cop|be&3S neg|not det:num|ten conj|but
	pro:indef|something adj|less conj|but prep|for det:num|two
	det:art|the n|order cop|be&3S det:num|ten pro:int|what~cop|be&3S
	det:art|the n|order prep|of det:num|three ?
%gra:	1|4|QUANT 2|4|AUX 3|4|JCT 4|0|INCROOT 5|9|LINK 6|9|JCT 7|8|DET 8|9|SUBJ
	9|4|CMOD 10|9|NEG 11|9|PRED 12|11|CONJ 13|12|COORD 14|13|POSTMOD
	15|20|LINK 16|20|JCT 17|19|QUANT 18|19|DET 19|20|SUBJ 20|9|CJCT 21|20|PRED
	22|23|SUBJ 23|21|CMOD 24|25|DET 25|23|PRED 26|25|NJCT 27|26|POBJ 28|4|PUNCT
*S8:	&-uh .
*S1:	⌈ five ⌉ .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*S8:	⌊ five ⌋ ?
%mor:	det:num|five ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	okay .
%mor:	co|okay .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	&-um what's the order of four ?
%mor:	pro:int|what~cop|be&3S det:art|the n|order prep|of det:num|four ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|2|PUNCT
*S1:	&=unintelligible_answers:multiple .
*S1:	it's still five .
%mor:	pro:per|it~cop|be&3S adv|still det:num|five .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|JCT 4|2|PRED 5|2|PUNCT
*S1:	what's the order of five ?
%mor:	pro:int|what~cop|be&3S det:art|the n|order prep|of det:num|five ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|2|PUNCT
*S1:	&=unintelligible_answers:multiple .
*S1:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	what's the order of six ?
%mor:	pro:int|what~cop|be&3S det:art|the n|order prep|of det:num|six ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|2|PUNCT
*S1:	&=unintelligible_answers:multiple .
*S1:	ten .
%mor:	det:num|ten .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	&-uh what's the order of seven ?
%mor:	pro:int|what~cop|be&3S det:art|the n|order prep|of det:num|seven ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|2|PUNCT
*SUM:	⌈ ten ⌉ .
%mor:	det:num|ten .
%gra:	1|0|INCROOT 2|1|PUNCT
*SUF:	⌊ ten ⌋ .
%mor:	det:num|ten .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	ten .
%mor:	det:num|ten .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	the order of eight ?
%mor:	det:art|the n|order prep|of det:num|eight ?
%gra:	1|2|DET 2|0|INCROOT 3|2|NJCT 4|3|POBJ 5|2|PUNCT
*S1:	&=unintelligible_answers:multiple .
*S1:	it's ten .
%mor:	pro:per|it~cop|be&3S det:num|ten .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|2|PUNCT
*S1:	the order of nine ?
%mor:	det:art|the n|order prep|of det:num|nine ?
%gra:	1|2|DET 2|0|INCROOT 3|2|NJCT 4|3|POBJ 5|2|PUNCT
*SUM:	five ?
%mor:	det:num|five ?
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	⌈ four ⌉ .
%mor:	det:num|four .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	⌊ it's five ⌋ .
%mor:	pro:per|it~cop|be&3S det:num|five .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|2|PUNCT
*S1:	and what's the order of ten ?
%mor:	coord|and pro:int|what~cop|be&3S det:art|the n|order prep|of
	det:num|ten ?
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|PRED 6|5|NJCT 7|6|POBJ 8|3|PUNCT
*S1:	&=unintelligible_answers:multiple .
*S1:	how can you tell that without (.) ever looking at this table (.)
	that the order of ten is two ?
%mor:	pro:int|how mod|can pro:per|you v|tell pro:dem|that prep|without
	adv|ever part|look-PRESP prep|at det:dem|this n|table pro:rel|that
	det:art|the n|order prep|of det:num|ten aux|be&3S det:num|two ?
%gra:	1|4|LINK 2|4|AUX 3|4|SUBJ 4|0|ROOT 5|4|OBJ 6|4|JCT 7|8|JCT 8|6|CPOBJ
	9|8|JCT 10|11|DET 11|9|POBJ 12|14|LINK 13|14|DET 14|11|CMOD 15|14|NJCT
	16|18|SUBJ 17|18|AUX 18|15|POBJ 19|4|PUNCT
*S1:	mod [: modulo] eleven .
%mor:	prep|modulo det:num|eleven .
%gra:	1|0|INCROOT 2|1|POBJ 3|1|PUNCT
*S1:	hm ?
%mor:	co|hm ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	xxx .
*S1:	&-uh the idea is that ten is congruent to negative one (.)
	of_course negative one (.) to the square (.) is one (.) so +...
%mor:	det:art|the n|idea cop|be&3S comp|that det:num|ten cop|be&3S
	adj|congruent inf|to adj|negative det:num|one co|of_course
	adj|negative det:num|one prep|to det:art|the adj|square aux|be&3S
	det:num|one co|so +...
%gra:	1|2|DET 2|3|SUBJ 3|0|ROOT 4|6|LINK 5|6|SUBJ 6|3|PRED 7|6|PRED 8|9|INF
	9|10|MOD 10|18|QUANT 11|13|COM 12|13|MOD 13|18|DATE 14|18|LINK 15|16|DET
	16|18|SUBJ 17|18|AUX 18|7|OM 19|18|COM 20|3|PUNCT
*S1:	the order of ten (.) must be (.) two +...
%mor:	det:art|the n|order prep|of det:num|ten mod|must cop|be det:num|two
	+...
%gra:	1|2|DET 2|7|SUBJ 3|2|NJCT 4|6|SUBJ 5|6|AUX 6|3|POBJ 7|0|ROOT 8|7|PUNCT
*S1:	so what are the possible orders ?
%mor:	co|so pro:int|what cop|be&PRES det:art|the adj|possible n|order-PL
	?
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|PRED 7|3|PUNCT
*S1:	the (.) I didn't list (.) the number one (.) what's the order of
	the number one ?
%mor:	det:art|the pro:sub|I mod|do&PAST~neg|not v|list det:art|the
	n|number det:num|one pro:int|what~cop|be&3S det:art|the n|order
	prep|of det:art|the n|number pro:indef|one ?
%gra:	1|2|DET 2|5|SUBJ 3|5|AUX 4|3|NEG 5|0|ROOT 6|7|DET 7|5|OBJ 8|5|JCT
	9|10|SUBJ 10|8|CPOBJ 11|12|DET 12|10|PRED 13|12|NJCT 14|15|DET 15|13|POBJ
	16|12|APP 17|5|PUNCT
*SUM:	one .
%mor:	det:num|one .
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	one .
%mor:	det:num|one .
%gra:	1|0|INCROOT 2|1|PUNCT
*SS:	one &=unintelligible_speech_and_laugh:SUm .
%mor:	det:num|one .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	that's the only thing that's the only number (.) whose order is one
	(.) because the only number raised to the first power (.) that will
	give you one (.) is the number one .
%mor:	pro:dem|that~cop|be&3S det:art|the qn|only n|thing
	pro:rel|that~cop|be&3S det:art|the qn|only n|number pro:rel|whose
	n|order cop|be&3S pro:indef|one conj|because det:art|the qn|only
	n|number v|raise-PAST prep|to det:art|the adj|first n|power
	pro:rel|that mod|will v|give pro:per|you pro:indef|one cop|be&3S
	det:art|the n|number pro:indef|one .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|DET 4|5|QUANT 5|2|PRED 6|7|LINK 7|5|CMOD 8|10|DET
	9|10|QUANT 10|7|PRED 11|13|LINK 12|13|SUBJ 13|10|CMOD 14|13|PRED
	15|19|LINK 16|18|DET 17|18|QUANT 18|19|SUBJ 19|7|CJCT 20|19|JCT 21|23|DET
	22|23|MOD 23|20|POBJ 24|26|LINK 25|26|AUX 26|23|CMOD 27|26|OBJ2 28|29|SUBJ
	29|26|COMP 30|32|DET 31|32|MOD 32|29|PRED 33|2|PUNCT
*S1:	what are (.) if M is a prime number (.) what are the numbers of
	order two ?
%mor:	pro:int|what cop|be&PRES comp|if n:prop|M cop|be&3S det:art|a
	n|prime n|number pro:int|what cop|be&PRES det:art|the n|number-PL
	prep|of n|order det:num|two ?
%gra:	1|2|LINK 2|0|ROOT 3|5|LINK 4|5|SUBJ 5|2|PRED 6|8|DET 7|8|MOD 8|5|PRED
	9|10|SUBJ 10|8|CMOD 11|12|DET 12|10|PRED 13|12|NJCT 14|13|POBJ 15|12|ENUM
	16|2|PUNCT
*SUM:	oh .
%mor:	co|oh .
%gra:	1|0|INCROOT 2|1|PUNCT
*SU3:	M minus one ?
%mor:	n:prop|M prep|minus pro:indef|one ?
%gra:	1|0|INCROOT 2|1|JCT 3|2|POBJ 4|1|PUNCT
*S1:	M minus one .
%mor:	n:prop|M prep|minus pro:indef|one .
%gra:	1|0|INCROOT 2|1|JCT 3|2|POBJ 4|1|PUNCT
*S1:	<M minus one is> [/] M minus one is always a number of order two
	&-uh is there any other number (.) of order two mod [: modulo] &a
	mod [: modulo] a prime ?
%mor:	n:prop|M prep|minus pro:indef|one cop|be&3S adv|always det:art|a
	n|number prep|of n|order det:num|two cop|be&3S adv|there qn|any
	qn|other n|number prep|of n|order det:num|two prep|modulo
	prep|modulo det:art|a n|prime ?
%gra:	1|4|SUBJ 2|1|NJCT 3|2|POBJ 4|0|ROOT 5|4|JCT 6|7|DET 7|5|POBJ 8|7|NJCT
	9|8|POBJ 10|11|QUANT 11|4|CJCT 12|11|JCT 13|15|QUANT 14|15|QUANT
	15|11|PRED 16|15|NJCT 17|16|POBJ 18|19|QUANT 19|15|NJCT 20|19|JCT 21|22|DET
	22|20|POBJ 23|4|PUNCT
*S1:	(0.6) .
*SUM:	one [/] one will be won't it ?
%mor:	det:num|one mod|will cop|be mod|will~neg|not pro:per|it ?
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|6|AUX 5|4|NEG 6|3|PRED 7|3|PUNCT
*S1:	one has order one .
%mor:	det:num|one aux|have&3S n|order pro:indef|one .
%gra:	1|3|SUBJ 2|3|AUX 3|4|MOD 4|0|ROOT 5|4|PUNCT
*SUM:	oh xxx .
%mor:	co|oh .
%gra:	1|0|INCROOT 2|1|PUNCT
*SU3:	M is prime (.) right ?
%mor:	n:prop|M cop|be&3S adj|prime co|right ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|2|COM 5|2|PUNCT
*S1:	if M is prime (.) there isn't [?] why ?
%mor:	conj|if n:prop|M cop|be&3S adj|prime adv|there cop|be&3S~neg|not
	pro:rel|why ?
%gra:	1|3|LINK 2|3|SUBJ 3|6|CJCT 4|3|PRED 5|6|SUBJ 6|0|ROOT 7|6|NEG 8|6|PRED
	9|6|PUNCT
*SU3:	because (.) .
%mor:	conj|because .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	<because of> [/] because of that [?] .
%mor:	conj|because prep|of pro:dem|that .
%gra:	1|0|INCROOT 2|1|JCT 3|2|POBJ 4|1|PUNCT
*S1:	if the order (.) of [x 3] the number is (.) two (.) then that
	number satisfies the equation x@l squared is congruent to one (.)
	modulo M .
%mor:	conj|if det:art|the n|order prep|of det:art|the n|number cop|be&3S
	det:num|two adv:tem|then comp|that n|number v|satisfy-3S det:art|the
	n|equate&dv-TION n:let|x part|square-PASTP cop|be&3S adj|congruent
	prep|to det:num|one prep|modulo n:prop|M .
%gra:	1|7|LINK 2|3|DET 3|7|SUBJ 4|3|NJCT 5|6|DET 6|4|POBJ 7|0|ROOT 8|9|QUANT
	9|7|PRED 10|12|LINK 11|12|SUBJ 12|9|COMP 13|14|DET 14|12|OBJ 15|12|OBJ
	16|15|XMOD 17|16|OBJ 18|17|PRED 19|18|JCT 20|19|POBJ 21|20|NJCT
	22|21|POBJ 23|7|PUNCT
*S1:	if M is a prime (.) we have only two solutions (.) plus one (.)
	which has order one (.) and minus one (.) which has order (.) two
	+...
%mor:	conj|if n:prop|M cop|be&3S det:art|a n|prime pro:sub|we v|have
	adv|only det:num|two n|solution-PL adv|plus det:num|one
	pro:rel|which aux|have&3S n|order pro:indef|one coord|and n|minus
	det:num|one pro:rel|which aux|have&3S v|order det:num|two +...
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|PRED 6|7|SUBJ 7|5|CMOD 8|9|JCT
	9|10|QUANT 10|7|OBJ 11|12|JCT 12|15|QUANT 13|15|LINK 14|15|AUX 15|10|APP
	16|15|PRED 17|16|CONJ 18|19|MOD 19|17|COORD 20|22|LINK 21|22|AUX
	22|16|CMOD 23|22|OBJ 24|3|PUNCT
*S1:	okay so <if we> [/] if we start to fill out this (.) list (.) the
	possible orders are (.) one (.) and there is only one (.) number of
	order one .
%mor:	co|okay adv|so conj|if pro:sub|we v|start inf|to v|fill adv|out
	det:dem|this n|list det:art|the adj|possible n|order-PL cop|be&PRES
	det:num|one coord|and adv|there cop|be&3S adv|only det:num|one
	n|number prep|of n|order pro:indef|one .
%gra:	1|3|COM 2|3|JCT 3|5|LINK 4|5|SUBJ 5|0|ROOT 6|7|INF 7|5|COMP 8|7|JCT
	9|10|DET 10|8|POBJ 11|13|DET 12|13|MOD 13|14|SUBJ 14|7|COMP 15|14|PRED
	16|5|CONJ 17|18|SUBJ 18|16|COORD 19|20|JCT 20|21|QUANT 21|18|PRED 22|21|NJCT
	23|22|POBJ 24|21|ENUM 25|5|PUNCT
*S1:	then there's two (.) is a possible order (.) and the multiplicity's
	still one (.) what are the other possible orders (.) that show up ?
%mor:	adv:tem|then pro:exist|there~cop|be&3S det:num|two cop|be&3S
	det:art|a adj|possible n|order coord|and det:art|the
	n|multiplicity~cop|be&3S adj|still det:num|one pro:int|what
	cop|be&PRES det:art|the qn|other adj|possible n|order-PL
	det:dem|that n|show adv|up ?
%gra:	1|3|JCT 2|3|SUBJ 3|0|ROOT 4|5|QUANT 5|3|PRED 6|8|DET 7|8|MOD 8|12|SUBJ
	9|8|CONJ 10|11|DET 11|9|COORD 12|5|PRED 13|14|MOD 14|12|PRED 15|16|LINK
	16|12|PRED 17|20|DET 18|20|QUANT 19|20|MOD 20|16|PRED 21|22|DET
	22|20|XMOD 23|22|JCT 24|3|PUNCT
*SUM:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	five and ten .
%mor:	det:num|five coord|and det:num|ten .
%gra:	1|0|INCROOT 2|1|CONJ 3|2|COORD 4|1|PUNCT
*S1:	how many (.) numbers (.) are there with order five ?
%mor:	pro:int|how qn|many n|number-PL cop|be&PRES adv|there prep|with
	n|order det:num|five ?
%gra:	1|3|JCT 2|3|QUANT 3|4|SUBJ 4|0|ROOT 5|4|JCT 6|4|JCT 7|8|MOD 8|6|POBJ
	9|4|PUNCT
*SUM:	four .
%mor:	det:num|four .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	okay .
%mor:	co|okay .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	how many numbers +...
%mor:	pro:int|how qn|many n|number-PL +...
%gra:	1|2|JCT 2|3|QUANT 3|0|INCROOT 4|3|PUNCT
*S1:	of order ten ?
%mor:	prep|of n|order det:num|ten ?
%gra:	1|0|INCROOT 2|3|MOD 3|1|POBJ 4|1|PUNCT
*SUM:	four xxx .
%mor:	det:num|four .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	alright so let's [/] let's start to look for some factors .
%mor:	co|alright co|so v|let~pro:obj|us v|start inf|to v|look prep|for
	qn|some n|factor-PL .
%gra:	1|3|COM 2|3|COM 3|0|ROOT 4|3|OBJ 5|3|COMP 6|7|INF 7|5|COMP 8|7|JCT
	9|10|QUANT 10|8|POBJ 11|3|PUNCT
*S1:	so what are the possible orders ?
%mor:	co|so pro:int|what cop|be&PRES det:art|the adj|possible n|order-PL
	?
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|PRED 7|3|PUNCT
*S1:	one two (.) five and ten .
%mor:	det:num|one det:num|two det:num|five coord|and det:num|ten .
%gra:	1|3|DATE 2|3|DATE 3|0|INCROOT 4|3|CONJ 5|4|COORD 6|3|PUNCT
*S1:	&-uh what does this suggest ?
%mor:	pro:int|what mod|do&3S pro:dem|this v|suggest ?
%gra:	1|4|SUBJ 2|4|AUX 3|4|SUBJ 4|0|ROOT 5|4|PUNCT
*S8:	that [?] all numbers relatively prime to one .
%mor:	comp|that qn|all n|number-PL adv|relative&dadj-LY n|prime inf|to
	pro:indef|one .
%gra:	1|3|LINK 2|3|QUANT 3|5|SUBJ 4|5|JCT 5|0|INCROOT 6|7|INF 7|5|XMOD
	8|5|PUNCT
*S1:	what was that ?
%mor:	pro:int|what cop|be&PAST&13S pro:dem|that ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|2|PUNCT
*SUM:	all numbers relatively prime to one (.) well (.) that's &a one's
	prime so (.) &=laughs:multiple .
%mor:	qn|all n|number-PL adj|relative&dn-LY n|prime prep|to det:num|one
	n|well pro:rel|that~cop|be&3S adj|one&dn-POSS n|prime adv|so .
%gra:	1|2|QUANT 2|4|MOD 3|4|MOD 4|0|INCROOT 5|4|NJCT 6|7|QUANT 7|5|POBJ
	8|9|LINK 9|7|CMOD 10|11|MOD 11|9|PRED 12|9|JCT 13|4|PUNCT
*S8:	factors of +/.
%mor:	v|factor-3S prep|of +/.
%gra:	1|0|ROOT 2|1|JCT 3|1|PUNCT
*S1:	Todd ?
%mor:	n:prop|Todd ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S8:	+, N &mi &w .
%mor:	n:prop|N .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	factors of ?
%mor:	v|factor-3S prep|of ?
%gra:	1|0|ROOT 2|1|JCT 3|1|PUNCT
*S8:	N minus one ?
%mor:	n:prop|N prep|minus pro:indef|one ?
%gra:	1|0|INCROOT 2|1|JCT 3|2|POBJ 4|1|PUNCT
*S1:	factors of N minus one .
%mor:	n|factor-PL prep|of n:prop|N prep|minus pro:indef|one .
%gra:	1|0|INCROOT 2|1|NJCT 3|2|POBJ 4|1|NJCT 5|4|POBJ 6|1|PUNCT
*SUM:	factors of order .
%mor:	v|factor-3S prep|of n|order .
%gra:	1|0|ROOT 2|1|JCT 3|2|POBJ 4|1|PUNCT
*S1:	factors of ?
%mor:	v|factor-3S prep|of ?
%gra:	1|0|ROOT 2|1|JCT 3|1|PUNCT
*SUM:	of phi of M (0.5) .
%mor:	prep|of n|phi prep|of n:prop|M .
%gra:	1|0|INCROOT 2|1|POBJ 3|2|NJCT 4|3|POBJ 5|1|PUNCT
*S1:	why phi of M ?
%mor:	pro:rel|why n|phi prep|of n:prop|M ?
%gra:	1|2|LINK 2|0|INCROOT 3|2|NJCT 4|3|POBJ 5|2|PUNCT
*SUM:	I don't know &i you know just thinking more xxx <more generally>
	[?] factors of phi of M .
%mor:	pro:sub|I mod|do~neg|not v|know pro:per|you v|know adv|just
	part|think-PRESP adv|more adv|more adv|general&dadj-LY v|factor-3S
	prep|of n|phi prep|of n:prop|M .
%gra:	1|4|SUBJ 2|4|AUX 3|2|NEG 4|0|ROOT 5|6|SUBJ 6|4|COMP 7|8|JCT 8|6|COMP
	9|8|JCT 10|8|JCT 11|12|JCT 12|8|COMP 13|12|JCT 14|13|POBJ 15|14|NJCT
	16|15|POBJ 17|4|PUNCT
*S1:	⌈ well &w ⌉ .
%mor:	co|well .
%gra:	1|0|INCROOT 2|1|PUNCT
*S2:	⌊ xxx ⌋ divides the xxx .
%mor:	v|divide-3S det:art|the .
%gra:	1|0|ROOT 2|3|DET 3|1|PUNCT
*S1:	okay so &i if this data will [x 3] (.) not be enough to come up
	with [x 4] the right answer (.) for sure but <we can> [/] &j we can
	we just try to make some conjectures and one conjecture was that (.)
	the order +...
%mor:	co|okay adv|so conj|if det:dem|this n|data mod|will neg|not cop|be
	adv|enough inf|to v|come adv|up prep|with det:art|the adj|right
	n|answer prep|for adj|sure conj|but pro:sub|we mod|can pro:sub|we
	adv|just v|try inf|to v|make qn|some n|conjecture-PL coord|and
	det:num|one n|conjecture cop|be&PAST&13S pro:rel|that det:art|the
	n|order +...
%gra:	1|3|COM 2|3|JCT 3|8|LINK 4|5|DET 5|8|SUBJ 6|8|AUX 7|6|NEG 8|0|ROOT
	9|8|JCT 10|11|INF 11|8|XJCT 12|11|JCT 13|11|JCT 14|16|DET 15|16|MOD
	16|13|POBJ 17|16|NJCT 18|17|POBJ 19|24|LINK 20|24|SUBJ 21|24|AUX 22|24|SUBJ
	23|24|JCT 24|18|CMOD 25|26|INF 26|24|COMP 27|28|QUANT 28|32|SUBJ 29|28|CONJ
	30|31|QUANT 31|29|COORD 32|26|COMP 33|35|LINK 34|35|DET 35|32|PRED
	36|8|PUNCT
*S1:	the possible orders that appear (.) all divide M minus one .
%mor:	det:art|the adj|possible n|order-PL pro:rel|that v|appear post|all
	v|divide n:prop|M prep|minus pro:indef|one .
%gra:	1|3|DET 2|3|MOD 3|7|SUBJ 4|5|LINK 5|3|CMOD 6|5|PQ 7|0|ROOT 8|7|OBJ
	9|7|JCT 10|9|POBJ 11|7|PUNCT
*S1:	&=pause_while_writing so (.) it was ten for us +...
%mor:	co|so pro:per|it cop|be&PAST&13S det:num|ten prep|for pro:obj|us
	+...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|4|JCT 6|5|POBJ 7|3|PUNCT
*S1:	now +...
%mor:	adv|now +...
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	of_course ten is [/] is special (.) (be)cause any number to the
	power ten is congruent to one (.) modulo eleven (.) so +...
%mor:	co|of_course det:num|ten cop|be&3S adj|special conj|because qn|any
	n|number prep|to det:art|the n|power det:num|ten cop|be&3S
	adj|congruent prep|to pro:indef|one prep|modulo det:num|eleven
	adv|so +...
%gra:	1|3|COM 2|3|QUANT 3|0|ROOT 4|3|PRED 5|3|JCT 6|7|QUANT 7|5|POBJ 8|7|NJCT
	9|10|DET 10|8|POBJ 11|12|QUANT 12|7|CMOD 13|12|JCT 14|12|JCT 15|14|POBJ
	16|17|JCT 17|18|QUANT 18|15|NJCT 19|3|PUNCT
*S1:	let's [/] let's assume MM is prime .
%mor:	v|let~pro:obj|us v|assume n:prop|MM cop|be&3S n|prime .
%gra:	1|0|ROOT 2|1|OBJ 3|1|COMP 4|5|SUBJ 5|3|COMP 6|5|PRED 7|1|PUNCT
*S1:	&=pause_while_writing (.) this conjecture makes some sense (.) so
	every number raised to the power m@l minus one (.) is congruent to
	one modulo M (.) so we might think that (.) the order (.) will
	actually divide this number .
%mor:	det:dem|this n|conjecture v|make-3S qn|some n|sense co|so qn|every
	n|number v|raise-PAST prep|to det:art|the n|power n:let|m n|minus
	pro:indef|one cop|be&3S adj|congruent prep|to det:num|one
	prep|modulo n:prop|M conj|so pro:sub|we mod|might v|think comp|that
	det:art|the n|order mod|will adv|actual&dadj-LY v|divide
	det:dem|this v|number .
%gra:	1|2|DET 2|3|SUBJ 3|0|ROOT 4|5|QUANT 5|9|JCT 6|8|COM 7|8|QUANT 8|9|SUBJ
	9|3|COMP 10|9|JCT 11|12|DET 12|10|POBJ 13|16|SUBJ 14|16|JCT 15|16|SUBJ
	16|9|CJCT 17|16|PRED 18|17|JCT 19|18|POBJ 20|19|NJCT 21|20|POBJ
	22|25|LINK 23|25|SUBJ 24|25|AUX 25|16|CJCT 26|31|LINK 27|28|DET 28|31|SUBJ
	29|31|AUX 30|31|JCT 31|25|COMP 32|33|DET 33|31|COMP 34|3|PUNCT
*S1:	but what if M is not prime ?
%mor:	conj|but pro:int|what conj|if n:prop|M cop|be&3S neg|not adj|prime
	?
%gra:	1|0|INCROOT 2|5|LINK 3|5|LINK 4|5|SUBJ 5|1|CPOBJ 6|5|NEG 7|5|PRED
	8|1|PUNCT
*S1:	how (.) do you think this should be modified +...
%mor:	pro:int|how mod|do pro:per|you v|think det:dem|this mod|should
	aux|be part|modify-PASTP +...
%gra:	1|4|LINK 2|4|AUX 3|4|SUBJ 4|0|ROOT 5|8|DET 6|8|AUX 7|8|AUX 8|4|COMP
	9|4|PUNCT
*S1:	this conjecture ?
%mor:	det:dem|this n|conjecture ?
%gra:	1|2|DET 2|0|INCROOT 3|2|PUNCT
*S1:	(0.4) so (.) m@l minus one was special (.) ten was special (.)
	because a@l to the ten is congruent to one (.) for any number A (.)
	that's relatively prime to eleven .
%mor:	co|so n:let|m n|minus pro:indef|one cop|be&PAST&13S adj|special
	det:num|ten aux|be&PAST&13S adj|special conj|because n:let|a prep|to
	det:art|the det:num|ten cop|be&3S adj|congruent inf|to pro:indef|one
	prep|for qn|any n|number n:prop|A pro:rel|that~cop|be&3S
	adv|relative&dadj-LY adj|prime prep|to det:num|eleven .
%gra:	1|5|COM 2|5|LINK 3|4|MOD 4|5|SUBJ 5|0|ROOT 6|8|MOD 7|8|QUANT 8|5|PRED
	9|8|PRED 10|8|JCT 11|10|POBJ 12|15|JCT 13|14|DET 14|15|SUBJ 15|11|CJCT
	16|15|PRED 17|18|INF 18|16|XMOD 19|18|NJCT 20|21|QUANT 21|19|POBJ
	22|21|APP 23|24|LINK 24|22|CMOD 25|26|JCT 26|24|PRED 27|26|JCT 28|27|POBJ
	29|5|PUNCT
*SU2:	yeah +...
%mor:	co|yeah +...
%gra:	1|0|INCROOT 2|1|PUNCT
*SU2:	⌈ right [?] ⌉ .
%mor:	co|right .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	⌊ &i &i ⌋ if you don't start with a prime number +/.
%mor:	conj|if pro:per|you mod|do~neg|not v|start prep|with det:art|a
	n|prime v|number +/.
%gra:	1|5|LINK 2|5|SUBJ 3|5|AUX 4|3|NEG 5|9|CJCT 6|5|JCT 7|8|DET 8|6|POBJ
	9|0|ROOT 10|9|PUNCT
*SUM:	shouldn't you just ?
%mor:	mod|should~neg|not pro:per|you adv|just ?
%gra:	1|3|AUX 2|1|NEG 3|0|ROOT 4|3|JCT 5|3|PUNCT
*S1:	+, how should we do you modify this theorem (.) Buddy ?
%mor:	pro:int|how mod|should pro:sub|we v|do pro:per|you v|modify
	det:dem|this n|theorem n:prop|Buddy ?
%gra:	1|4|JCT 2|4|AUX 3|4|SUBJ 4|6|PRED 5|6|SUBJ 6|0|ROOT 7|8|DET 8|6|OBJ
	9|8|APP 10|6|PUNCT
*S9:	well if M isn't prime then can't you have some numbers for which no
	order exists (.) like &-uh two and four &-uh <I mean like there (.)
	or (.)> [?] .
%mor:	adv|well comp|if n:prop|M cop|be&3S~neg|not adj|prime adv:tem|then
	mod|can~neg|not pro:per|you v|have qn|some n|number-PL prep|for
	pro:rel|which qn|no n|order v|exist-3S co|like det:num|two coord|and
	det:num|four pro:sub|I v|mean conj|like adv|there coord|or .
%gra:	1|2|JCT 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|4|NEG 6|4|PRED 7|11|JCT 8|11|AUX
	9|8|NEG 10|11|SUBJ 11|6|ROOT 12|13|QUANT 13|11|OBJ 14|11|JCT 15|16|LINK
	16|17|QUANT 17|18|SUBJ 18|14|CPOBJ 19|20|COM 20|24|QUANT 21|20|CONJ
	22|21|COORD 23|24|SUBJ 24|18|ROOT 25|27|LINK 26|27|JCT 27|24|INCROOT
	28|27|PUNCT
*S1:	oh &w the order (.) always exists because I'm making the assumption
	that A is relatively prime to M .
%mor:	co|oh det:art|the n|order adv|always v|exist-3S conj|because
	pro:sub|I~aux|be&1S part|make-PRESP det:art|the n|assumption
	pro:rel|that n:prop|A cop|be&3S adv|relative&dadj-LY adj|prime
	inf|to n:prop|M .
%gra:	1|3|COM 2|3|DET 3|5|SUBJ 4|5|JCT 5|0|ROOT 6|9|LINK 7|9|SUBJ 8|9|AUX
	9|5|CJCT 10|11|DET 11|9|OBJ 12|14|LINK 13|14|SUBJ 14|11|CMOD 15|16|JCT
	16|14|PRED 17|18|INF 18|16|XMOD 19|5|PUNCT
*S1:	other [/] other (.) course [?] (.) I [/] I'd be in trouble (.) Luke
	?
%mor:	qn|other n|course pro:sub|I~mod|genmod cop|be prep|in n|trouble
	n:prop|Luke ?
%gra:	1|2|QUANT 2|5|JCT 3|5|SUBJ 4|5|AUX 5|0|ROOT 6|5|JCT 7|8|MOD 8|6|POBJ
	9|5|PUNCT
*SUM:	couldn't we just change M minus one to phi of M ?
%mor:	mod|could~neg|not pro:sub|we adj|just n|change n:prop|M n|minus
	det:num|one prep|to n|phi prep|of n:prop|M ?
%gra:	1|5|AUX 2|1|NEG 3|5|SUBJ 4|5|MOD 5|7|MOD 6|7|MOD 7|0|ROOT 8|7|PRED
	9|8|JCT 10|9|POBJ 11|10|NJCT 12|11|POBJ 13|7|PUNCT
*S1:	&-uh Richie ?
%mor:	n:prop|Richie ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S8:	xxx let N be the factors of M +...
%mor:	v|let&ZERO n:prop|N cop|be det:art|the n|factor-PL prep|of n:prop|M
	+...
%gra:	1|0|ROOT 2|3|SUBJ 3|1|COMP 4|5|DET 5|3|PRED 6|5|NJCT 7|6|POBJ 8|1|PUNCT
*S1:	oh +/.
%mor:	co|oh +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S8:	⌈ instead of M minus one ⌉ +/.
%mor:	adv|instead prep|of n:prop|M prep|minus pro:indef|one +/.
%gra:	1|0|INCROOT 2|1|JCT 3|2|POBJ 4|1|JCT 5|4|POBJ 6|1|PUNCT
*S1:	+, ⌊ so [/] so &y ⌋ you [/] you (.) so M you [/] you replace M
	minus one by (.) the factors of M ?
%mor:	co|so pro:per|you adv|so n:prop|M pro:per|you re#n|place n:prop|M
	n|minus det:num|one prep|by det:art|the n|factor-PL prep|of n:prop|M
	?
%gra:	1|2|COM 2|4|SUBJ 3|4|JCT 4|0|ROOT 5|6|SUBJ 6|4|CONJ 7|8|MOD 8|9|MOD
	9|6|COORD 10|9|JCT 11|12|DET 12|10|POBJ 13|12|NJCT 14|13|POBJ 15|4|PUNCT
*S8:	like +/.
%mor:	prep|like +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	⌈ <oh &s> [?] ⌉ +/.
%mor:	co|oh +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S8:	+, ⌊ yeah ⌋ like it'd be (.) anything divides &-um the factors of M
	(.) minus one yeah .
%mor:	co|yeah co|like pro:per|it~mod|genmod cop|be pro:indef|anything
	v|divide-3S det:art|the n|factor-PL prep|of n:prop|M prep|minus
	det:num|one co|yeah .
%gra:	1|5|COM 2|5|COM 3|5|SUBJ 4|5|AUX 5|7|LINK 6|7|SUBJ 7|0|ROOT 8|9|DET
	9|7|OBJ 10|9|NJCT 11|10|POBJ 12|7|JCT 13|14|QUANT 14|12|POBJ 15|7|PUNCT
*S1:	okay so (.) the product of phi minus one (.) as phi divides (.) M
	this (.) <these are> [/] these are all possible &-uh conjectures (.)
	now (.) let's just +...
%mor:	co|okay conj|so det:art|the n|product prep|of n|phi prep|minus
	pro:indef|one prep|as n|phi v|divide-3S n:prop|M det:dem|this
	pro:dem|these cop|be&PRES adv|all adj|possible n|conjecture-PL
	adv|now v|let~pro:obj|us adv|just +...
%gra:	1|15|COM 2|15|LINK 3|4|DET 4|15|SUBJ 5|4|NJCT 6|5|POBJ 7|4|NJCT
	8|7|POBJ 9|11|COORD 10|11|SUBJ 11|15|CJCT 12|11|OBJ 13|14|DET 14|15|SUBJ
	15|0|ROOT 16|17|JCT 17|18|MOD 18|15|PRED 19|15|JCT 20|15|CPRED 21|20|OBJ
	22|20|JCT 23|15|PUNCT
*S1:	&=erasing_board do some of them (.) some (.) computations &-um +...
%mor:	mod|do pro:indef|some prep|of pro:obj|them qn|some
	n|compute&dv-TION-PL +...
%gra:	1|0|INCROOT 2|1|OM 3|2|NJCT 4|3|POBJ 5|6|QUANT 6|2|OM 7|1|PUNCT
*S1:	&=writes:board so very trivial one where M is two (.) what are the
	relatively prime numbers to two .
%mor:	adv|so adv|very adj|trivial pro:indef|one pro:rel|where n:prop|M
	cop|be&3S det:num|two pro:int|what cop|be&PRES det:art|the
	adv|relative&dadj-LY adj|prime n|number-PL prep|to det:num|two .
%gra:	1|3|JCT 2|3|JCT 3|0|INCROOT 4|3|PRED 5|7|LINK 6|7|SUBJ 7|4|CMOD
	8|10|QUANT 9|10|SUBJ 10|7|PRED 11|14|DET 12|13|JCT 13|14|MOD 14|10|PRED
	15|14|NJCT 16|15|POBJ 17|3|PUNCT
*S3:	one .
%mor:	det:num|one .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	one &=laughs:multiple .
%mor:	det:num|one .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	what's the order of one ?
%mor:	pro:int|what~cop|be&3S det:art|the n|order prep|of det:num|one ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|2|PUNCT
*SS:	one .
%mor:	det:num|one .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	one (.) and it divides two minus one (.) so +...
%mor:	det:num|one coord|and pro:per|it v|divide-3S det:num|two prep|minus
	det:num|one adv|so +...
%gra:	1|4|SUBJ 2|1|CONJ 3|2|COORD 4|0|ROOT 5|4|OBJ 6|4|JCT 7|6|POBJ 8|4|JCT
	9|4|PUNCT
*SUM:	⌈ xxx ⌉ .
*S1:	⌊ it ⌋ divides phi of two as well (.) which is one (.) so (.)
	actually this is a more general (.) conjecture +...
%mor:	pro:per|it v|divide-3S n|phi prep|of det:num|two prep|as n|well
	pro:rel|which cop|be&3S pro:indef|one adv|so adv|actual&dadj-LY
	pro:dem|this cop|be&3S det:art|a qn|more n|general n|conjecture +...
%gra:	1|2|SUBJ 2|0|ROOT 3|2|OBJ 4|3|NJCT 5|7|QUANT 6|7|COORD 7|4|POBJ
	8|9|LINK 9|7|CMOD 10|14|SUBJ 11|12|JCT 12|14|JCT 13|14|SUBJ 14|9|PRED 15|18|DET
	16|17|QUANT 17|18|MOD 18|14|PRED 19|2|PUNCT
*S1:	&=writes:board because it includes the [/] the case when M is a
	prime (.) phi of (.) a prime number is just the prime number minus
	one .
%mor:	conj|because pro:per|it v|include-3S det:art|the n|case conj|when
	n:prop|M cop|be&3S det:art|a n|prime n|phi prep|of det:art|a n|prime
	n|number cop|be&3S adv|just det:art|the n|prime n|number prep|minus
	pro:indef|one .
%gra:	1|3|LINK 2|3|SUBJ 3|16|CJCT 4|5|DET 5|3|OBJ 6|8|LINK 7|8|SUBJ 8|16|CJCT
	9|11|DET 10|11|MOD 11|16|SUBJ 12|11|NJCT 13|15|DET 14|15|MOD 15|12|POBJ
	16|0|ROOT 17|20|JCT 18|20|DET 19|20|MOD 20|16|PRED 21|20|NJCT
	22|21|POBJ 23|16|PUNCT
*S1:	now (.) when M is three (.) again (.) just (.) it's a trivial case
	(.) because (.) what are (.) the (.) relatively prime numbers to
	three ?
%mor:	adv|now conj|when n:prop|M cop|be&3S det:num|three adv|again
	adj|just pro:per|it~cop|be&3S det:art|a adj|trivial n|case
	conj|because pro:int|what cop|be&PRES det:art|the
	adv|relative&dadj-LY adj|prime n|number-PL prep|to det:num|three ?
%gra:	1|9|JCT 2|4|LINK 3|4|SUBJ 4|9|SUBJ 5|4|PRED 6|5|JCT 7|9|JCT 8|9|SUBJ
	9|0|ROOT 10|12|DET 11|12|MOD 12|9|PRED 13|15|LINK 14|15|SUBJ 15|9|CJCT
	16|19|DET 17|18|JCT 18|19|MOD 19|15|PRED 20|19|NJCT 21|20|POBJ 22|9|PUNCT
*SUM:	two one .
%mor:	det:num|two det:num|one .
%gra:	1|2|ENUM 2|0|INCROOT 3|2|PUNCT
*S1:	one and two .
%mor:	det:num|one coord|and det:num|two .
%gra:	1|0|INCROOT 2|1|CONJ 3|2|COORD 4|1|PUNCT
*S1:	one has order (.) one (.) and two has ?
%mor:	det:num|one aux|have&3S n|order pro:indef|one coord|and det:num|two
	v|have&3S ?
%gra:	1|3|SUBJ 2|3|AUX 3|4|SUBJ 4|0|ROOT 5|4|CONJ 6|7|QUANT 7|5|COORD
	8|4|PUNCT
*SUM:	two .
%mor:	det:num|two .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	order two (.) because (.) two is congruent to negative one +...
%mor:	v|order det:num|two conj|because det:num|two cop|be&3S
	adj|congruent prep|to n|negative pro:indef|one +...
%gra:	1|0|ROOT 2|1|OBJ 3|1|JCT 4|5|QUANT 5|3|CPOBJ 6|5|PRED 7|5|JCT 8|7|POBJ
	9|5|PRED 10|1|PUNCT
*S1:	&=writes:board now when M is four (.) the numbers relatively prime
	to four are ?
%mor:	adv|now conj|when n:prop|M cop|be&3S det:num|four det:art|the
	n|number-PL adv|relative&dadj-LY adj|prime prep|to det:num|four
	cop|be&PRES ?
%gra:	1|0|INCROOT 2|4|LINK 3|4|SUBJ 4|1|CPOBJ 5|7|QUANT 6|7|DET 7|4|PRED
	8|7|NJCT 9|7|NJCT 10|9|JCT 11|12|QUANT 12|10|POBJ 13|1|PUNCT
*SUM:	one and three .
%mor:	det:num|one coord|and det:num|three .
%gra:	1|0|INCROOT 2|1|CONJ 3|2|COORD 4|1|PUNCT
*S1:	one and three &=pause_while_writing &-uh and they have orders ?
%mor:	det:num|one coord|and det:num|three coord|and pro:sub|they v|have
	n|order-PL ?
%gra:	1|0|INCROOT 2|1|CONJ 3|2|COORD 4|6|LINK 5|6|SUBJ 6|1|CJCT 7|6|OBJ
	8|1|PUNCT
*SUM:	one and two .
%mor:	det:num|one coord|and det:num|two .
%gra:	1|0|INCROOT 2|1|CONJ 3|2|COORD 4|1|PUNCT
*S1:	one and two (.) so &=pause_while_writing will not work (.) because
	(.) the only prime that divides M is two (.) and this product will
	be (.) just one .
%mor:	det:num|one coord|and det:num|two adv|so mod|will neg|not v|work
	conj|because det:art|the qn|only adj|prime adv|that v|divide-3S
	n:prop|M cop|be&3S det:num|two coord|and det:dem|this n|product
	mod|will cop|be adj|just pro:indef|one .
%gra:	1|7|SUBJ 2|1|CONJ 3|2|COORD 4|7|JCT 5|7|AUX 6|5|NEG 7|0|ROOT 8|7|JCT
	9|11|DET 10|11|QUANT 11|8|POBJ 12|13|JCT 13|11|CMOD 14|15|SUBJ 15|13|COMP
	16|21|JCT 17|16|CONJ 18|19|DET 19|17|COORD 20|21|AUX 21|15|PRED
	22|23|MOD 23|21|PRED 24|7|PUNCT
*S1:	two minus one is one .
%mor:	det:num|two prep|minus pro:indef|one cop|be&3S pro:indef|one .
%gra:	1|4|SUBJ 2|1|JCT 3|2|POBJ 4|0|ROOT 5|4|PRED 6|4|PUNCT
*S1:	so this one [?] will [/] will not work (.) how about the phi of M
	formula ?
%mor:	adv|so pro:dem|this pro:indef|one mod|will neg|not v|work
	pro:int|how adv|about det:art|the n|phi prep|of n:prop|M n|formula ?
%gra:	1|2|JCT 2|6|LINK 3|6|SUBJ 4|6|AUX 5|4|NEG 6|0|ROOT 7|10|LINK 8|10|JCT
	9|10|DET 10|6|OBJ 11|10|NJCT 12|13|MOD 13|11|POBJ 14|6|PUNCT
*S3:	phi of M is two .
%mor:	n|phi prep|of n:prop|M cop|be&3S det:num|two .
%gra:	1|4|SUBJ 2|1|NJCT 3|2|POBJ 4|0|ROOT 5|4|PRED 6|4|PUNCT
*S1:	phi of four is two +...
%mor:	n|phi prep|of det:num|four aux|be&3S det:num|two +...
%gra:	1|0|INCROOT 2|1|NJCT 3|5|SUBJ 4|5|AUX 5|2|POBJ 6|1|PUNCT
*S1:	&=writes:board so that [/] that (.) still works .
%mor:	adv|so adv|that adv|still n|work-PL .
%gra:	1|2|JCT 2|4|JCT 3|4|JCT 4|0|INCROOT 5|4|PUNCT
*S1:	actually phi of M (.) is very &cl close &-uh to being this product
	(.) if [/] if &y you recall what the formula for phi of M is (.) so
	this is not (.) that far (.) from [/] from the truth (.) but +...
%mor:	adv|actual&dadj-LY n|phi prep|of n:prop|M cop|be&3S adv|very
	adj|close prep|to n:gerund|be-PRESP det:dem|this n|product conj|if
	pro:per|you v|recall pro:int|what det:art|the n|formula prep|for
	n|phi prep|of n:prop|M cop|be&3S adv|so pro:dem|this cop|be&3S
	neg|not adv|that adv|far prep|from det:art|the n|truth conj|but +...
%gra:	1|2|JCT 2|5|SUBJ 3|2|NJCT 4|3|POBJ 5|0|ROOT 6|7|JCT 7|5|PRED 8|7|JCT
	9|8|POBJ 10|11|DET 11|9|OBJ 12|14|LINK 13|14|SUBJ 14|5|CJCT 15|22|LINK
	16|17|DET 17|22|SUBJ 18|17|NJCT 19|18|POBJ 20|19|NJCT 21|20|POBJ 22|14|COMP
	23|24|JCT 24|25|SUBJ 25|22|PRED 26|25|NEG 27|28|JCT 28|25|PRED
	29|28|JCT 30|31|DET 31|29|POBJ 32|14|OM 33|5|PUNCT
*S1:	but you have to modify this [/] this product formula (.) because
	(.) the actual truth is that it always divides (.) it always divides
	phi of M .
%mor:	conj|but pro:per|you v|have inf|to v|modify det:dem|this n|product
	n|formula conj|because det:art|the adj|actual n|truth cop|be&3S
	comp|that pro:per|it adv|always v|divide-3S pro:per|it adv|always
	v|divide-3S n|phi prep|of n:prop|M .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|5|INF 5|3|COMP 6|8|DET 7|8|MOD 8|5|OBJ
	9|13|LINK 10|12|DET 11|12|MOD 12|13|SUBJ 13|3|CJCT 14|17|LINK 15|17|SUBJ
	16|17|JCT 17|13|CPRED 18|17|OBJ 19|20|JCT 20|17|COMP 21|20|OBJ 22|21|NJCT
	23|22|POBJ 24|3|PUNCT
*S1:	and <you can> [/] you can just check it with (.) let's say M equals
	eight &-um the numbers (.) that we have to check are one three five
	and seven (.) what are the orders ?
%mor:	coord|and pro:per|you mod|can adj|just n|check pro:per|it prep|with
	v|let~pro:obj|us v|say n:prop|M n|equal-PL det:num|eight det:art|the
	n|number-PL pro:rel|that pro:sub|we v|have prep|to n|check
	cop|be&PRES det:num|one det:num|three det:num|five coord|and
	det:num|seven pro:int|what cop|be&PRES det:art|the n|order-PL ?
%gra:	1|5|LINK 2|5|SUBJ 3|5|AUX 4|5|MOD 5|0|INCROOT 6|5|OBJ 7|5|JCT 8|7|POBJ
	9|10|SUBJ 10|8|COMP 11|12|MOD 12|10|OBJ 13|15|QUANT 14|15|DET 15|21|SUBJ
	16|18|LINK 17|18|SUBJ 18|15|CMOD 19|18|JCT 20|19|POBJ 21|12|CMOD
	22|21|PRED 23|24|DATE 24|28|JCT 25|24|CONJ 26|25|COORD 27|28|SUBJ 28|22|CMOD
	29|30|DET 30|28|PRED 31|5|PUNCT
*S1:	(0.5) well one has order one (.) what's the order of three ?
%mor:	co|well pro:indef|one aux|have&3S n|order pro:indef|one
	pro:int|what~cop|be&3S det:art|the n|order prep|of det:num|three ?
%gra:	1|4|COM 2|4|SUBJ 3|4|AUX 4|0|INCROOT 5|4|PRED 6|7|SUBJ 7|5|CMOD 8|9|DET
	9|7|PRED 10|9|NJCT 11|10|POBJ 12|4|PUNCT
*SUM:	&-um two .
%mor:	det:num|two .
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	two .
%mor:	det:num|two .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	two .
%mor:	det:num|two .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	what's the order of five ?
%mor:	pro:int|what~cop|be&3S det:art|the n|order prep|of det:num|five ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|2|PUNCT
*SUM:	two .
%mor:	det:num|two .
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	three .
%mor:	det:num|three .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	it's still two .
%mor:	pro:per|it~cop|be&3S adv|still det:num|two .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|2|PRED 5|2|PUNCT
*S1:	and what's the order of seven ?
%mor:	coord|and pro:int|what~cop|be&3S det:art|the n|order prep|of
	det:num|seven ?
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|PRED 6|5|NJCT 7|6|POBJ 8|3|PUNCT
*SUM:	just two .
%mor:	adv|just det:num|two .
%gra:	1|2|JCT 2|0|INCROOT 3|2|PUNCT
*SUM:	two xxx .
%mor:	det:num|two .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	just two because it's negative one .
%mor:	adv|just det:num|two conj|because pro:per|it~cop|be&3S adj|negative
	pro:indef|one .
%gra:	1|2|JCT 2|3|QUANT 3|5|LINK 4|5|SUBJ 5|0|ROOT 6|7|MOD 7|5|PRED 8|5|PUNCT
*S1:	so here (.) all the orders &=writes:board one two [/] two and two
	(.) still divide phi of eight (.) which was four (.) but +...
%mor:	co|so pro:exist|here qn|all det:art|the n|order-PL det:num|one
	det:num|two coord|and det:num|two adv|still v|divide n|phi prep|of
	det:num|eight pro:rel|which cop|be&PAST&13S det:num|four conj|but
	+...
%gra:	1|2|COM 2|0|ROOT 3|5|QUANT 4|5|DET 5|2|OBJ 6|7|QUANT 7|11|QUANT
	8|7|CONJ 9|8|COORD 10|7|JCT 11|5|CMOD 12|11|OBJ 13|12|NJCT 14|13|POBJ
	15|16|LINK 16|14|CMOD 17|16|PRED 18|16|OM 19|2|PUNCT
*S1:	now it +//.
%mor:	adv|now pro:per|it +//.
%gra:	1|2|JCT 2|0|INCROOT 3|2|PUNCT
*S1:	here's +//.
%mor:	pro:exist|here~cop|be&3S +//.
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PUNCT
*S1:	<there's a> [/] there's a change here (.) because four (.) does not
	appear (.) as an order .
%mor:	pro:exist|there~cop|be&3S det:art|a n|change adv|here conj|because
	det:num|four mod|do&3S neg|not v|appear conj|as det:art|a n|order .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|10|LINK 7|10|SUBJ
	8|10|AUX 9|8|NEG 10|2|CJCT 11|13|COORD 12|13|DET 13|10|OBJ 14|2|PUNCT
*S1:	so even though (.) the orders will divide four (.) but we (.) but
	four itself is not (.) an order .
%mor:	adv|so adv|even adv|though det:art|the n|order-PL mod|will v|divide
	det:num|four conj|but pro:sub|we conj|but det:num|four
	pro:refl|itself cop|be&3S neg|not det:art|a n|order .
%gra:	1|2|JCT 2|3|JCT 3|7|LINK 4|5|DET 5|7|SUBJ 6|7|AUX 7|0|ROOT 8|7|OBJ
	9|7|CONJ 10|9|COORD 11|10|CONJ 12|13|QUANT 13|11|COORD 14|11|COORD 15|14|NEG
	16|17|DET 17|14|PRED 18|7|PUNCT
*S1:	now <let me make> [/] let me make a [/] a definition about &-uh
	this phenomenon +...
%mor:	adv|now v|let&ZERO pro:obj|me v|make det:art|a n|definition
	prep|about det:dem|this n|phenomenon +...
%gra:	1|2|JCT 2|0|ROOT 3|4|SUBJ 4|2|COMP 5|6|DET 6|4|OBJ 7|6|NJCT 8|9|DET
	9|7|POBJ 10|2|PUNCT
*S1:	A will be called a primitive element &=pause_while_writing if (.)
	its order is phi of M .
%mor:	n:prop|A mod|will aux|be part|call-PASTP det:art|a adj|primitive
	n|element conj|if det:poss|its n|order cop|be&3S n|phi prep|of
	n:prop|M .
%gra:	1|4|SUBJ 2|4|AUX 3|4|AUX 4|0|ROOT 5|7|DET 6|7|MOD 7|4|OBJ 8|11|LINK
	9|10|DET 10|11|SUBJ 11|4|CJCT 12|11|PRED 13|12|NJCT 14|13|POBJ 15|4|PUNCT
*S1:	&=pause_while_writing if you fix the modulus (.) (be)cause (.) A
	could be a primitive element (.) with respect to one modulus and (.)
	not a primitive element (.) with respect to another one .
%mor:	conj|if pro:per|you v|fix det:art|the n|modulus conj|because
	n:prop|A mod|could cop|be det:art|a adj|primitive n|element
	prep|with n|respect prep|to det:num|one n|modulus coord|and neg|not
	det:art|a adj|primitive n|element prep|with n|respect prep|to
	qn|another pro:indef|one .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|OBJ 6|9|LINK 7|9|SUBJ 8|9|AUX
	9|3|CJCT 10|12|DET 11|12|MOD 12|9|PRED 13|12|NJCT 14|13|POBJ 15|14|NJCT
	16|17|QUANT 17|15|POBJ 18|3|CONJ 19|22|NEG 20|22|DET 21|22|MOD 22|18|COORD
	23|22|NJCT 24|23|POBJ 25|22|JCT 26|27|QUANT 27|25|POBJ 28|3|PUNCT
*S1:	so A is a primitive element mod [: modulo] M if the order of A (.)
	&=writes:board is (.) phi of M +...
%mor:	co|so n:prop|A cop|be&3S det:art|a adj|primitive n|element
	prep|modulo n:prop|M comp|if det:art|the n|order prep|of n:prop|A
	cop|be&3S n|phi prep|of n:prop|M +...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|PRED 7|6|NJCT 8|7|POBJ
	9|14|LINK 10|11|DET 11|14|SUBJ 12|11|NJCT 13|12|POBJ 14|8|CMOD 15|14|PRED
	16|15|NJCT 17|16|POBJ 18|3|PUNCT
*S1:	so mod [: modulo] eleven (.) we have plenty of primitive elements .
%mor:	adv|so prep|modulo det:num|eleven pro:sub|we v|have adv|plenty
	prep|of n|primitive n|element-PL .
%gra:	1|5|JCT 2|1|JCT 3|2|POBJ 4|5|SUBJ 5|0|ROOT 6|5|JCT 7|6|JCT 8|9|MOD
	9|7|POBJ 10|5|PUNCT
*S1:	we have two (.) and +...
%mor:	pro:sub|we v|have det:num|two coord|and +...
%gra:	1|2|SUBJ 2|0|ROOT 3|2|OBJ 4|3|CONJ 5|2|PUNCT
*S1:	six (.) seven (.) eight (.) they are all primitive elements .
%mor:	det:num|six det:num|seven det:num|eight pro:sub|they cop|be&PRES
	qn|all n|primitive n|element-PL .
%gra:	1|2|QUANT 2|3|DATE 3|5|LINK 4|5|SUBJ 5|0|ROOT 6|7|QUANT 7|8|MOD
	8|5|PRED 9|5|PUNCT
*S1:	&=pause_while_writing what numbers +...
%mor:	det:int|what n|number-PL +...
%gra:	1|2|DET 2|0|INCROOT 3|2|PUNCT
*S1:	are [/] are primitive roots .
%mor:	cop|be&PRES adj|primitive n|root-PL .
%gra:	1|0|ROOT 2|3|MOD 3|1|PRED 4|1|PUNCT
*S1:	what other (.) what numbers other than two .
%mor:	pro:int|what qn|other det:int|what n|number-PL pro:indef|other
	prep|than det:num|two .
%gra:	1|4|LINK 2|4|QUANT 3|4|DET 4|0|INCROOT 5|4|POSTMOD 6|5|NJCT 7|6|POBJ
	8|4|PUNCT
*S1:	&=pause_while_writing so two itself is a primitive element .
%mor:	adv|so det:num|two pro:refl|itself cop|be&3S det:art|a
	adj|primitive n|element .
%gra:	1|2|JCT 2|3|QUANT 3|4|SUBJ 4|0|ROOT 5|7|DET 6|7|MOD 7|4|PRED 8|4|PUNCT
*S1:	what was the order of four +..?
%mor:	pro:int|what cop|be&PAST&13S det:art|the n|order prep|of
	det:num|four +..?
%gra:	1|2|LINK 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|2|PUNCT
*SU3:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so it's not a primitive element .
%mor:	adv|so pro:per|it~cop|be&3S neg|not det:art|a adj|primitive
	n|element .
%gra:	1|3|JCT 2|3|SUBJ 3|0|ROOT 4|3|NEG 5|7|DET 6|7|MOD 7|3|PRED 8|3|PUNCT
*S1:	what was the order of eight ?
%mor:	pro:int|what cop|be&PAST&13S det:art|the n|order prep|of
	det:num|eight ?
%gra:	1|2|LINK 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|2|PUNCT
*SU3:	ten .
%mor:	det:num|ten .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so it's (.) a primitive element .
%mor:	adv|so pro:per|it~cop|be&3S det:art|a adj|primitive n|element .
%gra:	1|3|JCT 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|PRED 7|3|PUNCT
*S1:	what's the order of five ?
%mor:	pro:int|what~cop|be&3S det:art|the n|order prep|of det:num|five ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|2|PUNCT
*SU3:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	it's not a primitive element .
%mor:	pro:per|it~cop|be&3S neg|not det:art|a adj|primitive n|element .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|NEG 4|6|DET 5|6|MOD 6|2|PRED 7|2|PUNCT
*S1:	the order of (.) ten ?
%mor:	det:art|the n|order prep|of det:num|ten ?
%gra:	1|2|DET 2|0|INCROOT 3|2|NJCT 4|3|POBJ 5|2|PUNCT
*SUM:	ten .
%mor:	det:num|ten .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	it's not a primitive element .
%mor:	pro:per|it~cop|be&3S neg|not det:art|a adj|primitive n|element .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|NEG 4|6|DET 5|6|MOD 6|2|PRED 7|2|PUNCT
*S1:	the order of nine ?
%mor:	det:art|the n|order prep|of det:num|nine ?
%gra:	1|2|DET 2|0|INCROOT 3|2|NJCT 4|3|POBJ 5|2|PUNCT
*SU3:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	the order of seven ?
%mor:	det:art|the n|order prep|of det:num|seven ?
%gra:	1|2|DET 2|0|INCROOT 3|2|NJCT 4|3|POBJ 5|2|PUNCT
*SU3:	ten .
%mor:	det:num|ten .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	the order of &-uh +...
%mor:	det:art|the n|order prep|of +...
%gra:	1|2|DET 2|0|INCROOT 3|2|NJCT 4|2|PUNCT
*S1:	three ?
%mor:	det:num|three ?
%gra:	1|0|INCROOT 2|1|PUNCT
*SU3:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	and the order of six ?
%mor:	coord|and det:art|the n|order prep|of det:num|six ?
%gra:	1|3|LINK 2|3|DET 3|0|INCROOT 4|3|NJCT 5|4|POBJ 6|3|PUNCT
*SU3:	ten .
%mor:	det:num|ten .
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	ten +...
%mor:	det:num|ten +...
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so (.) two (.) eight (.) seven (.) and six (.) are the primitive
	elements .
%mor:	adv|so det:num|two det:num|eight det:num|seven coord|and
	det:num|six cop|be&PRES det:art|the n|primitive n|element-PL .
%gra:	1|2|JCT 2|4|QUANT 3|4|DATE 4|7|SUBJ 5|4|CONJ 6|5|COORD 7|0|ROOT
	8|10|DET 9|10|MOD 10|7|PRED 11|7|PUNCT
*S1:	&-um I [/] I +//.
%mor:	pro:sub|I +//.
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	my claim is (.) that (.) you could figure this one out from the
	indices .
%mor:	det:poss|my n|claim cop|be&3S comp|that pro:per|you mod|could
	v|figure det:dem|this pro:indef|one adv|out prep|from det:art|the
	in#n|die&PL-PL .
%gra:	1|2|DET 2|3|SUBJ 3|0|ROOT 4|7|LINK 5|7|SUBJ 6|7|AUX 7|3|CPRED 8|9|DET
	9|7|OBJ 10|7|JCT 11|7|JCT 12|13|DET 13|11|POBJ 14|3|PUNCT
*S1:	so two (.) is two raised to the first power (.) eight is two raised
	to the third power (.) seven is two raised to the seventh power (.)
	and six (.) is two raised to the ninth power .
%mor:	adv|so det:num|two aux|be&3S det:num|two v|raise-PAST prep|to
	det:art|the adj|first n|power det:num|eight aux|be&3S det:num|two
	v|raise-PAST prep|to det:art|the n|third n|power det:num|seven
	aux|be&3S det:num|two none|raise prep|to det:art|the adj|seventh
	n|power coord|and det:num|six aux|be&3S det:num|two v|raise-PAST
	prep|to det:art|the adj|ninth n|power .
%gra:	1|2|JCT 2|5|SUBJ 3|5|AUX 4|5|QUANT 5|0|ROOT 6|5|JCT 7|9|DET 8|9|MOD
	9|6|POBJ 10|13|SUBJ 11|13|AUX 12|13|SUBJ 13|9|CMOD 14|13|JCT 15|17|DET
	16|17|MOD 17|14|POBJ 18|20|SUBJ 19|20|AUX 20|21|QUANT 21|17|CMOD 22|30|JCT
	23|25|DET 24|25|MOD 25|30|SUBJ 26|25|CONJ 27|26|COORD 28|30|AUX
	29|30|QUANT 30|21|CJCT 31|30|JCT 32|34|DET 33|34|MOD 34|31|POBJ 35|5|PUNCT
*S1:	so from the indices &-um what are those indices that [/] that enter
	here ?
%mor:	adv|so prep|from det:art|the in#n|die&PL-PL pro:int|what
	cop|be&PRES det:dem|those in#v|dice-3S comp|that v|enter adv|here ?
%gra:	1|2|JCT 2|0|INCROOT 3|4|DET 4|2|POBJ 5|6|SUBJ 6|4|CMOD 7|8|DET 8|6|PRED
	9|10|LINK 10|8|CMOD 11|10|JCT 12|2|PUNCT
*SUM:	they're the numbers that are relatively prime (.) <to ten> [?] .
%mor:	pro:sub|they~cop|be&PRES det:art|the n|number-PL pro:rel|that
	cop|be&PRES adv|relative&dadj-LY adj|prime prep|to det:num|ten .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|6|LINK 6|4|CMOD 7|8|JCT 8|6|PRED
	9|8|JCT 10|9|POBJ 11|2|PUNCT
*S1:	yes (.) so (.) one (.) three (.) seven (.) and nine (.) these are
	the numbers &=pause_while_writing that are relatively prime (.) to
	ten .
%mor:	co|yes adv|so det:num|one det:num|three det:num|seven coord|and
	det:num|nine pro:dem|these cop|be&PRES det:art|the n|number-PL
	pro:rel|that cop|be&PRES adv|relative&dadj-LY adj|prime prep|to
	det:num|ten .
%gra:	1|3|COM 2|3|JCT 3|5|DATE 4|5|DATE 5|8|QUANT 6|5|CONJ 7|6|COORD 8|9|SUBJ
	9|0|ROOT 10|11|DET 11|9|PRED 12|13|LINK 13|11|CMOD 14|15|JCT 15|13|PRED
	16|15|JCT 17|16|POBJ 18|9|PUNCT
*S1:	(0.16) and [/] and those are the only (.) those are the only &-uh
	possible choices (.) because if you pick an index (.) which is not
	(.) relatively prime to ten (.) like (.) let's say four
	&=pause_while_writing then it cannot be (.) that its order is still
	ten .
%mor:	coord|and pro:dem|those cop|be&PRES det:art|the qn|only
	pro:dem|those cop|be&PRES det:art|the qn|only adj|possible
	n|choice-PL conj|because conj|if pro:per|you v|pick det:art|a
	n|index pro:rel|which cop|be&3S neg|not adv|relative&dadj-LY
	adj|prime prep|to det:num|ten co|like v|let~pro:obj|us v|say
	det:num|four adv:tem|then pro:per|it mod|can~neg|not cop|be
	comp|that det:poss|its n|order cop|be&3S adv|still det:num|ten .
%gra:	1|3|LINK 2|3|SUBJ 3|7|LINK 4|6|DET 5|6|QUANT 6|7|SUBJ 7|0|ROOT 8|11|DET
	9|11|QUANT 10|11|MOD 11|7|PRED 12|7|JCT 13|15|LINK 14|15|SUBJ
	15|12|CPOBJ 16|17|DET 17|15|OBJ 18|19|LINK 19|17|CMOD 20|19|NEG 21|22|JCT
	22|19|PRED 23|22|JCT 24|25|QUANT 25|26|COM 26|23|CPOBJ 27|28|SUBJ 28|26|COMP
	29|28|OBJ 30|34|JCT 31|34|SUBJ 32|34|AUX 33|32|NEG 34|28|COMP 35|38|LINK
	36|37|DET 37|38|SUBJ 38|34|PRED 39|38|JCT 40|38|PRED 41|7|PUNCT
*S1:	why ?
%mor:	pro:rel|why ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	because two &=pause_while_writing (.) eleven .
%mor:	conj|because det:num|two det:num|eleven .
%gra:	1|3|LINK 2|3|QUANT 3|0|INCROOT 4|3|PUNCT
*S1:	so this number (.) raised order [?] to the fifth power (.) is
	congruent to one mod [: modulo] eleven .
%mor:	adv|so pro:dem|this n|number v|raise-PAST n|order prep|to
	det:art|the adj|fifth n|power cop|be&3S adj|congruent prep|to
	pro:indef|one prep|modulo det:num|eleven .
%gra:	1|2|JCT 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|4|OBJ 6|10|JCT 7|9|DET 8|9|MOD
	9|10|SUBJ 10|4|CJCT 11|10|PRED 12|11|JCT 13|12|POBJ 14|13|NJCT 15|14|POBJ
	16|4|PUNCT
*S1:	(0.16) &=erasing_board okay can you tell from this table (.) what
	are those numbers &-uh that are congruent to a square (.) modulo
	eleven ?
%mor:	co|okay mod|can pro:per|you v|tell prep|from det:dem|this n|table
	pro:int|what cop|be&PRES det:dem|those n|number-PL pro:rel|that
	cop|be&PRES adj|congruent prep|to det:art|a n|square prep|modulo
	det:num|eleven ?
%gra:	1|4|COM 2|4|AUX 3|4|SUBJ 4|0|ROOT 5|4|JCT 6|7|DET 7|5|POBJ 8|9|LINK
	9|4|CJCT 10|11|DET 11|9|PRED 12|13|LINK 13|11|CMOD 14|13|PRED 15|13|JCT
	16|17|DET 17|15|POBJ 18|17|NJCT 19|18|POBJ 20|4|PUNCT
*S1:	(0.6) four ?
%mor:	det:num|four ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	is four congruent to a square mod [: modulo] eleven +..?
%mor:	aux|be&3S det:num|four adj|congruent prep|to det:art|a n|square
	prep|modulo det:num|eleven +..?
%gra:	1|0|INCROOT 2|3|QUANT 3|1|PRED 4|3|JCT 5|6|DET 6|4|POBJ 7|6|NJCT
	8|7|POBJ 9|1|PUNCT
*SUM:	yes ?
%mor:	co|yes ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	yes (.) it's congruent to two squared .
%mor:	co|yes pro:per|it~cop|be&3S adj|congruent prep|to det:num|two
	part|square-PASTP .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|4|JCT 6|7|QUANT 7|5|POBJ 8|3|PUNCT
*S1:	&=laughs:multiple .
*SUM:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	six .
%mor:	det:num|six .
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	five .
%mor:	det:num|five .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	why should five be congruent to a square ?
%mor:	pro:int|why mod|should det:num|five cop|be adj|congruent prep|to
	det:art|a n|square ?
%gra:	1|4|LINK 2|4|AUX 3|4|QUANT 4|0|ROOT 5|4|PRED 6|5|JCT 7|8|DET 8|6|POBJ
	9|4|PUNCT
*S3:	(be)cause four is even .
%mor:	conj|because det:num|four cop|be&3S adv|even .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|3|PUNCT
*S1:	yeah .
%mor:	co|yeah .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so this is two to the fourth power (.) which is two squared [/]
	squared (.) so this is a square (.) same goes for six (.) eight &-uh
	so (.) what corresponds to them is nine and three .
%mor:	adv|so pro:dem|this cop|be&3S det:num|two prep|to det:art|the
	n|fourth n|power pro:rel|which cop|be&3S det:num|two
	part|square-PASTP adv|so pro:dem|this cop|be&3S det:art|a n|square
	pro:indef|same v|go-3S prep|for det:num|six det:num|eight adv|so
	pro:int|what v|correspond-3S prep|to pro:obj|them cop|be&3S
	det:num|nine coord|and det:num|three .
%gra:	1|2|JCT 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|4|JCT 6|8|DET 7|8|MOD 8|5|POBJ
	9|10|LINK 10|8|CMOD 11|12|QUANT 12|10|CPRED 13|14|JCT 14|15|SUBJ 15|12|COMP
	16|17|DET 17|15|PRED 18|19|SUBJ 19|17|CMOD 20|19|JCT 21|22|QUANT
	22|20|POBJ 23|25|JCT 24|25|SUBJ 25|19|CJCT 26|25|JCT 27|26|POBJ 28|25|COMP
	29|28|PRED 30|29|CONJ 31|30|COORD 32|3|PUNCT
*S1:	so six is an even power (.) eight is an even power +...
%mor:	adv|so det:num|six cop|be&3S det:art|a adj|even n|power
	det:num|eight cop|be&3S det:art|a adj|even n|power +...
%gra:	1|2|JCT 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|PRED 7|8|QUANT 8|6|CMOD
	9|11|DET 10|11|MOD 11|8|PRED 12|3|PUNCT
*S1:	&-uh nine is a square (.) and three is a square (.) and of_course
	one is a square .
%mor:	det:num|nine cop|be&3S det:art|a n|square coord|and det:num|three
	cop|be&3S det:art|a n|square coord|and co|of_course pro:indef|one
	cop|be&3S det:art|a n|square .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|7|LINK 6|7|SUBJ 7|4|CMOD 8|9|DET
	9|7|PRED 10|13|LINK 11|13|COM 12|13|SUBJ 13|9|CMOD 14|15|DET 15|13|PRED
	16|2|PUNCT
*S1:	now what about the [/] the odd exponents (.) of can two be a square
	?
%mor:	adv|now pro:int|what prep|about det:art|the adj|odd n|exponent-PL
	prep|of n|can det:num|two cop|be det:art|a n|square ?
%gra:	1|10|JCT 2|10|LINK 3|10|JCT 4|6|DET 5|6|MOD 6|3|POBJ 7|6|NJCT 8|7|POBJ
	9|10|QUANT 10|0|ROOT 11|12|DET 12|10|PRED 13|10|PUNCT
*S1:	(0.5) why not ?
%mor:	pro:int|why neg|not ?
%gra:	1|0|INCROOT 2|1|NEG 3|1|PUNCT
*S1:	(0.4) why cannot two be a square (.) modulo eleven ?
%mor:	pro:int|why mod|can~neg|not det:num|two cop|be det:art|a n|square
	prep|modulo det:num|eleven ?
%gra:	1|5|LINK 2|4|AUX 3|2|NEG 4|5|QUANT 5|0|ROOT 6|7|DET 7|5|PRED 8|7|NJCT
	9|8|POBJ 10|5|PUNCT
*S10:	(be)cause it's +...
%mor:	conj|because pro:per|it~cop|be&3S +...
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PUNCT
*S10:	<beyond two> [?] if +//.
%mor:	prep|beyond det:num|two conj|if +//.
%gra:	1|0|INCROOT 2|3|QUANT 3|1|POBJ 4|1|PUNCT
*S10:	xxx it's gonna be odd [?] .
%mor:	pro:per|it~aux|be&3S part|go-PRESP~inf|to cop|be adj|odd .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|INF 5|3|COMP 6|5|PRED 7|3|PUNCT
*S8:	if A was the square root of two (.) then its order would be (.)
	twice that of two ?
%mor:	conj|if n:prop|A cop|be&PAST&13S det:art|the adj|square n|root
	prep|of det:num|two adv:tem|then det:poss|its n|order mod|will&COND
	cop|be adv|twice comp|that prep|of det:num|two ?
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|PRED 7|6|NJCT 8|9|QUANT
	9|13|JCT 10|11|DET 11|13|SUBJ 12|13|AUX 13|7|POBJ 14|3|JCT 15|14|POBJ
	16|15|NJCT 17|16|POBJ 18|3|PUNCT
*S10:	yeah if it +//.
%mor:	co|yeah conj|if pro:per|it +//.
%gra:	1|3|COM 2|3|LINK 3|0|INCROOT 4|3|PUNCT
*S10:	what would be the order of [/] of (.) let's say two is the square
	of something (.) A .
%mor:	pro:int|what mod|will&COND cop|be det:art|the n|order prep|of
	v|let~pro:obj|us v|say det:num|two cop|be&3S det:art|the n|square
	prep|of pro:indef|something n:prop|A .
%gra:	1|3|LINK 2|3|AUX 3|0|ROOT 4|5|DET 5|3|PRED 6|5|NJCT 7|6|POBJ 8|9|SUBJ
	9|5|CMOD 10|11|SUBJ 11|9|COMP 12|13|DET 13|11|PRED 14|13|NJCT 15|14|POBJ
	16|13|APP 17|3|PUNCT
*S10:	what would (.) the order of A be ?
%mor:	pro:int|what mod|will&COND det:art|the n|order prep|of n:prop|A
	cop|be ?
%gra:	1|4|OBJ 2|4|AUX 3|4|DET 4|0|INCROOT 5|4|NJCT 6|7|SUBJ 7|5|POBJ
	8|4|PUNCT
*S8:	twenty .
%mor:	det:num|twenty .
%gra:	1|0|INCROOT 2|1|PUNCT
*S10:	twenty .
%mor:	det:num|twenty .
%gra:	1|0|INCROOT 2|1|PUNCT
*S10:	can the order of A (.) <can any number> [/] can any number have (.)
	an order which is twenty (.) mod [: modulo] eleven ?
%mor:	mod|can det:art|the n|order prep|of n:prop|A n|can qn|any n|number
	v|have det:art|a n|order pro:rel|which cop|be&3S det:num|twenty
	prep|modulo det:num|eleven ?
%gra:	1|9|AUX 2|3|DET 3|9|SUBJ 4|3|NJCT 5|6|MOD 6|4|POBJ 7|8|QUANT 8|3|APP
	9|0|ROOT 10|11|DET 11|9|OBJ 12|13|LINK 13|11|CMOD 14|13|PRED 15|14|JCT
	16|15|POBJ 17|9|PUNCT
*S10:	no the order must be less than or equal to ten (.) by Fermat's
	theorem .
%mor:	co|no det:art|the n|order mod|must cop|be adj|less prep|than
	coord|or adj|equal prep|to det:num|ten prep|by adj|Fermat&dn-POSS
	n|theorem .
%gra:	1|5|COM 2|3|DET 3|5|SUBJ 4|5|AUX 5|0|ROOT 6|5|PRED 7|6|JCT 8|7|CONJ
	9|8|COORD 10|9|JCT 11|10|POBJ 12|11|JCT 13|14|MOD 14|12|POBJ 15|5|PUNCT
*S10:	so two cannot be (.) two cannot be a square .
%mor:	adv|so det:num|two mod|can~neg|not cop|be det:num|two
	mod|can~neg|not cop|be det:art|a n|square .
%gra:	1|2|JCT 2|5|SUBJ 3|5|AUX 4|3|NEG 5|9|SUBJ 6|7|QUANT 7|9|AUX 8|7|NEG
	9|0|ROOT 10|11|DET 11|9|PRED 12|9|PUNCT
*S10:	now how can you tell from two not being a square (.) that you can
	cross out all the odd exponents +..?
%mor:	adv|now pro:int|how mod|can pro:per|you v|tell prep|from
	det:num|two neg|not n:gerund|be-PRESP det:art|a n|square
	pro:rel|that pro:per|you mod|can v|cross adv|out qn|all det:art|the
	adj|odd n|exponent-PL +..?
%gra:	1|5|JCT 2|5|JCT 3|5|AUX 4|5|SUBJ 5|0|ROOT 6|5|JCT 7|6|POBJ 8|9|NEG
	9|5|CJCT 10|11|DET 11|9|PRED 12|15|LINK 13|15|SUBJ 14|15|AUX 15|11|CMOD
	16|15|JCT 17|20|QUANT 18|20|DET 19|20|MOD 20|15|JCT 21|5|PUNCT
*S10:	so how can you know that (.) eight cannot be a square then ?
%mor:	adv|so pro:int|how mod|can pro:per|you v|know adv|that
	det:num|eight mod|can~neg|not cop|be det:art|a n|square adv:tem|then
	?
%gra:	1|5|JCT 2|5|JCT 3|5|AUX 4|5|SUBJ 5|0|ROOT 6|5|JCT 7|10|SUBJ 8|10|AUX
	9|8|NEG 10|5|COMP 11|12|DET 12|10|PRED 13|12|NJCT 14|5|PUNCT
*S10:	(0.11) well (.) what is +...
%mor:	co|well pro:int|what cop|be&3S +...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|PUNCT
*S10:	&=writes:board eight is two (.) cubed (.) which is two (.) to the
	two (.) times two (.) this is a square &=gesturing_to_board if eight
	was a square (.) mod [: modulo] eleven (.) then two (.) would turn
	out to be a square mod [: modulo] eleven .
%mor:	det:num|eight aux|be&3S det:num|two part|cube-PASTP pro:rel|which
	cop|be&3S det:num|two prep|to det:art|the det:num|two n|time-PL
	det:num|two pro:dem|this cop|be&3S det:art|a adj|square comp|if
	det:num|eight aux|be&PAST&13S det:art|a adv|square prep|modulo
	det:num|eleven adv:tem|then det:num|two mod|will&COND v|turn adv|out
	inf|to cop|be det:art|a adv|square prep|modulo det:num|eleven .
%gra:	1|4|SUBJ 2|4|AUX 3|4|QUANT 4|0|ROOT 5|6|LINK 6|4|COMP 7|8|QUANT 8|6|JCT
	9|11|DET 10|11|QUANT 11|8|POBJ 12|13|QUANT 13|14|SUBJ 14|11|CMOD
	15|16|DET 16|14|PRED 17|27|LINK 18|27|SUBJ 19|27|AUX 20|21|DET 21|27|JCT
	22|27|JCT 23|24|QUANT 24|22|POBJ 25|27|SUBJ 26|27|AUX 27|16|CMOD 28|27|JCT
	29|30|INF 30|27|COMP 31|32|DET 32|30|PRED 33|32|JCT 34|33|POBJ 35|4|PUNCT
*S10:	and (.) the same goes with two to the fifth (.) so if we start with
	ten (.) which is two to the fifth (.) which is two (.) to the fourth
	times two .
%mor:	coord|and det:art|the adj|same v|go-3S prep|with det:num|two
	prep|to det:art|the adj|fifth adv|so conj|if pro:sub|we v|start
	prep|with det:num|ten pro:rel|which cop|be&3S det:num|two prep|to
	det:art|the adj|fifth pro:rel|which cop|be&3S det:num|two prep|to
	det:art|the n|fourth v|time-3S det:num|two .
%gra:	1|4|LINK 2|3|DET 3|4|SUBJ 4|0|ROOT 5|4|JCT 6|5|POBJ 7|6|JCT 8|9|DET
	9|7|POBJ 10|13|JCT 11|13|LINK 12|13|SUBJ 13|4|CJCT 14|13|JCT 15|14|POBJ
	16|17|LINK 17|15|CMOD 18|17|PRED 19|18|JCT 20|21|DET 21|19|POBJ 22|23|LINK
	23|21|CMOD 24|28|QUANT 25|24|JCT 26|27|DET 27|25|POBJ 28|23|CPRED
	29|28|OBJ 30|4|PUNCT
*S10:	if ten was a square (.) then because two to the fourth is a square
	(.) two (.) would turn out to be a square .
%mor:	conj|if det:num|ten aux|be&PAST&13S det:art|a adj|square
	adv:tem|then conj|because det:num|two prep|to det:art|the n|fourth
	cop|be&3S det:art|a adj|square det:num|two mod|will&COND v|turn
	adv|out inf|to cop|be det:art|a adv|square .
%gra:	1|6|LINK 2|6|SUBJ 3|6|AUX 4|6|DET 5|6|MOD 6|17|JCT 7|12|LINK 8|12|SUBJ
	9|8|NJCT 10|11|DET 11|9|POBJ 12|17|CJCT 13|15|DET 14|15|MOD 15|17|SUBJ
	16|17|AUX 17|0|ROOT 18|17|JCT 19|20|INF 20|17|COMP 21|22|DET 22|20|PRED
	23|17|PUNCT
*S10:	we know that two is not a square .
%mor:	pro:sub|we v|know adv|that det:num|two aux|be&3S neg|not det:art|a
	n|square .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|JCT 4|8|QUANT 5|8|AUX 6|5|NEG 7|8|DET 8|2|OBJ
	9|2|PUNCT
*S10:	so what I'm using is that (0.8) that if [x 3] I have an equation
	(.) a@l squared is congruent to two b@l squared (.) modulo eleven
	(.) then (.) I can take (.) the multiplicative inverse of [/] of
	this number B +...
%mor:	co|so pro:int|what pro:sub|I~cop|be&1S n:gerund|use-PRESP cop|be&3S
	comp|that adv|that conj|if pro:sub|I v|have det:art|a
	n|equate&dv-TION n:let|a part|square-PASTP cop|be&3S adj|congruent
	prep|to det:num|two n:let|b v|square-PAST prep|modulo det:num|eleven
	adv:tem|then pro:sub|I mod|can v|take det:art|the adj|multiplicative
	adj|inverse prep|of det:dem|this n|number n:prop|B +...
%gra:	1|4|COM 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|6|SUBJ 6|4|PRED 7|27|LINK 8|27|JCT
	9|11|LINK 10|11|SUBJ 11|27|CJCT 12|13|DET 13|11|OBJ 14|27|SUBJ
	15|27|XJCT 16|15|OBJ 17|16|PRED 18|21|JCT 19|20|QUANT 20|21|SUBJ 21|17|CMOD
	22|21|JCT 23|24|QUANT 24|22|POBJ 25|27|SUBJ 26|27|AUX 27|6|CPRED 28|30|DET
	29|30|MOD 30|27|OM 31|30|JCT 32|33|DET 33|31|POBJ 34|30|APP 35|4|PUNCT
*S10:	oops (.) multiplicative inverse of B +...
%mor:	co|oops adj|multiplicative n|inverse prep|of n:prop|B +...
%gra:	1|3|COM 2|3|MOD 3|0|INCROOT 4|3|NJCT 5|4|POBJ 6|3|PUNCT
*S10:	and then (.) I would end up (.) with an equation which says that
	two is a square .
%mor:	coord|and adv:tem|then pro:sub|I mod|will&COND v|end adv|up
	prep|with det:art|a n|equate&dv-TION pro:rel|which v|say-3S
	comp|that det:num|two cop|be&3S det:art|a n|square .
%gra:	1|5|LINK 2|5|JCT 3|5|SUBJ 4|5|AUX 5|0|ROOT 6|5|JCT 7|5|JCT 8|9|DET
	9|7|POBJ 10|11|LINK 11|9|CMOD 12|14|LINK 13|14|SUBJ 14|11|COMP 15|16|DET
	16|14|PRED 17|5|PUNCT
*S10:	it's [/] it's impossible .
%mor:	pro:per|it~cop|be&3S adj|impossible .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|2|PUNCT
*S10:	&=pause_while_looking_at_notes let me just &-uh tell you two more
	definitions .
%mor:	v|let&ZERO pro:obj|me adv|just v|tell pro:per|you det:num|two
	adv|more n|definition-PL .
%gra:	1|0|ROOT 2|1|OBJ 3|4|JCT 4|1|COMP 5|4|OBJ 6|8|QUANT 7|8|JCT 8|4|OBJ
	9|1|PUNCT
*S6:	I have a question about the +/.
%mor:	pro:sub|I v|have det:art|a n|question prep|about det:art|the +/.
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|OBJ 5|2|JCT 6|7|DET 7|5|POBJ
*S1:	⌈ yes ⌉ .
%mor:	co|yes .
%gra:	1|0|INCROOT 2|1|PUNCT
*S6:	+, ⌊ primitive element definition ⌋ .
%mor:	adj|primitive n|element n|definition .
%gra:	1|3|MOD 2|3|MOD 3|0|INCROOT 4|3|PUNCT
*S1:	yes .
%mor:	co|yes .
%gra:	1|0|INCROOT 2|1|PUNCT
*S6:	&-um if we're saying if the order of A is phi of M (.) so then on
	your example mod [: modulo] eleven +/.
%mor:	conj|if pro:sub|we~cop|be&PRES n:gerund|say-PRESP comp|if
	det:art|the n|order prep|of n:prop|A cop|be&3S n|phi prep|of
	n:prop|M conj|so adv:tem|then adv|on det:poss|your n|example
	prep|modulo det:num|eleven +/.
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|10|LINK 6|7|DET 7|10|SUBJ
	8|7|NJCT 9|8|POBJ 10|4|CMOD 11|10|PRED 12|11|NJCT 13|12|POBJ 14|18|LINK
	15|18|JCT 16|18|JCT 17|18|DET 18|10|PRED 19|18|NJCT 20|19|POBJ 21|3|PUNCT
*S1:	yeah +/.
%mor:	co|yeah +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S6:	+, why are we looking at (.) phi of ten (.) instead of phi of &el
	the number of &elemen if +...
%mor:	pro:int|why cop|be&PRES pro:sub|we part|look-PRESP prep|at n|phi
	prep|of det:num|ten adv|instead prep|of n|phi prep|of det:art|the
	n|number prep|of comp|if +...
%gra:	1|2|LINK 2|0|ROOT 3|2|PRED 4|3|XMOD 5|4|JCT 6|5|POBJ 7|6|NJCT 8|7|POBJ
	9|8|NJCT 10|9|JCT 11|10|POBJ 12|11|NJCT 13|14|DET 14|12|POBJ 15|14|NJCT
	16|15|POBJ 17|2|PUNCT
*S6:	the order of A (.) we're looking at (.) phi of ten instead of phi
	of eleven doesn't make sense (.) to me ?
%mor:	det:art|the n|order prep|of n:prop|A pro:sub|we~aux|be&PRES
	part|look-PRESP prep|at n|phi prep|of det:num|ten adv|instead
	prep|of n|phi prep|of det:num|eleven mod|do&3S~neg|not v|make
	n|sense prep|to pro:obj|me ?
%gra:	1|2|DET 2|0|INCROOT 3|2|NJCT 4|3|POBJ 5|7|SUBJ 6|7|AUX 7|2|CMOD 8|7|JCT
	9|8|POBJ 10|9|NJCT 11|10|POBJ 12|11|JCT 13|12|JCT 14|13|POBJ 15|14|NJCT
	16|19|SUBJ 17|19|AUX 18|17|NEG 19|15|POBJ 20|19|OBJ 21|19|JCT
	22|21|POBJ 23|2|PUNCT
*S6:	do you see what I'm saying ?
%mor:	mod|do pro:per|you v|see pro:int|what pro:sub|I~aux|be&1S
	part|say-PRESP ?
%gra:	1|3|AUX 2|3|SUBJ 3|0|ROOT 4|7|LINK 5|7|SUBJ 6|7|AUX 7|3|COMP 8|3|PUNCT
*S1:	&-uh xxx not quite .
%mor:	neg|not adv|quite .
%gra:	1|2|NEG 2|0|INCROOT 3|2|PUNCT
*S1:	the so the order (.) we're looking for &-uh numbers (.) whose order
	is ten +...
%mor:	det:art|the conj|so det:art|the n|order pro:sub|we~aux|be&PRES
	part|look-PRESP prep|for n|number-PL pro:rel|whose n|order cop|be&3S
	det:num|ten +...
%gra:	1|2|DET 2|0|INCROOT 3|4|DET 4|2|POBJ 5|7|SUBJ 6|7|AUX 7|4|CMOD 8|7|JCT
	9|8|POBJ 10|12|LINK 11|12|SUBJ 12|9|CMOD 13|12|PRED 14|2|PUNCT
*S1:	so <we can> [/] we can just go through this list (.) ⌈ and figure
	out ⌉ .
%mor:	co|so pro:sub|we mod|can adv|just v|go adj|through det:dem|this
	n|list coord|and v|figure adv|out .
%gra:	1|5|COM 2|5|SUBJ 3|5|AUX 4|5|JCT 5|0|ROOT 6|8|MOD 7|8|DET 8|5|OBJ
	9|5|CONJ 10|9|COORD 11|10|JCT 12|5|PUNCT
*S6:	⌊ I understood ⌋ all that (.) it's the definition that doesn't make
	sense +...
%mor:	pro:sub|I v|understand&PAST adv|all adv|that pro:per|it~cop|be&3S
	det:art|the n|definition adv|that mod|do&3S~neg|not v|make n|sense
	+...
%gra:	1|2|SUBJ 2|0|ROOT 3|4|JCT 4|6|JCT 5|6|SUBJ 6|2|COMP 7|8|DET 8|6|PRED
	9|12|JCT 10|12|AUX 11|10|NEG 12|8|CMOD 13|12|OBJ 14|2|PUNCT
*S6:	I mean I understand that (.) two to the fourth (.) in (.) the order
	of two is four (.) mod [: modulo] eleven (.) wait .
%mor:	pro:sub|I v|mean pro:sub|I v|understand comp|that det:num|two
	prep|to det:art|the n|fourth prep|in det:art|the n|order prep|of
	det:num|two aux|be&3S det:num|four prep|modulo det:num|eleven v|wait
	.
%gra:	1|2|SUBJ 2|0|ROOT 3|4|SUBJ 4|2|COMP 5|4|OBJ 6|7|QUANT 7|5|JCT 8|9|DET
	9|7|POBJ 10|9|NJCT 11|12|DET 12|10|POBJ 13|12|NJCT 14|16|SUBJ 15|16|AUX
	16|13|POBJ 17|16|NJCT 18|19|QUANT 19|17|POBJ 20|2|PUNCT
*S1:	⌈ well the order of two ⌉ +/.
%mor:	co|well det:art|the n|order prep|of det:num|two +/.
%gra:	1|3|COM 2|3|DET 3|0|INCROOT 4|3|NJCT 5|4|POBJ 6|3|PUNCT
*S6:	+, ⌊ <&w &w> [?] wait (.) now I'm getting ⌋ confused .
%mor:	v|wait adv|now pro:sub|I~aux|be&1S part|get-PRESP
	part|confuse-PASTP .
%gra:	1|0|ROOT 2|1|JCT 3|5|SUBJ 4|5|AUX 5|1|XJCT 6|1|XJCT 7|1|PUNCT
*S1:	okay (.) the order (.) of something (.) is the smallest positive
	power +/.
%mor:	co|okay det:art|the n|order prep|of pro:indef|something cop|be&3S
	det:art|the adj|small-SP n|positive n|power +/.
%gra:	1|6|COM 2|3|DET 3|6|SUBJ 4|3|NJCT 5|4|POBJ 6|0|ROOT 7|10|DET 8|9|MOD
	9|10|MOD 10|6|PRED 11|6|PUNCT
*S6:	⌈ right so that it's congruent to one ⌉ .
%mor:	adv|right adv|so comp|that pro:per|it~cop|be&3S adj|congruent
	prep|to pro:indef|one .
%gra:	1|2|JCT 2|5|JCT 3|5|LINK 4|5|SUBJ 5|0|ROOT 6|5|PRED 7|6|JCT 8|7|POBJ
	9|5|PUNCT
*S1:	+, ⌊ that you need (.) to show that you get ⌋ one .
%mor:	comp|that pro:per|you v|need inf|to v|show comp|that pro:per|you
	v|get pro:indef|one .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|5|INF 5|3|COMP 6|8|LINK 7|8|SUBJ 8|5|COMP
	9|8|OBJ 10|3|PUNCT
*S6:	right .
%mor:	co|right .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	and (.) so the primitive elements &=pause_while_writing they turn
	out to be two (.) and (.) eight (.) and seven (.) .
%mor:	coord|and co|so det:art|the n|primitive n|element-PL pro:sub|they
	v|turn adv|out inf|to cop|be det:num|two coord|and det:num|eight
	coord|and det:num|seven .
%gra:	1|5|LINK 2|5|COM 3|5|DET 4|5|MOD 5|7|JCT 6|7|SUBJ 7|0|ROOT 8|7|JCT
	9|10|INF 10|8|CPOBJ 11|10|PRED 12|11|CONJ 13|12|COORD 14|7|CONJ 15|14|COORD
	16|7|PUNCT
*SUM:	six .
%mor:	det:num|six .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	and six .
%mor:	coord|and det:num|six .
%gra:	1|2|LINK 2|0|INCROOT 3|2|PUNCT
*S1:	but if you well (.) <I didn't use> [/] I didn't use (.) I didn't
	use the [/] the tables (.) but you could use the tables I mean you
	listed all the orders (.) you can just check that these are the
	primitive elements .
%mor:	conj|but conj|if pro:per|you adv|well pro:sub|I mod|do&PAST~neg|not
	v|use pro:sub|I mod|do&PAST~neg|not v|use det:art|the n|table-PL
	conj|but pro:per|you mod|could v|use det:art|the n|table-PL
	pro:sub|I v|mean pro:per|you v|list-PAST qn|all det:art|the
	n|order-PL pro:per|you mod|can adj|just n|check comp|that
	pro:dem|these cop|be&PRES det:art|the n|primitive n|element-PL .
%gra:	1|12|LINK 2|8|LINK 3|8|SUBJ 4|8|JCT 5|8|SUBJ 6|8|AUX 7|6|NEG 8|12|CJCT
	9|12|SUBJ 10|12|AUX 11|10|NEG 12|22|CJCT 13|14|DET 14|12|OBJ 15|18|LINK
	16|18|SUBJ 17|18|AUX 18|22|CJCT 19|20|DET 20|18|OBJ 21|22|SUBJ 22|0|ROOT
	23|24|SUBJ 24|22|COMP 25|27|QUANT 26|27|DET 27|24|OBJ 28|31|SUBJ
	29|31|AUX 30|31|MOD 31|24|JCT 32|34|LINK 33|34|SUBJ 34|31|CMOD 35|37|DET
	36|37|MOD 37|34|PRED 38|22|PUNCT
*S1:	and what I claimed is (.) that +...
%mor:	coord|and pro:int|what pro:sub|I v|claim-PAST cop|be&3S
	pro:dem|that +...
%gra:	1|5|LINK 2|4|LINK 3|4|SUBJ 4|5|SUBJ 5|0|ROOT 6|5|PRED 7|5|PUNCT
*S1:	&=writes:board the indices (.) to get these numbers (.) <when you>
	[/] <when you> [/] when you look in the first table are (.) one (.)
	three &-uh seven (.) and nine (.) and these are numbers that are
	&relat relatively prime to ten .
%mor:	det:art|the in#n|die&PL-PL inf|to v|get det:dem|these n|number-PL
	conj|when pro:per|you v|look prep|in det:art|the adj|first n|table
	cop|be&PRES det:num|one det:num|three det:num|seven coord|and
	det:num|nine coord|and pro:dem|these cop|be&PRES n|number-PL
	pro:rel|that cop|be&PRES adv|relative&dadj-LY adj|prime prep|to
	det:num|ten .
%gra:	1|2|DET 2|0|INCROOT 3|4|INF 4|2|XMOD 5|6|DET 6|4|OBJ 7|9|LINK 8|9|SUBJ
	9|4|CJCT 10|9|JCT 11|13|DET 12|13|MOD 13|10|POBJ 14|9|CJCT 15|14|PRED
	16|17|DATE 17|22|SUBJ 18|17|CONJ 19|18|COORD 20|17|CONJ 21|20|COORD
	22|15|COMP 23|22|PRED 24|25|LINK 25|23|CMOD 26|27|JCT 27|25|PRED 28|27|JCT
	29|28|POBJ 30|2|PUNCT
*S6:	right .
%mor:	co|right .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	but the [/] the (.) those are the indices .
%mor:	conj|but det:art|the pro:dem|those cop|be&PRES det:art|the
	in#n|die&PL-PL .
%gra:	1|4|LINK 2|3|DET 3|4|SUBJ 4|0|ROOT 5|6|DET 6|4|PRED 7|4|PUNCT
*S1:	so the point is it's kind_of &li like a logarithm (.) and we're
	gonna get back to this &-uh subject next time (.) this is called a
	discrete logarithm .
%mor:	co|so det:art|the n|point cop|be&3S pro:per|it~cop|be&3S
	adv|kind_of co|like det:art|a n|logarithm coord|and
	pro:sub|we~aux|be&PRES part|go-PRESP~inf|to v|get adv|back prep|to
	det:dem|this adj|subject adj|next n|time pro:dem|this aux|be&3S
	part|call-PASTP det:art|a adj|discrete n|logarithm .
%gra:	1|4|COM 2|3|DET 3|4|SUBJ 4|0|ROOT 5|6|SUBJ 6|4|PRED 7|6|JCT 8|6|COM
	9|10|DET 10|6|PRED 11|14|LINK 12|14|SUBJ 13|14|AUX 14|10|CMOD 15|16|INF
	16|14|COMP 17|16|JCT 18|16|JCT 19|22|DET 20|22|MOD 21|22|MOD 22|18|POBJ
	23|25|SUBJ 24|25|AUX 25|16|XJCT 26|28|DET 27|28|MOD 28|25|OBJ 29|4|PUNCT
*S1:	so (.) instead of working with the actual numbers (.) I can go &-uh
	and work (.) with the indices .
%mor:	adv|so adv|instead prep|of part|work-PRESP prep|with det:art|the
	adj|actual n|number-PL pro:sub|I mod|can v|go coord|and n|work
	prep|with det:art|the in#n|die&PL-PL .
%gra:	1|2|JCT 2|11|JCT 3|2|JCT 4|3|POBJ 5|4|JCT 6|8|DET 7|8|MOD 8|5|POBJ
	9|11|SUBJ 10|11|AUX 11|0|ROOT 12|11|CONJ 13|12|COORD 14|13|NJCT 15|16|DET
	16|14|POBJ 17|11|PUNCT
*S1:	it's just like (.) the indices tell me (.) what number I have to
	use (.) what (.) I have to raise two to the third power (.) to get
	eight .
%mor:	pro:per|it~cop|be&3S adj|just prep|like det:art|the in#n|die&PL-PL
	v|tell pro:obj|me pro:int|what n|number pro:sub|I v|have inf|to
	v|use pro:int|what pro:sub|I v|have inf|to v|raise det:num|two
	prep|to det:art|the adj|third n|power inf|to v|get det:num|eight .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|7|LINK 5|6|DET 6|7|SUBJ 7|3|CMOD 8|7|OBJ
	9|10|DET 10|12|PRED 11|12|SUBJ 12|7|COMP 13|14|INF 14|12|COMP 15|17|LINK
	16|17|SUBJ 17|14|COMP 18|19|INF 19|17|COMP 20|19|OBJ 21|20|JCT 22|24|DET
	23|24|MOD 24|21|POBJ 25|26|INF 26|20|XJCT 27|26|OBJ 28|2|PUNCT
*S1:	I have to raise two (.) to the (.) ninth power to get six .
%mor:	pro:sub|I v|have prep|to n|raise det:num|two prep|to det:art|the
	adj|ninth n|power inf|to v|get det:num|six .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|3|POBJ 5|6|QUANT 6|2|JCT 7|9|DET 8|9|MOD
	9|6|POBJ 10|11|INF 11|9|XMOD 12|11|OBJ 13|2|PUNCT
*S1:	it's kind_of like a logarithm +...
%mor:	pro:per|it~cop|be&3S adv|kind_of co|like det:art|a n|logarithm +...
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|2|COM 5|6|DET 6|2|PRED 7|2|PUNCT
*S1:	and (.) well I'm gonna explain it (.) next time (.) but [/] but
	when you work with the indices (.) with the indices (.) you have to
	(.) &b [?] what [/] &impor what's important is (.) how do you (.)
	relate to the number ten which was phi of eleven .
%mor:	coord|and adv|well pro:sub|I~aux|be&1S part|go-PRESP~inf|to
	v|explain pro:per|it adj|next n|time conj|but conj|when pro:per|you
	v|work prep|with det:art|the in#n|die&PL-PL prep|with det:art|the
	in#n|die&PL-PL pro:per|you v|have prep|to pro:int|what~cop|be&3S
	adj|important aux|be&3S pro:int|how mod|do pro:per|you v|relate
	prep|to det:art|the n|number det:num|ten pro:int|which
	cop|be&PAST&13S n|phi prep|of det:num|eleven .
%gra:	1|5|LINK 2|5|JCT 3|5|SUBJ 4|5|AUX 5|0|ROOT 6|7|INF 7|5|COMP 8|10|DET
	9|10|MOD 10|7|OBJ 11|22|LINK 12|14|LINK 13|14|SUBJ 14|22|CJCT 15|14|JCT
	16|17|DET 17|15|POBJ 18|17|NJCT 19|20|DET 20|18|POBJ 21|22|SUBJ 22|5|CJCT
	23|22|JCT 24|25|SUBJ 25|23|CPOBJ 26|31|SUBJ 27|31|AUX 28|31|JCT
	29|31|AUX 30|31|SUBJ 31|25|CPRED 32|31|JCT 33|34|DET 34|32|POBJ 35|36|QUANT
	36|37|LINK 37|34|CMOD 38|37|PRED 39|38|NJCT 40|39|POBJ 41|5|PUNCT
*S6:	right .
%mor:	co|right .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	+, when you work with the actual numbers (.) what's important is
	&-uh what they are modulo eleven .
%mor:	conj|when pro:per|you v|work prep|with det:art|the adj|actual
	n|number-PL pro:int|what~cop|be&3S adj|important aux|be&3S
	pro:int|what pro:sub|they cop|be&PRES prep|modulo det:num|eleven .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|7|DET 6|7|MOD 7|4|POBJ 8|9|SUBJ
	9|14|PRED 10|14|SUBJ 11|14|AUX 12|14|LINK 13|14|SUBJ 14|7|CMOD 15|14|JCT
	16|15|POBJ 17|3|PUNCT
*S1:	and when you work with the indexes what's important (.) is (.) what
	they are modulo ten xxx we will get back to this &-uh next time .
%mor:	coord|and pro:int|when pro:per|you v|work prep|with det:art|the
	n|index-PL pro:int|what~cop|be&3S adj|important aux|be&3S
	pro:int|what pro:sub|they cop|be&PRES prep|modulo det:num|ten
	pro:sub|we mod|will v|get adv|back prep|to det:dem|this adj|next
	n|time .
%gra:	1|4|LINK 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|4|JCT 6|7|DET 7|5|POBJ 8|9|SUBJ
	9|14|PRED 10|14|SUBJ 11|14|AUX 12|14|LINK 13|14|SUBJ 14|4|CJCT 15|14|JCT
	16|19|LINK 17|19|SUBJ 18|19|AUX 19|15|CPOBJ 20|19|JCT 21|19|JCT
	22|24|DET 23|24|MOD 24|21|POBJ 25|4|PUNCT
*S1:	(0.6) and [?] (.) the two definitions I promised I [/] I will tell
	you next time (.) xxx run out_of time .
%mor:	coord|and det:art|the det:num|two n|definition-PL pro:sub|I
	v|promise-PAST pro:sub|I mod|will v|tell pro:per|you adj|next n|time
	v|run prep|out_of n|time .
%gra:	1|9|LINK 2|4|DET 3|4|QUANT 4|9|SUBJ 5|6|SUBJ 6|4|CMOD 7|9|SUBJ 8|9|AUX
	9|0|ROOT 10|9|OBJ2 11|12|MOD 12|13|SUBJ 13|9|COMP 14|13|JCT 15|14|POBJ
	16|9|PUNCT
*S1:	&-uh .
@End
