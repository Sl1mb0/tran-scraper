@UTF8
@PID:	11312/a-00010169-1
@Begin
@Languages:	eng
@Participants:	S1 Instructor Teacher, S2 Student Student, S3 Student
	Student, S4 Student Student, S5 Student Student, S6 Student
	Student, SS Student Student, SU Student Student, SUM Student
	Student
@ID:	eng|MICASE|S1|36;|male|NS||Teacher|SF||
@ID:	eng|MICASE|S2|20;|male|NS||Student|JU||
@ID:	eng|MICASE|S3|20;|male|NS||Student|JU||
@ID:	eng|MICASE|S4|20;|female|NS||Student|JU||
@ID:	eng|MICASE|S5|20;|male|NS||Student|JU||
@ID:	eng|MICASE|S6|20;|male|NS||Student|JU||
@ID:	eng|MICASE|SS|20;||NS||Student|JU||
@ID:	eng|MICASE|SU|20;||NS||Student|JU||
@ID:	eng|MICASE|SUM|20;|male|NS||Student|JU||
@Media:	lel295ju035, audio, unlinked
@Date:	25-SEP-1998
@Situation:	Auditorium, Chrysler Center
*S1:	let me ask a question .
%mor:	v|let&ZERO pro:obj|me v|ask det:art|a n|question .
%gra:	1|0|ROOT 2|3|SUBJ 3|1|COMP 4|5|DET 5|3|OBJ 6|1|PUNCT
*S1:	&=pause_while_setting_up_computer_projection xxx operate the power
	.
%mor:	v|operate det:art|the n|power .
%gra:	1|0|ROOT 2|3|DET 3|1|OBJ 4|1|PUNCT
*S1:	is that readable ?
%mor:	cop|be&3S det:dem|that adj|read&dv-ABLE ?
%gra:	1|0|ROOT 2|3|DET 3|1|PRED 4|1|PUNCT
*SUM:	no +/.
%mor:	co|no +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*SS:	+, yeah +/.
%mor:	co|yeah +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	+, with the lights off you can read it +...
%mor:	prep|with det:art|the n|light-PL prep|off pro:per|you mod|can
	v|read&ZERO pro:per|it +...
%gra:	1|7|JCT 2|3|DET 3|1|POBJ 4|3|NJCT 5|4|POBJ 6|7|AUX 7|0|ROOT 8|7|OBJ
	9|7|PUNCT
*S1:	that's okay ?
%mor:	pro:dem|that~cop|be&3S adj|okay ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|2|PUNCT
*S1:	I can make it a little bigger too .
%mor:	pro:sub|I mod|can v|make pro:per|it det:art|a adj|little adj|big-CP
	adv|too .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|OBJ 5|7|DET 6|7|MOD 7|3|JCT 8|7|JCT
	9|3|PUNCT
*S1:	it's much better if it's green on black or yellow on black (.) but
	at the moment I can't find where they've hidden the &-uh colors so I
	won't &-uh waste time on that +...
%mor:	pro:per|it~cop|be&3S adv|much adj|good&CP conj|if
	pro:per|it~cop|be&3S n|green adv|on n|black coord|or n|yellow adv|on
	n|black conj|but prep|at det:art|the n|moment pro:sub|I
	mod|can~neg|not v|find pro:int|where pro:sub|they~aux|have
	part|hide&PASTP det:art|the n|color-PL conj|so pro:sub|I
	mod|will~neg|not n|waste n|time prep|on pro:dem|that +...
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|2|PRED 5|7|LINK 6|7|SUBJ 7|2|CJCT 8|7|PRED
	9|8|NJCT 10|9|POBJ 11|10|CONJ 12|14|MOD 13|14|JCT 14|11|COORD 15|22|LINK
	16|22|JCT 17|18|DET 18|16|POBJ 19|22|SUBJ 20|22|AUX 21|20|NEG 22|2|CJCT
	23|26|LINK 24|26|SUBJ 25|26|AUX 26|22|COMP 27|28|DET 28|26|OBJ
	29|33|LINK 30|33|SUBJ 31|33|AUX 32|31|NEG 33|34|MOD 34|2|PRED 35|34|NJCT
	36|35|POBJ 37|2|PUNCT
*S1:	but I do wanna do some stuff on there so (.) okay &-um
	&=pause_while_adjusting_computer little bigger +...
%mor:	conj|but pro:sub|I v|do v|want~inf|to v|do qn|some n|stuff prep|on
	n|there adv|so co|okay adj|little adj|big-CP +...
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|OBJ 5|6|INF 6|4|COMP 7|8|QUANT 8|6|OBJ
	9|6|JCT 10|9|POBJ 11|3|JCT 12|14|COM 13|14|MOD 14|3|JCT 15|3|PUNCT
*S1:	is that doable ?
%mor:	cop|be&3S det:dem|that adj|do&dv-ABLE ?
%gra:	1|0|ROOT 2|3|DET 3|1|PRED 4|1|PUNCT
*S1:	(0.6) who's tried to compile code on maize ?
%mor:	pro:rel|who~aux|be&3S part|try-PASTP inf|to v|compile n|code
	prep|on n|maize ?
%gra:	1|3|LINK 2|3|AUX 3|0|ROOT 4|5|INF 5|3|COMP 6|5|OBJ 7|5|JCT 8|7|POBJ
	9|3|PUNCT
*S1:	just one two +...
%mor:	adv|just det:num|one det:num|two +...
%gra:	1|2|JCT 2|3|QUANT 3|0|INCROOT 4|3|PUNCT
*S1:	lemme show you an interesting error .
%mor:	v|let~pro:obj|me v|show pro:per|you det:art|a adj|interesting
	n|error .
%gra:	1|0|ROOT 2|1|OBJ 3|1|COMP 4|3|OBJ 5|7|DET 6|7|MOD 7|4|OBJ 8|1|PUNCT
*S1:	&-um you know when you compile code you get all these crazy error
	messages and you look at them and you say what the hell does that
	mean .
%mor:	pro:per|you v|know conj|when pro:per|you v|compile v|code
	pro:per|you v|get qn|all det:dem|these adj|craze&dv-Y n|error
	n|message-PL coord|and pro:per|you v|look prep|at pro:obj|them
	coord|and pro:per|you v|say pro:int|what det:art|the n|hell
	mod|do&3S pro:dem|that adj|mean .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|LINK 4|5|SUBJ 5|8|CJCT 6|5|OBJ 7|8|SUBJ 8|2|COMP
	9|13|QUANT 10|13|DET 11|13|MOD 12|13|MOD 13|8|OBJ 14|16|LINK 15|16|SUBJ
	16|8|CJCT 17|16|JCT 18|17|POBJ 19|21|LINK 20|21|SUBJ 21|16|CJCT
	22|27|LINK 23|24|DET 24|27|SUBJ 25|27|AUX 26|27|SUBJ 27|21|COMP 28|2|PUNCT
*S1:	&-um they actually all say something most of them are even
	understandable if you look at them for long enough .
%mor:	pro:sub|they adv|actual&dadj-LY adv|all v|say pro:indef|something
	pro:indef|most prep|of pro:obj|them cop|be&PRES adv|even
	adj|understand&dv-ABLE conj|if pro:per|you v|look prep|at
	pro:obj|them prep|for adv|long adv|enough .
%gra:	1|4|SUBJ 2|4|JCT 3|4|JCT 4|0|ROOT 5|9|LINK 6|9|SUBJ 7|6|NJCT 8|7|POBJ
	9|4|COMP 10|11|JCT 11|9|PRED 12|14|LINK 13|14|SUBJ 14|4|CJCT 15|14|JCT
	16|15|POBJ 17|14|JCT 18|19|JCT 19|17|POBJ 20|4|PUNCT
*S1:	(0.6) &-uh (0.6) xxx (0.6) big mistake never use Windows NT .
%mor:	adj|big n|mistake adv|never n|use n:prop|Windows n:prop|NT .
%gra:	1|2|MOD 2|0|INCROOT 3|2|NJCT 4|6|MOD 5|6|NAME 6|3|POBJ 7|2|PUNCT
*S1:	(0.7) still can't see xxx (0.9) don't move (.) Daniel [?] (0.9)
	okay .
%mor:	adv|still mod|can~neg|not v|see mod|do~neg|not v|move n:prop|Daniel
	co|okay .
%gra:	1|4|JCT 2|4|AUX 3|2|NEG 4|0|ROOT 5|7|AUX 6|5|NEG 7|4|COMP 8|7|OBJ
	9|7|COM 10|4|PUNCT
*S1:	close enough .
%mor:	v|close adv|enough .
%gra:	1|0|ROOT 2|1|JCT 3|1|PUNCT
*S1:	&-um (0.9) .
*SUM:	the font's too big .
%mor:	det:art|the n|font~cop|be&3S adv|too adj|big .
%gra:	1|2|DET 2|3|SUBJ 3|0|ROOT 4|5|JCT 5|3|PRED 6|3|PUNCT
*S1:	yeah but if the font's &s smaller then you can't read it easily .
%mor:	co|yeah conj|but comp|if det:art|the adj|font&dn-POSS adj|small-CP
	adv:tem|then pro:per|you mod|can~neg|not v|read&ZERO pro:per|it
	adv|ease&dadj-Y-LY .
%gra:	1|0|INCROOT 2|1|CONJ 3|2|COORD 4|6|DET 5|6|MOD 6|3|PRED 7|11|JCT
	8|11|SUBJ 9|11|AUX 10|9|NEG 11|6|CMOD 12|11|OBJ 13|11|JCT 14|1|PUNCT
*S1:	okay this'll do .
%mor:	co|okay pro:dem|this~mod|will v|do .
%gra:	1|4|COM 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|PUNCT
*S1:	(0.13) okay so here's some interesting C codes .
%mor:	co|okay co|so pro:exist|here~cop|be&3S qn|some adj|interesting
	n:prop|C v|code-3S .
%gra:	1|4|COM 2|4|COM 3|4|SUBJ 4|0|ROOT 5|6|QUANT 6|4|PRED 7|8|SUBJ 8|6|CMOD
	9|4|PUNCT
*S1:	&-uh trust me they work .
%mor:	v|trust pro:obj|me pro:sub|they v|work .
%gra:	1|0|ROOT 2|1|OBJ 3|4|SUBJ 4|1|CJCT 5|1|PUNCT
*S1:	let's compile them .
%mor:	v|let~pro:obj|us v|compile pro:obj|them .
%gra:	1|0|ROOT 2|1|OBJ 3|1|COMP 4|3|OBJ 5|1|PUNCT
*S1:	(0.9) now watch it'll work and I'll be embarrassed .
%mor:	adv|now v|watch pro:per|it~mod|will n|work coord|and
	pro:sub|I~mod|will aux|be part|embarrass-PASTP .
%gra:	1|2|JCT 2|0|ROOT 3|5|SUBJ 4|5|AUX 5|2|OBJ 6|10|LINK 7|10|SUBJ 8|10|AUX
	9|10|AUX 10|2|CJCT 11|2|PUNCT
*S1:	it's supposed to break .
%mor:	pro:per|it~aux|be&3S part|suppose-PASTP inf|to v|break .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|INF 5|3|COMP 6|3|PUNCT
*S1:	(0.5) fast isn't it ?
%mor:	adj|fast cop|be&3S~neg|not pro:per|it ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|NEG 4|2|PRED 5|2|PUNCT
*SUM:	work [?] +/.
%mor:	n|work +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	+, okay here we go .
%mor:	co|okay adv|here pro:sub|we v|go .
%gra:	1|4|COM 2|4|JCT 3|4|SUBJ 4|0|ROOT 5|4|PUNCT
*S1:	and we get this funky error message which says +...
%mor:	coord|and pro:sub|we v|get det:dem|this adj|funk&dn-Y n|error
	n|message pro:rel|which v|say-3S +...
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|7|DET 5|7|MOD 6|7|MOD 7|3|OBJ 8|9|LINK
	9|7|CMOD 10|3|PUNCT
*S1:	&{l=READING CC prime dot c@l line twelve error seventeen oh
	[: zero] five function prototypes are an ANSI feature .
%mor:	n:prop|CC n|prime n|dot n:let|c v|line det:num|twelve n|error
	det:num|seventeen det:num|zero det:num|five n|function
	n|prototype-PL cop|be&PRES det:art|a n:prop|ANSI n|feature .
%gra:	1|3|MOD 2|3|MOD 3|0|INCROOT 4|5|SUBJ 5|3|CMOD 6|7|QUANT 7|12|MOD
	8|11|QUANT 9|10|DATE 10|11|QUANT 11|12|MOD 12|13|SUBJ 13|5|COMP 14|16|DET
	15|16|MOD 16|13|PRED 17|3|PUNCT
*S1:	&}l=READING okay and several people have sent me messages and
	several people have seen this in the labs .
%mor:	co|okay coord|and qn|several n|person&PL v|have v|send&PAST
	pro:obj|me n|message-PL coord|and qn|several n|person&PL v|have
	part|see&PASTP det:dem|this prep|in det:art|the n|lab-PL .
%gra:	1|5|COM 2|1|CONJ 3|2|COORD 4|5|SUBJ 5|0|ROOT 6|5|COMP 7|8|SUBJ 8|6|COMP
	9|8|CONJ 10|12|QUANT 11|12|SUBJ 12|9|COORD 13|12|COMP 14|13|OBJ
	15|14|JCT 16|17|DET 17|15|POBJ 18|5|PUNCT
*S1:	and (.) &i what the hell's it saying ?
%mor:	coord|and pro:int|what det:art|the adj|hell&dn-POSS pro:per|it
	part|say-PRESP ?
%gra:	1|6|LINK 2|6|LINK 3|4|DET 4|6|JCT 5|6|SUBJ 6|0|ROOT 7|6|PUNCT
*S1:	anybody have a guess ?
%mor:	pro:indef|anybody v|have det:art|a n|guess ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|OBJ 5|2|PUNCT
*S1:	it's actually telling you something .
%mor:	pro:per|it~aux|be&3S adv|actual&dadj-LY part|tell-PRESP pro:per|you
	pro:indef|something .
%gra:	1|4|SUBJ 2|4|AUX 3|4|JCT 4|0|ROOT 5|6|SUBJ 6|4|OBJ 7|4|PUNCT
*SUM:	&-uh you got something xxx .
%mor:	pro:per|you v|get&PAST pro:indef|something .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|OBJ 4|2|PUNCT
*S1:	that wasn't much of a guess .
%mor:	comp|that cop|be&PAST&13S~neg|not adv|much prep|of det:art|a
	n|guess .
%gra:	1|2|LINK 2|0|ROOT 3|2|NEG 4|5|JCT 5|2|JCT 6|7|DET 7|5|POBJ 8|2|PUNCT
*S1:	&{l=READING are an ANSI feature .
%mor:	cop|be&PRES det:art|a n:prop|ANSI n|feature .
%gra:	1|0|ROOT 2|4|DET 3|4|MOD 4|1|PRED 5|1|PUNCT
*S1:	&}l=READING and I keep talking about how C is this family of
	languages and there's traditional C and ANSIC and objective C and
	all these different things called C .
%mor:	coord|and pro:sub|I v|keep part|talk-PRESP prep|about pro:int|how
	n:prop|C cop|be&3S det:dem|this n|family prep|of n|language-PL
	coord|and pro:exist|there~cop|be&3S adj|tradition&dn-AL n:prop|C
	coord|and n:prop|ANSIC coord|and adj|objective n:prop|C coord|and
	qn|all det:dem|these adj|different n|thing-PL v|call-PAST n:prop|C .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|OBJ 5|3|JCT 6|8|LINK 7|8|SUBJ 8|5|CPOBJ
	9|10|DET 10|8|PRED 11|10|NJCT 12|11|POBJ 13|15|LINK 14|15|SUBJ 15|3|CJCT
	16|17|MOD 17|15|PRED 18|15|CONJ 19|18|COORD 20|19|CONJ 21|22|MOD
	22|20|COORD 23|28|LINK 24|27|QUANT 25|27|DET 26|27|MOD 27|28|SUBJ 28|15|CJCT
	29|28|OBJ 30|3|PUNCT
*S1:	this compiler is telling you that it is not an ANSIC compiler .
%mor:	pro:dem|this n|compile&dv-AGT aux|be&3S part|tell-PRESP pro:per|you
	comp|that pro:per|it cop|be&3S neg|not det:art|a n:prop|ANSIC
	n|compile&dv-AGT .
%gra:	1|2|DET 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|OBJ 6|8|LINK 7|8|SUBJ 8|4|COMP
	9|8|NEG 10|12|DET 11|12|MOD 12|8|PRED 13|4|PUNCT
*S1:	it turns out that on a_lot_of the CAEN not all (.) but a_lot (.) of
	the CAEN &-um Hewlett Packard workstations the default compiler is
	not an ANSIC compiler .
%mor:	pro:per|it v|turn-3S adv|out pro:dem|that prep|on qn|a_lot_of
	det:art|the n:prop|CAEN neg|not adv|all conj|but adv|a_lot prep|of
	det:art|the n:prop|CAEN n:prop|Hewlett n:prop|Packard
	n|+n|work+n|station-PL det:art|the n|default n|compile&dv-AGT
	cop|be&3S neg|not det:art|a n:prop|ANSIC n|compile&dv-AGT .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|3|POBJ 5|4|NJCT 6|5|POBJ 7|8|DET 8|2|OBJ
	9|8|NEG 10|11|JCT 11|8|CONJ 12|13|JCT 13|11|COORD 14|15|DET 15|13|POBJ
	16|18|MOD 17|18|MOD 18|15|APP 19|21|DET 20|21|MOD 21|22|SUBJ 22|18|CMOD
	23|22|NEG 24|26|DET 25|26|MOD 26|22|PRED 27|2|PUNCT
*S1:	which means you hand it our codes which are written in ANSIC and it
	gives you little error messages .
%mor:	pro:int|which v|mean-3S pro:per|you v|hand pro:per|it det:poss|our
	n|code-PL pro:rel|which aux|be&PRES part|write&PASTP prep|in
	n:prop|ANSIC coord|and pro:per|it v|give-3S pro:per|you adj|little
	n|error n|message-PL .
%gra:	1|2|LINK 2|4|PRED 3|4|SUBJ 4|0|ROOT 5|4|OBJ 6|7|DET 7|5|OBJ 8|10|LINK
	9|10|AUX 10|7|CMOD 11|10|JCT 12|11|POBJ 13|15|LINK 14|15|SUBJ 15|10|CJCT
	16|19|MOD 17|19|MOD 18|19|MOD 19|15|OBJ 20|4|PUNCT
*S1:	this is (.) a common problem .
%mor:	pro:dem|this cop|be&3S det:art|a adj|common n|problem .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|DET 4|5|MOD 5|2|PRED 6|2|PUNCT
*S1:	Visual Studio will give you some of the same problems if it thinks
	your code is something other than ANSIC (.) it sometimes tries to
	guess (.) it'll give you mysterious error messages your code will be
	perfect .
%mor:	n:prop|Visual n:prop|Studio mod|will v|give pro:per|you qn|some
	prep|of det:art|the adj|same n|problem-PL conj|if pro:per|it
	v|think-3S det:poss|your n|code cop|be&3S pro:indef|something
	pro:indef|other prep|than n:prop|ANSIC pro:per|it adv|sometimes
	v|try-3S inf|to v|guess pro:per|it~mod|will v|give pro:per|you
	adj|mysterious n|error v|message-3S det:poss|your n|code mod|will
	cop|be adj|perfect .
%gra:	1|2|NAME 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|OBJ2 6|4|OBJ 7|6|NJCT 8|10|DET
	9|10|MOD 10|7|POBJ 11|13|LINK 12|13|SUBJ 13|4|CJCT 14|15|DET 15|16|SUBJ
	16|13|COMP 17|16|PRED 18|17|NJCT 19|18|NJCT 20|19|POBJ 21|23|SUBJ
	22|23|JCT 23|18|CMOD 24|25|INF 25|28|SUBJ 26|25|OBJ 27|28|AUX 28|23|COMP
	29|32|SUBJ 30|31|MOD 31|32|SUBJ 32|28|COMP 33|34|DET 34|36|SUBJ 35|36|AUX
	36|32|COMP 37|36|PRED 38|4|PUNCT
*S1:	and it will be yelling at you that it's not right .
%mor:	coord|and pro:per|it mod|will aux|be part|yell-PRESP prep|at
	pro:per|you comp|that pro:per|it~cop|be&3S neg|not co|right .
%gra:	1|5|LINK 2|5|SUBJ 3|5|AUX 4|5|AUX 5|0|ROOT 6|5|JCT 7|6|POBJ 8|10|LINK
	9|10|SUBJ 10|5|CJCT 11|10|NEG 12|10|PRED 13|5|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	a_lot_of compilers have that problem .
%mor:	qn|a_lot_of n|compile&dv-AGT-PL v|have det:dem|that n|problem .
%gra:	1|2|QUANT 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|OBJ 6|3|PUNCT
*S1:	&th there are all these different (.) slightly different versions
	of things (.) and the people who wrote this compiler (.) or the
	people who installed it by default didn't think you would want to
	write ANSIC they're fools (.) because no one should use anything
	other than ANSIC anymore (.) but no matter .
%mor:	pro:exist|there cop|be&PRES qn|all det:dem|these adj|different
	adv|slight&dadj-LY adj|different n|version-PL prep|of n|thing-PL
	coord|and det:art|the n|person&PL pro:rel|who v|write&PAST
	det:dem|this n|compile&dv-AGT coord|or det:art|the n|person&PL
	pro:rel|who v|install-PAST pro:per|it prep|by n|default
	mod|do&PAST~neg|not v|think pro:per|you mod|will&COND v|want inf|to
	v|write n:prop|ANSIC pro:sub|they~cop|be&PRES v|fool-3S conj|because
	qn|no pro:indef|one mod|should v|use pro:indef|anything
	pro:indef|other prep|than n:prop|ANSIC adv|anymore conj|but co|no
	v|matter .
%gra:	1|2|SUBJ 2|0|ROOT 3|8|QUANT 4|8|DET 5|8|MOD 6|7|JCT 7|8|MOD 8|2|PRED
	9|8|NJCT 10|9|POBJ 11|37|LINK 12|13|DET 13|37|SUBJ 14|15|LINK 15|13|CMOD
	16|17|DET 17|15|OBJ 18|28|LINK 19|20|DET 20|28|SUBJ 21|22|LINK 22|20|CMOD
	23|22|OBJ 24|28|JCT 25|24|POBJ 26|28|AUX 27|26|NEG 28|17|CMOD
	29|31|SUBJ 30|31|AUX 31|28|COMP 32|33|INF 33|31|COMP 34|33|OBJ 35|36|SUBJ
	36|13|CMOD 37|2|CJCT 38|42|LINK 39|40|QUANT 40|42|SUBJ 41|42|AUX 42|37|CJCT
	43|42|OBJ 44|43|OBJ 45|44|NJCT 46|45|POBJ 47|44|NJCT 48|47|CONJ 49|50|COM
	50|48|COORD 51|2|PUNCT
*S1:	it can be fixed .
%mor:	pro:per|it mod|can aux|be part|fix-PASTP .
%gra:	1|4|SUBJ 2|4|AUX 3|4|AUX 4|0|ROOT 5|4|PUNCT
*S1:	(0.9) this compiler (.) you can tell it (.) to use ANSIC with this
	little minus capital a@l little a@l thingy (.) called a flag .
%mor:	pro:dem|this n|compile&dv-AGT pro:per|you mod|can v|tell pro:per|it
	prep|to n|use n:prop|ANSIC prep|with det:dem|this adj|little n|minus
	n|capital n:let|a adj|little n:let|a adj|thing&dn-Y v|call-PAST
	det:art|a n|flag .
%gra:	1|2|DET 2|0|INCROOT 3|5|SUBJ 4|5|AUX 5|2|CMOD 6|5|OBJ 7|5|JCT 8|9|MOD
	9|7|POBJ 10|5|JCT 11|14|DET 12|14|MOD 13|14|MOD 14|19|SUBJ 15|19|AUX
	16|19|JCT 17|19|SUBJ 18|19|JCT 19|10|POBJ 20|21|DET 21|19|OBJ 22|2|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	&-um that's true of all the compilers you deal with .
%mor:	pro:dem|that~cop|be&3S n|true prep|of qn|all det:art|the
	n|compile&dv-AGT-PL pro:per|you v|deal prep|with .
%gra:	1|2|SUBJ 2|9|JCT 3|2|PRED 4|3|NJCT 5|7|QUANT 6|7|DET 7|4|POBJ 8|9|SUBJ
	9|0|ROOT 10|9|JCT 11|9|PUNCT
*S1:	you may get on a Sun sometime (.) Sun is pretty +//.
%mor:	pro:per|you mod|may v|get prep|on det:art|a n:prop|Sun adv|sometime
	n:prop|Sun cop|be&3S adv|pretty +//.
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|JCT 5|6|DET 6|4|POBJ 7|9|JCT 8|9|SUBJ
	9|3|CJCT 10|9|JCT 11|3|PUNCT
*S1:	the Sun workstations are pretty standard xxx you get the ANSIC
	compiler (.) but you may get on a Sun workstation (.) and run your
	code and it gives you an error message and you're sure there's no
	error .
%mor:	det:art|the n:prop|Sun n|+n|work+n|station-PL cop|be&PRES
	adv|pretty adj|standard pro:per|you v|get det:art|the n:prop|ANSIC
	n|compile&dv-AGT conj|but pro:per|you mod|may v|get prep|on
	det:art|a n:prop|Sun n|+n|work+n|station coord|and v|run
	det:poss|your n|code coord|and pro:per|it v|give-3S pro:per|you
	det:art|a n|error n|message coord|and pro:per|you~cop|be&PRES
	adj|sure pro:exist|there~cop|be&3S qn|no n|error .
%gra:	1|3|DET 2|3|MOD 3|4|SUBJ 4|8|CJCT 5|6|JCT 6|4|PRED 7|8|SUBJ 8|0|ROOT
	9|11|DET 10|11|MOD 11|8|OBJ 12|15|LINK 13|15|SUBJ 14|15|AUX 15|8|CJCT
	16|15|JCT 17|19|DET 18|19|MOD 19|16|POBJ 20|15|CONJ 21|20|COORD 22|23|DET
	23|21|OBJ 24|26|LINK 25|26|SUBJ 26|15|CJCT 27|36|SUBJ 28|30|DET 29|30|MOD
	30|36|SUBJ 31|33|LINK 32|33|SUBJ 33|36|CJCT 34|33|PRED 35|36|SUBJ
	36|26|COMP 37|38|QUANT 38|36|PRED 39|8|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	Suns (.) just two years ago by default wouldn't compile ANSIC you
	hadta tell them specially (.) compile ANSIC for me .
%mor:	n:prop|Suns adv|just det:num|two n|year-PL post|ago prep|by
	n|default mod|will&COND~neg|not v|compile n:prop|ANSIC pro:per|you
	mod|have&PAST~inf|to v|tell pro:obj|them adv|special&dadj-LY
	v|compile n:prop|ANSIC prep|for pro:obj|me .
%gra:	1|3|SUBJ 2|3|JCT 3|4|QUANT 4|15|SUBJ 5|4|POSTMOD 6|10|LINK 7|10|SUBJ
	8|10|AUX 9|8|NEG 10|15|CJCT 11|10|OBJ 12|15|SUBJ 13|15|AUX 14|15|INF
	15|0|ROOT 16|15|OBJ 17|18|JCT 18|15|COMP 19|18|OBJ 20|18|JCT 21|20|POBJ
	22|15|PUNCT
*S1:	so (.) the point is these (.) slight differences among versions of
	the language (.) do impact us in a practical way .
%mor:	co|so det:art|the n|point cop|be&3S det:dem|these adj|slight
	n|difference-PL prep|among n|version-PL prep|of det:art|the
	n|language mod|do v|impact pro:obj|us prep|in det:art|a
	adj|practical n|way .
%gra:	1|4|COM 2|3|DET 3|4|SUBJ 4|0|ROOT 5|7|DET 6|7|MOD 7|14|SUBJ 8|7|NJCT
	9|8|POBJ 10|9|NJCT 11|12|DET 12|10|POBJ 13|14|AUX 14|4|COMP 15|14|OBJ
	16|14|JCT 17|19|DET 18|19|MOD 19|16|POBJ 20|4|PUNCT
*S1:	the various compilers make different assumptions about &-uh &-um
	what you want it to do .
%mor:	det:art|the adj|various n|compile&dv-AGT-PL v|make adj|different
	n|assumption-PL prep|about pro:int|what pro:per|you v|want
	pro:per|it inf|to v|do .
%gra:	1|3|DET 2|3|MOD 3|4|SUBJ 4|0|ROOT 5|6|MOD 6|4|OBJ 7|4|JCT 8|10|LINK
	9|10|SUBJ 10|7|CPOBJ 11|10|OBJ 12|13|INF 13|10|COMP 14|4|PUNCT
*S1:	they're very presumptuous .
%mor:	pro:sub|they~cop|be&PRES adv|very adj|presumptuous .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|JCT 4|2|PRED 5|2|PUNCT
*S1:	okay .
%mor:	co|okay .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so I wanted to address that since &-uh some of you had experienced
	it .
%mor:	co|so pro:sub|I v|want-PAST inf|to v|address pro:dem|that
	conj|since pro:indef|some prep|of pro:per|you aux|have&PAST
	part|experience-PASTP pro:per|it .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|5|INF 5|3|COMP 6|5|OBJ 7|12|LINK 8|12|SUBJ
	9|8|NJCT 10|9|POBJ 11|12|AUX 12|3|CJCT 13|12|OBJ 14|3|PUNCT
*S1:	(0.6) now we'll turn the lights back on and talk about loops .
%mor:	adv|now pro:sub|we~mod|will v|turn det:art|the v|light-3S adv|back
	adv|on coord|and n|talk prep|about n|loop-PL .
%gra:	1|4|JCT 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|6|DET 6|4|OBJ 7|4|JCT 8|4|JCT
	9|4|CONJ 10|9|COORD 11|10|NJCT 12|11|POBJ 13|4|PUNCT
*S1:	&=pause_while_raising_projection_screen okay .
%mor:	co|okay .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so this is what I wanna talk about today .
%mor:	adv|so pro:dem|this cop|be&3S pro:int|what pro:sub|I v|want~inf|to
	v|talk adv|about adv:tem|today .
%gra:	1|2|JCT 2|3|SUBJ 3|0|ROOT 4|6|LINK 5|6|SUBJ 6|3|CPRED 7|8|INF 8|6|COMP
	9|10|JCT 10|8|JCT 11|3|PUNCT
*S1:	loops .
%mor:	n|loop-PL .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	we talked about loops a little bit when we talked about just
	algorithms in general without looking at computer code (.) we talked
	about algorithms we talked about (.) ways of +//.
%mor:	pro:sub|we v|talk-PAST prep|about n|loop-PL det:art|a adj|little
	n|bit conj|when pro:sub|we v|talk-PAST adv|about adv|just
	n|algorithm-PL prep|in n|general prep|without part|look-PRESP
	prep|at n|compute&dv-AGT n|code pro:sub|we v|talk-PAST prep|about
	n|algorithm-PL pro:sub|we v|talk-PAST prep|about n|way-PL prep|of
	+//.
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|7|MOD 5|7|DET 6|7|MOD 7|3|POBJ 8|10|LINK
	9|10|SUBJ 10|26|CJCT 11|13|JCT 12|13|JCT 13|22|CJCT 14|13|NJCT 15|14|POBJ
	16|13|NJCT 17|16|POBJ 18|17|JCT 19|20|MOD 20|18|POBJ 21|22|SUBJ
	22|10|COMP 23|22|JCT 24|23|POBJ 25|26|SUBJ 26|2|CJCT 27|26|JCT 28|27|POBJ
	29|28|NJCT 30|2|PUNCT
*S1:	we talked about the idea of writing down steps of instructions
	which will then be executed by a machine .
%mor:	pro:sub|we v|talk-PAST prep|about det:art|the n|idea prep|of
	part|write-PRESP prep|down n|step-PL prep|of n|instruction-PL
	pro:rel|which mod|will adv:tem|then aux|be part|execute-PASTP
	prep|by det:art|a n|machine .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|5|DET 5|3|POBJ 6|5|NJCT 7|6|POBJ 8|7|JCT
	9|8|POBJ 10|9|NJCT 11|10|POBJ 12|16|LINK 13|16|AUX 14|16|JCT 15|16|AUX
	16|11|CMOD 17|16|JCT 18|19|DET 19|17|POBJ 20|2|PUNCT
*S1:	carried out by a machine to (.) solve some interesting problem .
%mor:	v|carry-PAST adv|out prep|by det:art|a n|machine inf|to v|solve
	qn|some adj|interesting n|problem .
%gra:	1|0|ROOT 2|1|JCT 3|1|JCT 4|5|DET 5|3|POBJ 6|7|INF 7|1|XJCT 8|10|QUANT
	9|10|MOD 10|7|OBJ 11|1|PUNCT
*S1:	and we mentioned sometimes you wanna loop .
%mor:	coord|and pro:sub|we v|mention-PAST adv|sometimes pro:per|you
	v|want~inf|to v|loop .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|6|JCT 5|6|SUBJ 6|3|COMP 7|8|INF 8|6|COMP
	9|3|PUNCT
*S1:	you wanna repeat something over and over .
%mor:	pro:per|you v|want~inf|to v|repeat pro:indef|something adv|over
	coord|and adv|over .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|INF 4|2|COMP 5|4|OBJ 6|4|JCT 7|4|CONJ 8|7|COORD
	9|2|PUNCT
*S1:	subject to some control .
%mor:	adj|subject prep|to qn|some n|control .
%gra:	1|0|INCROOT 2|1|JCT 3|4|QUANT 4|2|POBJ 5|1|PUNCT
*S1:	&=pause_while_writing over and over .
%mor:	adv|over coord|and adv|over .
%gra:	1|0|INCROOT 2|1|CONJ 3|2|COORD 4|1|PUNCT
*S1:	&=pause_while_writing and we'll sort_of call out three particular
	kinds of loop .
%mor:	coord|and pro:sub|we~mod|will adv|sort_of v|call prep|out
	det:num|three adj|particular n|kind-PL prep|of n|loop .
%gra:	1|5|LINK 2|5|SUBJ 3|5|AUX 4|5|JCT 5|0|ROOT 6|5|JCT 7|9|QUANT 8|9|MOD
	9|6|POBJ 10|9|NJCT 11|10|POBJ 12|5|PUNCT
*S1:	and I'll list them now and then we'll describe them in [/] in a bit
	of [/] &-uh of detail (.) there's something called a while@q loop .
%mor:	coord|and pro:sub|I~mod|will v|list pro:obj|them adv|now coord|and
	adv:tem|then pro:sub|we~mod|will v|describe pro:obj|them prep|in
	det:art|a n|bit prep|of n|detail pro:exist|there~cop|be&3S
	pro:indef|something v|call-PAST det:art|a meta|while n|loop .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|OBJ 6|4|JCT 7|11|LINK 8|11|JCT
	9|11|SUBJ 10|11|AUX 11|4|CJCT 12|11|OBJ 13|11|JCT 14|15|DET 15|13|POBJ
	16|15|NJCT 17|16|POBJ 18|19|SUBJ 19|11|CJCT 20|21|SUBJ 21|19|CPRED
	22|24|DET 23|24|MOD 24|21|OBJ 25|4|PUNCT
*S1:	and by the way (.) you'll find words in +//.
%mor:	coord|and prep|by det:art|the n|way pro:per|you~mod|will v|find
	n|word-PL adv|in +//.
%gra:	1|7|LINK 2|7|JCT 3|4|DET 4|2|POBJ 5|7|SUBJ 6|7|AUX 7|0|ROOT 8|7|OBJ
	9|7|JCT 10|7|PUNCT
*S1:	you'll &-uh +//.
%mor:	pro:per|you~mod|will +//.
%gra:	1|2|SUBJ 2|0|INCROOT 3|2|PUNCT
*S1:	I'm gonna use words while@q do_while@q for@q you'll find these
	words in C .
%mor:	pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|use n|word-PL meta|while
	meta|do_while meta|for pro:per|you~mod|will v|find det:dem|these
	n|word-PL prep|in n:prop|C .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|INF 5|3|COMP 6|5|OBJ 7|5|OBJ 8|7|CONJ
	9|8|COORD 10|12|SUBJ 11|12|AUX 12|9|COMP 13|14|DET 14|12|OBJ 15|12|JCT
	16|15|POBJ 17|3|PUNCT
*S1:	but I'm not talking about C I'm talking about (.) algorithms in
	general .
%mor:	conj|but pro:sub|I~aux|be&1S neg|not part|talk-PRESP prep|about
	n:prop|C pro:sub|I~aux|be&1S part|talk-PRESP prep|about
	n|algorithm-PL prep|in n|general .
%gra:	1|5|LINK 2|5|SUBJ 3|5|AUX 4|3|NEG 5|10|CJCT 6|5|JCT 7|6|POBJ 8|10|SUBJ
	9|10|AUX 10|0|ROOT 11|10|JCT 12|11|POBJ 13|12|NJCT 14|13|POBJ
	15|10|PUNCT
*S1:	okay the while@q loop is a [/] a fairly standard construct (.) in
	(.) developing algorithms .
%mor:	co|okay det:art|the meta|while n|loop cop|be&3S det:art|a
	adv|fair&dadj-LY adj|standard v|construct prep|in part|develop-PRESP
	n|algorithm-PL .
%gra:	1|5|COM 2|4|DET 3|4|MOD 4|5|SUBJ 5|0|ROOT 6|9|DET 7|9|JCT 8|9|JCT
	9|5|PRED 10|9|JCT 11|10|POBJ 12|11|OBJ 13|5|PUNCT
*S1:	as is something called a for@q loop as is something called a
	do_while@q .
%mor:	prep|as cop|be&3S pro:indef|something v|call-PAST det:art|a
	meta|for n|loop prep|as cop|be&3S pro:indef|something v|call-PAST
	det:art|a meta|do_while .
%gra:	1|2|COORD 2|4|CJCT 3|4|SUBJ 4|0|ROOT 5|7|DET 6|7|MOD 7|4|OBJ 8|11|JCT
	9|8|POBJ 10|11|SUBJ 11|4|CJCT 12|13|DET 13|11|OBJ 14|4|PUNCT
*S1:	the names vary a little bit (.) but the ideas of what they do are
	the same .
%mor:	det:art|the n|name-PL v|vary det:art|a adj|little n|bit conj|but
	det:art|the n|idea-PL prep|of pro:int|what pro:sub|they v|do
	cop|be&PRES det:art|the adj|same .
%gra:	1|2|DET 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|3|OBJ 7|6|CONJ 8|9|DET
	9|7|COORD 10|9|NJCT 11|13|LINK 12|13|SUBJ 13|10|CPOBJ 14|13|OBJ 15|16|DET
	16|14|PRED 17|3|PUNCT
*S1:	what the while@q loop lets us do is (.) execute a bunch of code
	over and over as long as some condition is true .
%mor:	pro:int|what det:art|the meta|while n|loop v|let-3S pro:obj|us v|do
	cop|be&3S v|execute det:art|a n|bunch prep|of n|code adv|over
	coord|and prep|over adv|as adj|long adv|as qn|some n|condition
	cop|be&3S n|true .
%gra:	1|5|LINK 2|4|DET 3|4|MOD 4|5|SUBJ 5|0|ROOT 6|5|OBJ 7|9|SUBJ 8|9|AUX
	9|5|COMP 10|11|DET 11|9|OBJ 12|11|NJCT 13|12|POBJ 14|9|JCT 15|14|CONJ
	16|15|COORD 17|18|COORD 18|16|POBJ 19|20|COORD 20|21|QUANT 21|22|SUBJ
	22|18|CMOD 23|22|PRED 24|5|PUNCT
*S1:	&=pause_while_writing as long as some condition is true .
%mor:	prep|as adv|long prep|as qn|some n|condition cop|be&3S adj|true .
%gra:	1|2|COORD 2|6|JCT 3|5|COORD 4|5|QUANT 5|6|SUBJ 6|0|ROOT 7|6|PRED
	8|6|PUNCT
*S1:	&=pause_while_writing at the top of the loop .
%mor:	prep|at det:art|the n|top prep|of det:art|the n|loop .
%gra:	1|0|INCROOT 2|3|DET 3|1|POBJ 4|3|NJCT 5|6|DET 6|4|POBJ 7|1|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	and I'll fill in what that means a little bit in a minute .
%mor:	coord|and pro:sub|I~mod|will v|fill adv|in pro:int|what
	det:dem|that v|mean-3S det:art|a adj|little n|bit prep|in det:art|a
	n|minute .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|JCT 6|8|LINK 7|8|DET 8|4|COMP
	9|11|DET 10|11|MOD 11|8|OBJ 12|11|NJCT 13|14|DET 14|12|POBJ 15|4|PUNCT
*S1:	&=pause_while_writing what's a condition ?
%mor:	pro:int|what~cop|be&3S det:art|a n|condition ?
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|2|PUNCT
*S1:	well we already know what conditions are we've seen conditions when
	talking about branching constructs .
%mor:	co|well pro:sub|we adv|already v|know det:int|what n|condition-PL
	cop|be&PRES pro:sub|we~aux|have part|see&PASTP n|condition-PL
	conj|when part|talk-PRESP adv|about part|branch-PRESP v|construct-3S
	.
%gra:	1|4|COM 2|4|SUBJ 3|4|JCT 4|0|ROOT 5|6|DET 6|7|SUBJ 7|4|COMP 8|10|SUBJ
	9|10|AUX 10|4|COMP 11|10|OBJ 12|13|LINK 13|4|CJCT 14|13|JCT 15|13|XJCT
	16|15|OBJ 17|4|PUNCT
*S1:	if X is less than Y that's a condition &=pause_while_writing
	do_while@q .
%mor:	conj|if n:prop|X cop|be&3S adj|less prep|than n:prop|Y
	pro:dem|that~cop|be&3S det:art|a n|condition meta|do_while .
%gra:	1|3|LINK 2|3|SUBJ 3|8|CJCT 4|3|PRED 5|4|JCT 6|5|POBJ 7|8|SUBJ 8|0|ROOT
	9|10|DET 10|8|PRED 11|10|POSTMOD 12|8|PUNCT
*S1:	this is exactly the same as a while@q loop except the condition is
	[/] is checked (.) at the bottom of the loop .
%mor:	pro:dem|this cop|be&3S adv|exact&dadj-LY det:art|the adj|same
	prep|as det:art|a meta|while n|loop prep|except det:art|the
	n|condition aux|be&3S part|check-PASTP prep|at det:art|the n|bottom
	prep|of det:art|the n|loop .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|JCT 4|5|DET 5|2|PRED 6|9|COORD 7|9|DET 8|9|MOD
	9|14|SUBJ 10|9|NJCT 11|12|DET 12|10|POBJ 13|14|AUX 14|5|CMOD 15|14|JCT
	16|17|DET 17|15|POBJ 18|17|NJCT 19|20|DET 20|18|POBJ 21|2|PUNCT
*S1:	&=pause_while_writing as long as some condition is true .
%mor:	prep|as adv|long prep|as qn|some n|condition cop|be&3S adj|true .
%gra:	1|2|COORD 2|6|JCT 3|5|COORD 4|5|QUANT 5|6|SUBJ 6|0|ROOT 7|6|PRED
	8|6|PUNCT
*S1:	&=pause_while_writing at the bottom of the loop .
%mor:	prep|at det:art|the n|bottom prep|of det:art|the n|loop .
%gra:	1|0|INCROOT 2|3|DET 3|1|POBJ 4|3|NJCT 5|6|DET 6|4|POBJ 7|1|PUNCT
*S1:	&=pause_while_writing it's basically the only way they differ .
%mor:	pro:per|it~cop|be&3S adv|basic&dadj-AL-LY det:art|the qn|only n|way
	pro:sub|they v|differ .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|6|DET 5|6|QUANT 6|3|POBJ 7|8|SUBJ 8|6|CMOD
	9|2|PUNCT
*S1:	one of them is checking something at the top and I'll show you what
	top means but it's (.) the top of the loop (.) the other is checking
	at the bottom .
%mor:	det:num|one prep|of pro:obj|them aux|be&3S part|check-PRESP
	pro:indef|something prep|at det:art|the n|top coord|and
	pro:sub|I~mod|will v|show pro:per|you pro:int|what n|top v|mean-3S
	conj|but pro:per|it~cop|be&3S det:art|the n|top prep|of det:art|the
	n|loop det:art|the qn|other aux|be&3S part|check-PRESP prep|at
	det:art|the n|bottom .
%gra:	1|5|SUBJ 2|1|JCT 3|2|POBJ 4|5|AUX 5|0|ROOT 6|5|OBJ 7|6|NJCT 8|9|DET
	9|7|POBJ 10|13|LINK 11|13|SUBJ 12|13|AUX 13|5|CJCT 14|13|OBJ 15|17|LINK
	16|17|SUBJ 17|13|COMP 18|20|LINK 19|20|SUBJ 20|17|CJCT 21|22|DET 22|20|PRED
	23|22|NJCT 24|25|DET 25|23|POBJ 26|27|DET 27|29|SUBJ 28|29|AUX
	29|22|XMOD 30|29|JCT 31|32|DET 32|30|POBJ 33|5|PUNCT
*S1:	is at the bottom (.) of the loop .
%mor:	cop|be&3S prep|at det:art|the n|bottom prep|of det:art|the n|loop .
%gra:	1|0|ROOT 2|1|JCT 3|4|DET 4|2|POBJ 5|4|NJCT 6|7|DET 7|5|POBJ 8|1|PUNCT
*S1:	&=pause_while_writing and what the for loop does is it repeats (.)
	a chunk of code over and over (.) a specified number of times .
%mor:	coord|and pro:int|what det:art|the prep|for n|loop mod|do&3S
	aux|be&3S pro:per|it v|repeat-3S det:art|a n|chunk prep|of n|code
	adv|over coord|and prep|over det:art|a part|specify-PASTP n|number
	prep|of n|time-PL .
%gra:	1|9|LINK 2|9|LINK 3|9|DET 4|9|LINK 5|9|SUBJ 6|9|AUX 7|9|AUX 8|9|SUBJ
	9|0|ROOT 10|11|DET 11|9|OBJ 12|11|NJCT 13|12|POBJ 14|9|JCT 15|9|CONJ
	16|15|COORD 17|19|DET 18|19|MOD 19|16|POBJ 20|19|NJCT 21|20|POBJ 22|9|PUNCT
*S1:	&=pause_while_writing so it repeats a block .
%mor:	co|so pro:per|it v|repeat-3S det:art|a n|block .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|OBJ 6|3|PUNCT
*S1:	&=pause_while_writing I organize my loops this way all the time I
	think I'll (.) sort_of make that a new structure .
%mor:	pro:sub|I v|organize det:poss|my n|loop-PL det:dem|this n|way
	adv|all det:art|the n|time pro:sub|I v|think pro:sub|I~mod|will
	adv|sort_of v|make comp|that det:art|a adj|new n|structure .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|OBJ 5|6|DET 6|11|JCT 7|6|NJCT 8|9|DET
	9|7|POBJ 10|11|SUBJ 11|2|CJCT 12|15|SUBJ 13|15|AUX 14|15|JCT 15|11|COMP
	16|15|OBJ 17|19|DET 18|19|MOD 19|16|OBJ 20|2|PUNCT
*S1:	for example when we look at Matlab Matlab has something called a
	for@q loop (.) but it's really like what most languages call a
	for_each@q loop .
%mor:	prep|for ex#adj|ample conj|when pro:sub|we v|look prep|at
	n:prop|Matlab n:prop|Matlab aux|have&3S pro:indef|something
	v|call-PAST det:art|a meta|for n|loop conj|but pro:per|it~cop|be&3S
	adv|real&dadj-LY v|like pro:int|what qn|most n|language-PL v|call
	det:art|a meta|for_each n|loop .
%gra:	1|11|LINK 2|1|POBJ 3|5|LINK 4|5|SUBJ 5|11|CJCT 6|5|JCT 7|6|POBJ
	8|11|SUBJ 9|11|AUX 10|11|SUBJ 11|0|ROOT 12|14|DET 13|14|MOD 14|11|OBJ
	15|17|LINK 16|17|SUBJ 17|11|CJCT 18|19|JCT 19|17|CPRED 20|22|DET 21|22|QUANT
	22|23|SUBJ 23|19|COMP 24|26|DET 25|26|MOD 26|23|OBJ 27|11|PUNCT
*S1:	but we'll see that in the fullness of time .
%mor:	conj|but pro:sub|we~mod|will co|see adv|that prep|in det:art|the
	n|full&dadj-NESS prep|of n|time .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|INCROOT 5|6|JCT 6|4|JCT 7|8|DET 8|6|POBJ
	9|8|NJCT 10|9|POBJ 11|4|PUNCT
*S1:	for the moment (.) if I can say that (.) for the moment think about
	for loops as (.) loops that simply repeat something a specified
	number of times .
%mor:	prep|for det:art|the n|moment conj|if pro:sub|I mod|can co|say
	adv|that prep|for det:art|the n|moment v|think adv|about prep|for
	n|loop-PL conj|as n|loop-PL pro:rel|that adv|simple&dadj-LY v|repeat
	pro:indef|something det:art|a part|specify-PASTP n|number prep|of
	n|time-PL .
%gra:	1|12|JCT 2|3|DET 3|1|POBJ 4|7|LINK 5|7|SUBJ 6|7|AUX 7|12|COM 8|9|JCT
	9|12|JCT 10|11|DET 11|9|POBJ 12|0|ROOT 13|12|JCT 14|12|JCT 15|14|POBJ
	16|12|JCT 17|16|POBJ 18|20|LINK 19|20|JCT 20|17|CMOD 21|20|OBJ 22|24|DET
	23|24|MOD 24|21|OBJ 25|24|NJCT 26|25|POBJ 27|12|PUNCT
*S1:	let's look at a [/] a while@q loop +...
%mor:	v|let~pro:obj|us v|look prep|at det:art|a meta|while n|loop +...
%gra:	1|0|ROOT 2|1|OBJ 3|1|COMP 4|3|JCT 5|7|DET 6|7|MOD 7|4|POBJ 8|1|PUNCT
*S1:	here's what while loops look like .
%mor:	pro:exist|here~cop|be&3S det:int|what n|while n|loop-PL v|look
	conj|like .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|DET 4|5|MOD 5|6|SUBJ 6|2|CPRED 7|6|OBJ 8|2|PUNCT
*S1:	not what C while loops look like just what the idea of a while@q
	loop looks like .
%mor:	neg|not pro:int|what n:prop|C conj|while n|loop-PL v|look conj|like
	adv|just pro:int|what det:art|the n|idea prep|of det:art|a
	meta|while n|loop v|look-3S prep|like .
%gra:	1|2|NEG 2|3|OBJ 3|0|ROOT 4|6|LINK 5|6|SUBJ 6|3|CJCT 7|6|OBJ 8|9|JCT
	9|16|LINK 10|11|DET 11|16|SUBJ 12|11|NJCT 13|15|DET 14|15|MOD 15|12|POBJ
	16|7|COBJ 17|16|JCT 18|3|PUNCT
*S1:	we have some condition &=pause_while_writing and while it's true
	(.) I execute some block of code (.) called the loop body .
%mor:	pro:sub|we v|have qn|some n|condition coord|and n|while
	pro:per|it~cop|be&3S n|true pro:sub|I v|execute qn|some n|block
	prep|of n|code v|call-PAST det:art|the n|loop n|body .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|QUANT 4|2|OBJ 5|4|CONJ 6|5|COORD 7|8|SUBJ
	8|2|COMP 9|8|PRED 10|11|SUBJ 11|2|CJCT 12|13|QUANT 13|16|SUBJ 14|13|NJCT
	15|14|POBJ 16|11|COMP 17|19|DET 18|19|MOD 19|16|OBJ 20|2|PUNCT
*S1:	&=pause_while_writing we loosely refer to this as the top of the
	loop (.) sort_of right above the loop body and this is the bottom of
	the loop .
%mor:	pro:sub|we adv|loose&dadj-LY v|refer prep|to pro:dem|this prep|as
	det:art|the n|top prep|of det:art|the n|loop adv|sort_of adv|right
	prep|above det:art|the n|loop n|body coord|and pro:dem|this
	cop|be&3S det:art|the n|bottom prep|of det:art|the n|loop .
%gra:	1|3|SUBJ 2|3|JCT 3|0|ROOT 4|3|JCT 5|4|POBJ 6|3|JCT 7|8|DET 8|6|POBJ
	9|8|NJCT 10|11|DET 11|9|POBJ 12|3|JCT 13|14|JCT 14|12|JCT 15|17|DET
	16|17|MOD 17|14|POBJ 18|20|LINK 19|20|SUBJ 20|3|CJCT 21|22|DET 22|20|PRED
	23|22|NJCT 24|25|DET 25|23|POBJ 26|3|PUNCT
*S1:	&=pause_while_writing a task to do (.) I check some condition .
%mor:	det:art|a n|task inf|to v|do pro:sub|I v|check qn|some n|condition
	.
%gra:	1|2|DET 2|0|INCROOT 3|4|INF 4|2|XMOD 5|6|SUBJ 6|4|COMP 7|8|QUANT
	8|6|OBJ 9|2|PUNCT
*S1:	and that can depend on (.) quantities that I've just calculated
	these are +//.
%mor:	coord|and comp|that mod|can v|depend prep|on n|quantity-PL
	pro:rel|that pro:sub|I~aux|have adv|just part|calculate-PASTP
	det:dem|these cop|be&PRES +//.
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|JCT 6|5|POBJ 7|11|LINK 8|11|SUBJ
	9|11|AUX 10|11|JCT 11|6|CMOD 12|13|DET 13|11|COMP 14|4|PUNCT
*S1:	this condition (.) isn't determined (.) a_priori it's determined as
	the program runs .
%mor:	det:dem|this n|condition aux|be&3S~neg|not part|determine-PASTP
	adj|a_priori pro:per|it~aux|be&3S part|determine-PASTP prep|as
	det:art|the n|program v|run-3S .
%gra:	1|2|DET 2|5|SUBJ 3|5|AUX 4|3|NEG 5|0|ROOT 6|5|PRED 7|9|SUBJ 8|9|AUX
	9|6|CMOD 10|13|JCT 11|12|DET 12|13|SUBJ 13|9|CJCT 14|5|PUNCT
*S1:	I come into this loop I check the condition .
%mor:	pro:sub|I v|come prep|into det:dem|this n|loop pro:sub|I v|check
	det:art|the n|condition .
%gra:	1|2|SUBJ 2|7|CJCT 3|2|JCT 4|5|DET 5|3|POBJ 6|7|SUBJ 7|0|ROOT 8|9|DET
	9|7|OBJ 10|7|PUNCT
*S1:	if it's true (.) I do this work whatever it is .
%mor:	conj|if pro:per|it~cop|be&3S n|true pro:sub|I v|do det:dem|this
	n|work pro:int|whatever pro:per|it cop|be&3S .
%gra:	1|3|LINK 2|3|SUBJ 3|6|CJCT 4|3|PRED 5|6|SUBJ 6|0|ROOT 7|8|DET 8|6|OBJ
	9|11|LINK 10|11|SUBJ 11|6|COMP 12|6|PUNCT
*S1:	<okay and> [?] I come down to the bottom of the loop (.) I come
	back to the top of the loop (.) and I check the condition again .
%mor:	co|okay coord|and pro:sub|I v|come adv|down prep|to det:art|the
	n|bottom prep|of det:art|the n|loop pro:sub|I v|come adv|back
	prep|to det:art|the n|top prep|of det:art|the n|loop coord|and
	pro:sub|I v|check det:art|the n|condition adv|again .
%gra:	1|4|COM 2|4|LINK 3|4|SUBJ 4|13|CJCT 5|4|JCT 6|4|JCT 7|8|DET 8|6|POBJ
	9|8|NJCT 10|11|DET 11|9|POBJ 12|13|SUBJ 13|0|ROOT 14|13|JCT 15|13|JCT
	16|17|DET 17|15|POBJ 18|17|NJCT 19|20|DET 20|18|POBJ 21|23|LINK 22|23|SUBJ
	23|13|CJCT 24|25|DET 25|23|OBJ 26|23|JCT 27|13|PUNCT
*S1:	and if it's true I do this .
%mor:	coord|and conj|if pro:per|it~cop|be&3S n|true pro:sub|I v|do
	pro:dem|this .
%gra:	1|7|LINK 2|4|LINK 3|4|SUBJ 4|7|CJCT 5|4|PRED 6|7|SUBJ 7|0|ROOT 8|7|OBJ
	9|7|PUNCT
*S1:	do this work .
%mor:	v|do det:dem|this n|work .
%gra:	1|0|ROOT 2|3|DET 3|1|OBJ 4|1|PUNCT
*S1:	I get to the bottom of the loop I come back to the top and I check
	this condition again and if it's true (.) I do this .
%mor:	pro:sub|I v|get prep|to det:art|the n|bottom prep|of det:art|the
	n|loop pro:sub|I v|come adv|back prep|to det:art|the n|top coord|and
	pro:sub|I v|check det:dem|this n|condition adv|again coord|and
	conj|if pro:per|it~cop|be&3S n|true pro:sub|I v|do pro:dem|this .
%gra:	1|2|SUBJ 2|10|CJCT 3|2|JCT 4|5|DET 5|3|POBJ 6|5|NJCT 7|8|DET 8|6|POBJ
	9|10|SUBJ 10|27|CJCT 11|10|JCT 12|10|JCT 13|14|DET 14|12|POBJ 15|17|LINK
	16|17|SUBJ 17|10|CJCT 18|19|DET 19|17|OBJ 20|19|JCT 21|19|CONJ
	22|24|LINK 23|24|SUBJ 24|21|COORD 25|24|PRED 26|27|SUBJ 27|0|ROOT 28|27|OBJ
	29|27|PUNCT
*S1:	so I keep doing this over and over (.) until eventually I do this I
	come to the bottom of the loop (.) come back up here and the
	condition is false .
%mor:	co|so pro:sub|I v|keep part|do-PRESP pro:dem|this adv|over
	coord|and prep|over prep|until adv|eventual&dadj-LY pro:sub|I v|do
	det:dem|this pro:sub|I v|come prep|to det:art|the n|bottom prep|of
	det:art|the n|loop v|come adv|back prep|up n|here coord|and
	det:art|the n|condition cop|be&3S adv|false .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|COMP 5|4|OBJ 6|5|NJCT 7|6|CONJ 8|7|COORD
	9|12|LINK 10|12|JCT 11|12|SUBJ 12|8|CPOBJ 13|15|DET 14|15|SUBJ
	15|12|COMP 16|15|JCT 17|18|DET 18|16|POBJ 19|18|NJCT 20|21|DET 21|19|POBJ
	22|15|CJCT 23|22|JCT 24|22|JCT 25|24|POBJ 26|29|LINK 27|28|DET 28|29|SUBJ
	29|22|CJCT 30|29|JCT 31|3|PUNCT
*S1:	then I don't do this I'm just done with this whole +...
%mor:	adv:tem|then pro:sub|I mod|do~neg|not v|do det:dem|this
	pro:sub|I~aux|be&1S adv|just part|do&PASTP prep|with det:dem|this
	n|whole +...
%gra:	1|5|JCT 2|5|SUBJ 3|5|AUX 4|3|NEG 5|0|ROOT 6|5|OBJ 7|10|SUBJ 8|10|AUX
	9|10|JCT 10|6|CMOD 11|10|JCT 12|13|DET 13|11|POBJ 14|5|PUNCT
*S1:	construct and I go on to whatever my next instruction is in my
	algorithm .
%mor:	v|construct coord|and pro:sub|I v|go adv|on prep|to
	pro:int|whatever det:poss|my adj|next n|instruction cop|be&3S
	prep|in det:poss|my n|algorithm .
%gra:	1|0|ROOT 2|4|LINK 3|4|SUBJ 4|1|CJCT 5|4|JCT 6|4|JCT 7|11|LINK 8|10|DET
	9|10|MOD 10|11|SUBJ 11|6|CPOBJ 12|11|JCT 13|14|DET 14|12|POBJ 15|1|PUNCT
*S1:	so I keep executing this loop xxx as long as the condition is true
	(.) at the top of the loop .
%mor:	co|so pro:sub|I v|keep part|execute-PRESP det:dem|this n|loop
	prep|as adv|long prep|as det:art|the n|condition cop|be&3S adj|true
	prep|at det:art|the n|top prep|of det:art|the n|loop .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|COMP 5|6|DET 6|12|SUBJ 7|8|COORD 8|12|JCT
	9|12|JCT 10|11|DET 11|9|POBJ 12|4|COMP 13|12|PRED 14|13|JCT 15|16|DET
	16|14|POBJ 17|16|NJCT 18|19|DET 19|17|POBJ 20|3|PUNCT
*S1:	doesn't matter if the (.) condition becomes false in the middle of
	the loop (.) I only check it at the top .
%mor:	mod|do&3S~neg|not v|matter comp|if det:art|the n|condition
	cop|become-3S adv|false prep|in det:art|the n|middle prep|of
	det:art|the n|loop pro:sub|I qn|only n|check pro:per|it prep|at
	det:art|the n|top .
%gra:	1|3|AUX 2|1|NEG 3|0|ROOT 4|7|LINK 5|6|DET 6|7|SUBJ 7|3|COMP 8|7|JCT
	9|7|JCT 10|11|DET 11|9|POBJ 12|11|NJCT 13|14|DET 14|12|POBJ 15|3|PUNCT
	16|17|QUANT 17|15|OBJ 18|17|OBJ 19|18|JCT 20|21|DET 21|19|POBJ 22|15|PUNCT
*S1:	that sometimes leads to some confusion .
%mor:	pro:dem|that adv|sometimes v|lead-3S prep|to qn|some n|confusion .
%gra:	1|3|SUBJ 2|3|JCT 3|0|ROOT 4|3|JCT 5|6|QUANT 6|4|POBJ 7|3|PUNCT
*S1:	only check right here at the top (.) doesn't matter what it does in
	the middle +...
%mor:	qn|only n|check adv|right adv|here prep|at det:art|the n|top
	mod|do&3S~neg|not n|matter pro:int|what pro:per|it mod|do&3S prep|in
	det:art|the n|middle +...
%gra:	1|2|QUANT 2|0|INCROOT 3|4|JCT 4|10|JCT 5|4|JCT 6|7|DET 7|5|POBJ
	8|10|AUX 9|8|NEG 10|2|CONJ 11|10|COORD 12|11|CONJ 13|12|COORD 14|13|JCT
	15|16|DET 16|14|POBJ 17|2|PUNCT
*S1:	such a beast easily leads to the dreaded endless loop .
%mor:	qn|such det:art|a n|beast adv|ease&dadj-Y-LY v|lead-3S prep|to
	det:art|the part|dread-PASTP adj|end&dn-LESS n|loop .
%gra:	1|3|QUANT 2|3|DET 3|5|SUBJ 4|5|JCT 5|0|ROOT 6|5|JCT 7|10|DET 8|10|MOD
	9|10|MOD 10|6|POBJ 11|5|PUNCT
*S1:	I could very easily (.) have some condition like while one is equal
	to one do this .
%mor:	pro:sub|I mod|could adv|very adv|ease&dadj-Y-LY v|have qn|some
	n|condition prep|like n|while pro:indef|one cop|be&3S n|equal
	prep|to det:num|one v|do pro:dem|this .
%gra:	1|5|SUBJ 2|5|AUX 3|4|JCT 4|5|JCT 5|0|ROOT 6|7|QUANT 7|11|JCT 8|7|NJCT
	9|8|POBJ 10|11|SUBJ 11|5|COMP 12|11|PRED 13|12|NJCT 14|15|SUBJ 15|13|POBJ
	16|15|OBJ 17|5|PUNCT
*S1:	then (.) I just do this forever .
%mor:	adv:tem|then pro:sub|I adv|just v|do det:dem|this adv:tem|forever .
%gra:	1|4|JCT 2|4|SUBJ 3|4|JCT 4|0|ROOT 5|6|DET 6|4|JCT 7|4|PUNCT
*S1:	because one is never not equal to one (.) so (.) my condition's
	always true I just stay here forever .
%mor:	conj|because det:num|one aux|be&3S adv|never neg|not n|equal
	prep|to det:num|one adv|so co|my n|condition~cop|be&3S adv|always
	adj|true pro:sub|I adv|just v|stay adv|here adv:tem|forever .
%gra:	1|12|LINK 2|12|SUBJ 3|12|AUX 4|5|JCT 5|3|NEG 6|12|SUBJ 7|12|JCT
	8|11|QUANT 9|10|JCT 10|11|MOD 11|12|SUBJ 12|17|CJCT 13|14|JCT 14|12|PRED
	15|17|SUBJ 16|17|JCT 17|0|ROOT 18|19|JCT 19|17|JCT 20|17|PUNCT
*S1:	my program never exits &-uh in the old days that sucked up your CPU
	allocation and [/] and you &-uh crashed and burned and (.) it was
	real money .
%mor:	det:poss|my n|program adv|never n|exit-PL prep|in det:art|the
	adj|old n|day-PL pro:rel|that v|suck-PAST adv|up det:poss|your
	n:prop|CPU n|allocate&dv-TION coord|and pro:per|you v|crash-PAST
	coord|and v|burn-PAST coord|and pro:per|it cop|be&PAST&13S adj|real
	n|money .
%gra:	1|2|DET 2|4|SUBJ 3|4|JCT 4|0|INCROOT 5|4|NJCT 6|8|DET 7|8|MOD 8|5|POBJ
	9|10|LINK 10|8|CMOD 11|10|JCT 12|14|DET 13|14|MOD 14|10|OBJ 15|17|LINK
	16|17|SUBJ 17|4|CJCT 18|4|CONJ 19|18|COORD 20|22|LINK 21|22|SUBJ
	22|4|CJCT 23|24|MOD 24|22|PRED 25|4|PUNCT
*S1:	these days your computer just sits there and people +...
%mor:	det:dem|these n|day-PL det:poss|your n|compute&dv-AGT adj|just
	v|sit-3S adv|there coord|and n|person&PL +...
%gra:	1|2|DET 2|6|JCT 3|4|DET 4|6|SUBJ 5|6|JCT 6|0|ROOT 7|6|JCT 8|6|CONJ
	9|8|COORD 10|6|PUNCT
*S1:	loosely say things like it's locked up (.) well it's not locked up
	it's just (.) doing that over and over .
%mor:	adv|loose&dadj-LY co|say n|thing-PL co|like pro:per|it~aux|be&3S
	part|lock-PASTP adv|up adv|well pro:per|it~aux|be&3S neg|not
	part|lock-PASTP adv|up pro:per|it~aux|be&3S adv|just part|do-PRESP
	comp|that adv|over coord|and adv|over .
%gra:	1|2|JCT 2|7|COM 3|7|JCT 4|3|COM 5|7|SUBJ 6|7|AUX 7|0|ROOT 8|7|JCT
	9|7|JCT 10|13|SUBJ 11|13|AUX 12|11|NEG 13|7|XJCT 14|13|JCT 15|18|SUBJ
	16|18|AUX 17|18|JCT 18|13|XJCT 19|18|OBJ 20|19|JCT 21|20|CONJ 22|21|COORD
	23|7|PUNCT
*S1:	&=pause_while_erasing_board computers love to do things over and
	over .
%mor:	n|compute&dv-AGT-PL n|love inf|to v|do n|thing-PL adv|over
	coord|and adv|over .
%gra:	1|2|MOD 2|0|ROOT 3|4|INF 4|2|XMOD 5|4|OBJ 6|4|JCT 7|2|CONJ 8|7|COORD
	9|2|PUNCT
*S1:	&=pause_while_erasing_board those semantics again +...
%mor:	pro:dem|those n:pt|semantics adv|again +...
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|2|PUNCT
*S1:	this body is executed over and over .
%mor:	pro:dem|this n|body aux|be&3S part|execute-PASTP adv|over coord|and
	adv|over .
%gra:	1|2|DET 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|JCT 6|4|CONJ 7|6|COORD 8|4|PUNCT
*S1:	&=pause_while_writing until the condition is false at the top .
%mor:	conj|until det:art|the n|condition cop|be&3S adv|false prep|at
	det:art|the n|top .
%gra:	1|4|LINK 2|3|DET 3|4|SUBJ 4|0|ROOT 5|4|JCT 6|4|JCT 7|8|DET 8|6|POBJ
	9|4|PUNCT
*S1:	&=pause_while_writing I don't know what word that is but &s it's
	interesting .
%mor:	pro:sub|I mod|do~neg|not v|know det:int|what n|word pro:rel|that
	cop|be&3S conj|but pro:per|it~cop|be&3S adj|interesting .
%gra:	1|4|SUBJ 2|4|AUX 3|2|NEG 4|0|ROOT 5|6|DET 6|4|OBJ 7|8|LINK 8|6|CMOD
	9|11|LINK 10|11|SUBJ 11|8|PRED 12|11|PRED 13|4|PUNCT
*S1:	&=laughs:multiple &=pause_while_writing if that condition is always
	true this loop runs forever .
%mor:	conj|if det:dem|that n|condition cop|be&3S adv|always adj|true
	det:dem|this n|loop v|run-3S adv:tem|forever .
%gra:	1|4|LINK 2|3|DET 3|4|SUBJ 4|9|CJCT 5|6|JCT 6|4|PRED 7|8|DET 8|9|SUBJ
	9|0|ROOT 10|9|JCT 11|9|PUNCT
*S1:	&=pause_while_writing a condition that's always true is for example
	one equals one (.) or lots_of others .
%mor:	det:art|a n|condition pro:rel|that~cop|be&3S adv|always adj|true
	cop|be&3S prep|for ex#adj|ample pro:indef|one v|equal-3S det:num|one
	coord|or qn|lots_of n:pt|others .
%gra:	1|2|DET 2|7|SUBJ 3|4|LINK 4|2|CMOD 5|6|JCT 6|4|PRED 7|0|ROOT 8|7|JCT
	9|11|LINK 10|11|SUBJ 11|8|POBJ 12|11|OBJ 13|12|CONJ 14|15|QUANT
	15|13|COORD 16|7|PUNCT
*S1:	it's very easy to (.) trap yourself .
%mor:	pro:per|it~cop|be&3S adv|very adj|ease&dn-Y inf|to v|trap
	pro:refl|yourself .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|JCT 4|2|PRED 5|6|INF 6|4|XMOD 7|6|OBJ 8|2|PUNCT
*S1:	<you have> [?] you have to watch for that very carefully .
%mor:	pro:per|you v|have pro:per|you v|have prep|to n|watch prep|for
	pro:dem|that adv|very adj|care&dn-FUL-LY .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|SUBJ 4|2|COMP 5|4|JCT 6|5|POBJ 7|4|JCT 8|7|POBJ
	9|10|JCT 10|4|JCT 11|2|PUNCT
*S1:	the loop will run forever (.) unless (.) maybe I can have an escape
	hatch .
%mor:	det:art|the n|loop mod|will v|run adv:tem|forever conj|unless
	adv|maybe pro:sub|I mod|can v|have det:art|a n|escape n|hatch .
%gra:	1|2|DET 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|JCT 6|10|LINK 7|10|JCT 8|10|SUBJ
	9|10|AUX 10|4|CJCT 11|13|DET 12|13|MOD 13|10|OBJ 14|4|PUNCT
*S1:	&=pause_while_writing that (.) most languages provide &-um is a way
	to jump out_of the middle of this loop .
%mor:	adv|that qn|most n|language-PL v|provide aux|be&3S det:art|a n|way
	inf|to v|jump prep|out_of det:art|the n|middle prep|of det:dem|this
	n|loop .
%gra:	1|2|JCT 2|3|QUANT 3|4|SUBJ 4|9|SUBJ 5|9|AUX 6|7|DET 7|9|SUBJ 8|9|INF
	9|0|ROOT 10|9|JCT 11|12|DET 12|10|POBJ 13|12|NJCT 14|15|DET 15|13|POBJ
	16|9|PUNCT
*S1:	and this is called breaking out_of the loop .
%mor:	coord|and pro:dem|this aux|be&3S part|call-PASTP part|break-PRESP
	prep|out_of det:art|the n|loop .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|XJCT 6|5|JCT 7|8|DET 8|6|POBJ
	9|4|PUNCT
*S1:	&=pause_while_writing (be)cause we break out_of the middle of the
	loop .
%mor:	conj|because pro:sub|we v|break prep|out_of det:art|the n|middle
	prep|of det:art|the n|loop .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|6|DET 6|4|POBJ 7|6|NJCT 8|9|DET
	9|7|POBJ 10|3|PUNCT
*S1:	&=pause_while_writing somehow .
%mor:	adv|somehow .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	&=pause_while_writing and frequently we want to write code that
	does that I'll show you a sample of a code that does that .
%mor:	coord|and adv|frequent&dadj-LY pro:sub|we v|want inf|to v|write
	n|code pro:rel|that mod|do&3S adv|that pro:sub|I~mod|will v|show
	pro:per|you det:art|a n|sample prep|of det:art|a n|code pro:rel|that
	mod|do&3S pro:dem|that .
%gra:	1|4|LINK 2|4|JCT 3|4|SUBJ 4|0|ROOT 5|6|INF 6|4|COMP 7|6|OBJ 8|13|LINK
	9|13|AUX 10|13|JCT 11|13|SUBJ 12|13|AUX 13|7|CMOD 14|13|OBJ2 15|16|DET
	16|13|OBJ 17|16|NJCT 18|19|DET 19|17|POBJ 20|22|LINK 21|22|AUX 22|19|CMOD
	23|4|PUNCT
*S1:	and so the general picture is I do this as long as this condition
	is true (.) but I might have an escape hatch in here in the middle
	someplace (.) where I might wanna say boy things are all
	bollixed@n$part up let's quit out_of +//.
%mor:	coord|and co|so det:art|the n|general n|picture cop|be&3S pro:sub|I
	v|do pro:dem|this adv|as adj|long adv|as det:dem|this n|condition
	cop|be&3S n|true conj|but pro:sub|I mod|might v|have det:art|a
	n|escape n|hatch prep|in n|here prep|in det:art|the n|middle
	adv|someplace pro:int|where pro:sub|I mod|might v|want~inf|to co|say
	co|boy n|thing-PL cop|be&PRES adv|all part|bollixed adv|up
	v|let~pro:obj|us v|quit&ZERO prep|out_of +//.
%gra:	1|6|LINK 2|6|COM 3|5|DET 4|5|MOD 5|6|SUBJ 6|8|CJCT 7|8|SUBJ 8|0|ROOT
	9|8|OBJ 10|11|COORD 11|16|MOD 12|14|COORD 13|14|DET 14|11|ENUM 15|16|MOD
	16|8|OBJ 17|20|LINK 18|20|SUBJ 19|20|AUX 20|8|CJCT 21|23|DET 22|23|MOD
	23|20|OBJ 24|20|JCT 25|24|POBJ 26|25|NJCT 27|28|DET 28|26|POBJ 29|20|JCT
	30|33|LINK 31|33|SUBJ 32|33|AUX 33|29|CPOBJ 34|35|INF 35|38|COM 36|37|COM
	37|38|SUBJ 38|33|COMP 39|40|JCT 40|38|PRED 41|40|JCT 42|40|ENUM
	43|42|OBJ 44|42|COMP 45|44|JCT 46|8|PUNCT
*S1:	let's quit this it's not working and I might have some way to jump
	out .
%mor:	v|let~pro:obj|us v|quit&ZERO pro:dem|this pro:per|it~aux|be&3S
	neg|not part|work-PRESP coord|and pro:sub|I mod|might v|have qn|some
	adv|way inf|to v|jump adv|out .
%gra:	1|0|ROOT 2|1|OBJ 3|1|COMP 4|3|OBJ 5|8|SUBJ 6|8|AUX 7|6|NEG 8|3|COMP
	9|12|LINK 10|12|SUBJ 11|12|AUX 12|8|CJCT 13|16|QUANT 14|16|JCT 15|16|INF
	16|12|COMP 17|16|JCT 18|1|PUNCT
*S1:	we'll see in C there's a statement called break (.) that does
	exactly that +...
%mor:	pro:sub|we~mod|will v|see prep|in n:prop|C
	pro:exist|there~cop|be&3S det:art|a n|state&dv-MENT part|call-PASTP
	n|break pro:rel|that mod|do&3S adv|exact&dadj-LY pro:dem|that +...
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|JCT 5|4|POBJ 6|7|SUBJ 7|3|CJCT 8|9|DET
	9|11|MOD 10|11|MOD 11|7|PRED 12|15|LINK 13|15|AUX 14|15|JCT 15|11|OM
	16|3|PUNCT
*S1:	let's write an algorithm with a while@q loop .
%mor:	v|let~pro:obj|us v|write det:art|a n|algorithm prep|with det:art|a
	meta|while n|loop .
%gra:	1|0|ROOT 2|3|SUBJ 3|1|COMP 4|5|DET 5|3|OBJ 6|3|JCT 7|9|DET 8|9|MOD
	9|6|POBJ 10|1|PUNCT
*S1:	&=pause_while_writing I'm gonna write an algorithm to check
	primeness of a number .
%mor:	pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|write det:art|a
	n|algorithm prep|to n|check n|prime&dadj-NESS prep|of det:art|a
	v|number .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|INF 5|3|COMP 6|7|DET 7|5|OBJ 8|5|JCT
	9|10|MOD 10|8|POBJ 11|10|NJCT 12|13|DET 13|11|POBJ 14|3|PUNCT
*S1:	is primeness a word +..?
%mor:	aux|be&3S n|prime&dadj-NESS det:art|a n|word +..?
%gra:	1|0|INCROOT 2|4|MOD 3|4|DET 4|1|PRED 5|1|PUNCT
*S1:	well I guess it's +//.
%mor:	co|well pro:sub|I v|guess pro:per|it~cop|be&3S +//.
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|5|SUBJ 5|3|COMP 6|3|PUNCT
*S1:	I guess it is a word (be)cause it's being tape recorded and it'll
	be put out in this big &-uh compendium and everything so primeness
	is now a word .
%mor:	pro:sub|I v|guess pro:per|it cop|be&3S det:art|a n|word
	conj|because pro:per|it~cop|be&3S n|being n|tape v|record-PAST
	coord|and pro:per|it~mod|will aux|be part|put&PASTP adv|out prep|in
	det:dem|this adj|big n|compendium coord|and pro:indef|everything
	conj|so n|prime&dadj-NESS cop|be&3S adv|now det:art|a n|word .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|SUBJ 4|2|COMP 5|6|DET 6|4|PRED 7|9|LINK 8|9|SUBJ
	9|12|CJCT 10|11|MOD 11|9|PRED 12|2|COMP 13|17|LINK 14|17|SUBJ 15|17|AUX
	16|17|AUX 17|12|COMP 18|17|JCT 19|17|JCT 20|22|DET 21|22|MOD 22|19|POBJ
	23|17|CONJ 24|23|COORD 25|27|LINK 26|27|SUBJ 27|2|CJCT 28|27|JCT
	29|30|DET 30|28|POBJ 31|2|PUNCT
*S1:	&=pause_while_writing it's my word so I can spell it any way I damn
	well please .
%mor:	pro:per|it~cop|be&3S det:poss|my n|word conj|so pro:sub|I mod|can
	v|spell pro:per|it qn|any n|way pro:sub|I v|damn adv|well v|please .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|8|LINK 6|8|SUBJ 7|8|AUX 8|13|CJCT
	9|13|SUBJ 10|11|QUANT 11|13|JCT 12|13|SUBJ 13|2|CJCT 14|15|JCT
	15|13|COMP 16|2|PUNCT
*S1:	&=laughs:multiple I'm gonna have a number I'm gonna call it (.) let
	me be consistent here &=pause_while_reading I have a number I'm
	going to call it num ooh how original .
%mor:	pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|have det:art|a n|number
	pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|call pro:per|it
	v|let&ZERO pro:obj|me cop|be adj|consistent adv|here pro:sub|I
	v|have det:art|a n|number pro:sub|I~aux|be&1S part|go-PRESP inf|to
	v|call pro:per|it co|num v|ooh pro:int|how adj|origin&dn-AL .
%gra:	1|3|SUBJ 2|3|AUX 3|20|XJCT 4|5|INF 5|3|COMP 6|7|DET 7|5|OBJ 8|10|SUBJ
	9|10|AUX 10|7|CMOD 11|12|INF 12|10|COMP 13|14|SUBJ 14|12|COMP 15|16|SUBJ
	16|14|COMP 17|16|PRED 18|16|JCT 19|20|SUBJ 20|0|ROOT 21|22|DET 22|20|OBJ
	23|25|SUBJ 24|25|AUX 25|22|CMOD 26|27|INF 27|25|COMP 28|27|OBJ
	29|30|COM 30|20|CJCT 31|32|JCT 32|30|COMP 33|20|PUNCT
*S1:	&=pause_while_writing I'm gonna check the primeness of num .
%mor:	pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|check det:art|the
	n|prime&dadj-NESS prep|of co|num .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|INF 5|3|COMP 6|7|DET 7|5|OBJ 8|7|NJCT
	9|8|POBJ 10|3|PUNCT
*S1:	sounds like the title of a science fiction novel .
%mor:	n|sound-PL prep|like det:art|the n|title prep|of det:art|a
	n|science n|fiction n|novel .
%gra:	1|0|INCROOT 2|1|NJCT 3|4|DET 4|2|POBJ 5|4|NJCT 6|9|DET 7|9|MOD 8|9|MOD
	9|5|POBJ 10|1|PUNCT
*S1:	how am I gonna do this ?
%mor:	pro:int|how cop|be&1S pro:sub|I part|go-PRESP~inf|to v|do
	pro:dem|this ?
%gra:	1|2|LINK 2|0|ROOT 3|2|PRED 4|3|XMOD 5|6|INF 6|4|COMP 7|6|OBJ 8|2|PUNCT
*S1:	I'm gonna write an algorithm to do this .
%mor:	pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|write det:art|a
	n|algorithm inf|to v|do pro:dem|this .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|INF 5|3|COMP 6|7|DET 7|5|OBJ 8|9|INF
	9|5|XJCT 10|9|OBJ 11|3|PUNCT
*S1:	I'm gonna first deal with the special case +...
%mor:	pro:sub|I~aux|be&1S part|go-PRESP~inf|to adj|first n|deal prep|with
	det:art|the n|special n|case +...
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|INF 5|6|MOD 6|3|OBJ 7|6|NJCT 8|10|DET
	9|10|MOD 10|7|POBJ 11|3|PUNCT
*S1:	if num is one (.) it's prime .
%mor:	conj|if co|num aux|be&3S det:num|one pro:per|it~cop|be&3S adj|prime
	.
%gra:	1|4|LINK 2|4|COM 3|4|AUX 4|6|CJCT 5|6|SUBJ 6|0|ROOT 7|6|PRED 8|6|PUNCT
*S1:	&=pause_while_writing okay and I'll be done (.) and I'll stop .
%mor:	co|okay coord|and pro:sub|I~mod|will aux|be part|do&PASTP coord|and
	pro:sub|I~mod|will v|stop .
%gra:	1|6|COM 2|6|LINK 3|6|SUBJ 4|6|AUX 5|6|AUX 6|0|ROOT 7|10|LINK 8|10|SUBJ
	9|10|AUX 10|6|CJCT 11|6|PUNCT
*S1:	&=pause_while_writing if num is not one I'm gonna do something else
	down here .
%mor:	conj|if co|num aux|be&3S neg|not det:num|one pro:sub|I~aux|be&1S
	part|go-PRESP~inf|to v|do pro:indef|something post|else prep|down
	n|here .
%gra:	1|5|LINK 2|5|COM 3|5|AUX 4|3|NEG 5|8|CJCT 6|8|SUBJ 7|8|AUX 8|0|ROOT
	9|10|INF 10|8|COMP 11|10|OBJ 12|11|PQ 13|10|JCT 14|13|POBJ 15|8|PUNCT
*S1:	so otherwise num is not one .
%mor:	adv|so adv|otherwise co|num aux|be&3S neg|not pro:indef|one .
%gra:	1|2|JCT 2|6|JCT 3|6|COM 4|6|AUX 5|4|NEG 6|0|INCROOT 7|6|PUNCT
*S1:	what I'm gonna do (.) it's not the slickest thing to do when
	testing for primeness but (.) it works and it will illustrate the
	idea (.) I'm just gonna take every possible divisor .
%mor:	pro:int|what pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|do
	pro:per|it~cop|be&3S neg|not det:art|the adj|slick-SP n|thing inf|to
	v|do conj|when part|test-PRESP prep|for n|prime&dadj-NESS conj|but
	pro:per|it v|work-3S coord|and pro:per|it mod|will v|illustrate
	det:art|the n|idea pro:sub|I~aux|be&1S adv|just part|go-PRESP~inf|to
	v|take qn|every adj|possible n|divisor .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|6|INF 6|4|COMP 7|8|SUBJ 8|4|CJCT
	9|8|NEG 10|12|DET 11|12|MOD 12|8|PRED 13|14|INF 14|12|XMOD 15|14|OBJ
	16|15|XMOD 17|16|JCT 18|17|POBJ 19|21|LINK 20|21|SUBJ 21|31|CJCT 22|25|LINK
	23|25|SUBJ 24|25|AUX 25|21|COMP 26|27|DET 27|25|OBJ 28|31|SUBJ 29|31|AUX
	30|31|JCT 31|16|XJCT 32|33|INF 33|31|COMP 34|36|QUANT 35|36|MOD
	36|33|OBJ 37|4|PUNCT
*S1:	from num minus one (.) num minus two (.) all the way down to one
	(.) gonna call these D (.) and I'm gonna see if I can divide this
	number by (.) that divisor .
%mor:	prep|from co|num n|minus det:num|one co|num n|minus det:num|two
	adv|all det:art|the n|way adv|down prep|to det:num|one
	part|go-PRESP~inf|to v|call det:dem|these n:prop|D coord|and
	pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|see conj|if pro:sub|I
	mod|can v|divide det:dem|this n|number prep|by det:dem|that
	n|divisor .
%gra:	1|0|INCROOT 2|4|COM 3|4|MOD 4|6|QUANT 5|6|COM 6|1|POBJ 7|10|QUANT
	8|10|JCT 9|10|DET 10|6|OBJ 11|10|JCT 12|10|NJCT 13|12|POBJ 14|13|XMOD
	15|16|INF 16|14|COMP 17|18|DET 18|14|CJCT 19|22|LINK 20|22|SUBJ 21|22|AUX
	22|18|CMOD 23|24|INF 24|22|COMP 25|28|LINK 26|28|SUBJ 27|28|AUX 28|22|CJCT
	29|30|DET 30|28|OBJ 31|28|JCT 32|33|DET 33|31|POBJ 34|1|PUNCT
*S1:	if I can divide (.) num (.) by a divisor (.) and that divisor is
	not one (.) then the number is not prime (be)cause I just divided it
	by something .
%mor:	conj|if pro:sub|I mod|can v|divide co|num prep|by det:art|a
	n|divisor coord|and pro:dem|that n|divisor cop|be&3S neg|not
	det:num|one adv:tem|then det:art|the n|number cop|be&3S neg|not
	n|prime conj|because pro:sub|I adv|just v|divide-PAST pro:per|it
	prep|by pro:indef|something .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|COM 6|4|JCT 7|8|DET 8|6|POBJ
	9|12|LINK 10|11|DET 11|12|SUBJ 12|4|CJCT 13|12|NEG 14|18|SUBJ 15|18|JCT
	16|17|DET 17|18|SUBJ 18|12|PRED 19|18|NEG 20|18|PRED 21|24|LINK 22|24|SUBJ
	23|24|JCT 24|4|CJCT 25|24|OBJ 26|24|JCT 27|26|POBJ 28|4|PUNCT
*S1:	so let me set this up (.) D will be my divisor (.) I'll let it
	start (.) at num minus one (.) I don't wanna check num because I
	know num is divisible by num +...
%mor:	adv|so v|let&ZERO pro:obj|me n|set det:dem|this adv|up n:prop|D
	mod|will cop|be det:poss|my n|divisor pro:sub|I~mod|will v|let&ZERO
	pro:per|it v|start prep|at co|num prep|minus pro:indef|one pro:sub|I
	mod|do~neg|not v|want~inf|to v|check co|num conj|because pro:sub|I
	v|know co|num cop|be&3S adj|divisible prep|by co|num +...
%gra:	1|2|JCT 2|0|ROOT 3|2|OBJ2 4|2|OBJ 5|9|SUBJ 6|5|NJCT 7|6|POBJ 8|9|AUX
	9|4|CMOD 10|11|DET 11|9|PRED 12|14|SUBJ 13|14|AUX 14|11|CMOD 15|16|SUBJ
	16|14|COMP 17|16|JCT 18|24|COM 19|24|JCT 20|19|POBJ 21|24|SUBJ 22|24|AUX
	23|22|NEG 24|17|POBJ 25|26|INF 26|24|COMP 27|26|OBJ 28|30|LINK 29|30|SUBJ
	30|2|CJCT 31|32|COM 32|30|COMP 33|32|PRED 34|32|JCT 35|34|POBJ
	36|2|PUNCT
*S1:	&-um so I'll start one less (.) and then I'll do a while@q loop .
%mor:	adv|so pro:sub|I~mod|will v|start det:num|one adj|less coord|and
	adv:tem|then pro:sub|I~mod|will v|do det:art|a meta|while n|loop .
%gra:	1|4|JCT 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|6|QUANT 6|4|JCT 7|11|LINK 8|11|JCT
	9|11|SUBJ 10|11|AUX 11|4|CJCT 12|14|DET 13|14|MOD 14|11|OBJ 15|4|PUNCT
*S1:	while (.) num is not divided &=pause_while_writing by D (.) okay so
	there's my condition (.) while the number is not divisible by my
	divisor (.) check the next divisor (.) and I'll simply do that by
	saying (.) go down by one .
%mor:	conj|while co|num aux|be&3S neg|not part|divide-PASTP prep|by
	n:prop|D adj|okay adv|so pro:exist|there~cop|be&3S det:poss|my
	n|condition conj|while det:art|the n|number cop|be&3S neg|not
	adj|divisible prep|by det:poss|my n|divisor n|check det:art|the
	adj|next n|divisor coord|and pro:sub|I~mod|will adv|simple&dadj-LY
	v|do det:dem|that adv|by part|say-PRESP v|go adv|down adv|by
	det:num|one .
%gra:	1|5|LINK 2|5|COM 3|5|AUX 4|3|NEG 5|11|CJCT 6|5|JCT 7|6|POBJ 8|11|SUBJ
	9|11|JCT 10|11|SUBJ 11|0|ROOT 12|13|DET 13|11|PRED 14|17|LINK 15|16|DET
	16|17|SUBJ 17|11|CJCT 18|17|NEG 19|26|MOD 20|19|JCT 21|22|DET 22|23|MOD
	23|20|POBJ 24|26|DET 25|26|MOD 26|17|PRED 27|31|LINK 28|31|SUBJ 29|31|AUX
	30|31|JCT 31|26|CMOD 32|33|DET 33|31|JCT 34|31|XJCT 35|34|COMP
	36|35|JCT 37|38|JCT 38|35|JCT 39|11|PUNCT
*S1:	(0.7) so I'll come in here (.) let's give a an example (.) say num
	is ten (.) I'll come in here I'll say my first divisor is nine +...
%mor:	adv|so pro:sub|I~mod|will v|come prep|in n|here v|let~pro:obj|us
	v|give det:art|a det:art|a n|example co|say co|num aux|be&3S
	det:num|ten pro:sub|I~mod|will v|come prep|in n|here
	pro:sub|I~mod|will v|say det:poss|my adj|first n|divisor cop|be&3S
	det:num|nine +...
%gra:	1|4|JCT 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|JCT 6|5|POBJ 7|4|XJCT 8|7|OBJ
	9|7|COMP 10|12|DET 11|12|DET 12|24|SUBJ 13|16|COM 14|16|COM 15|16|AUX
	16|19|QUANT 17|19|SUBJ 18|19|AUX 19|24|CJCT 20|19|JCT 21|20|POBJ 22|24|SUBJ
	23|24|AUX 24|9|COMP 25|27|DET 26|27|MOD 27|28|SUBJ 28|24|COMP 29|28|PRED
	30|4|PUNCT
*S1:	is ten divisible by nine ?
%mor:	aux|be&3S det:num|ten adj|divisible prep|by det:num|nine ?
%gra:	1|0|INCROOT 2|3|QUANT 3|1|PRED 4|3|JCT 5|4|POBJ 6|1|PUNCT
*S1:	no +...
%mor:	co|no +...
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so num is not divisible by nine so do this go on down to the next
	divisor eight .
%mor:	co|so co|num aux|be&3S neg|not adj|divisible prep|by det:num|nine
	adv|so v|do pro:dem|this v|go adv|on adv|down prep|to det:art|the
	adj|next n|divisor det:num|eight .
%gra:	1|5|COM 2|5|COM 3|5|AUX 4|3|NEG 5|0|ROOT 6|5|JCT 7|6|POBJ 8|9|JCT
	9|5|ENUM 10|11|SUBJ 11|5|CMOD 12|11|JCT 13|11|JCT 14|11|JCT 15|17|DET
	16|17|MOD 17|18|MOD 18|14|POBJ 19|5|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	is ten divisible by eight ?
%mor:	aux|be&3S det:num|ten adj|divisible prep|by det:num|eight ?
%gra:	1|0|INCROOT 2|3|QUANT 3|1|PRED 4|3|JCT 5|4|POBJ 6|1|PUNCT
*S1:	no (.) go on down .
%mor:	co|no v|go adv|on adv|down .
%gra:	1|2|COM 2|0|ROOT 3|2|JCT 4|2|JCT 5|2|PUNCT
*S1:	eventually (.) it'll have counted down to is ten divisible by five
	?
%mor:	adv|eventual&dadj-LY pro:per|it~mod|will aux|have part|count-PASTP
	adv|down prep|to cop|be&3S det:num|ten adj|divisible prep|by
	det:num|five ?
%gra:	1|5|JCT 2|5|SUBJ 3|5|AUX 4|5|AUX 5|0|ROOT 6|5|JCT 7|5|JCT 8|7|POBJ
	9|10|QUANT 10|8|PRED 11|10|JCT 12|11|POBJ 13|5|PUNCT
*S1:	you betcha .
%mor:	pro:per|you co|betcha .
%gra:	1|2|SUBJ 2|0|INCROOT 3|2|PUNCT
*S1:	so I'll have (.) I'll (ha)ve come in I'll set D to five come to the
	top of the loop and I'll check this condition .
%mor:	adv|so pro:sub|I~mod|will aux|have pro:sub|I~mod|will aux|have
	part|come&PASTP adv|in pro:sub|I~mod|will n|set n:prop|D prep|to
	det:num|five v|come prep|to det:art|the n|top prep|of det:art|the
	n|loop coord|and pro:sub|I~mod|will v|check det:dem|this n|condition
	.
%gra:	1|8|JCT 2|8|SUBJ 3|8|AUX 4|8|AUX 5|8|SUBJ 6|8|AUX 7|8|AUX 8|0|ROOT
	9|8|JCT 10|12|SUBJ 11|12|AUX 12|8|OBJ 13|16|SUBJ 14|13|NJCT 15|14|POBJ
	16|12|CMOD 17|16|JCT 18|19|DET 19|17|POBJ 20|19|NJCT 21|22|DET 22|20|POBJ
	23|26|LINK 24|26|SUBJ 25|26|AUX 26|16|CJCT 27|28|DET 28|26|OBJ 29|8|PUNCT
*S1:	is ten divisible by five ?
%mor:	aux|be&3S det:num|ten adj|divisible prep|by det:num|five ?
%gra:	1|0|INCROOT 2|3|QUANT 3|1|PRED 4|3|JCT 5|4|POBJ 6|1|PUNCT
*S1:	yes .
%mor:	co|yes .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so the condition's not true num's not divisible by D and I'll fall
	out_of the loop .
%mor:	co|so det:art|the adj|condition&dn-POSS neg|not v|true
	on|num~cop|be&3S neg|not adj|divisible prep|by n:prop|D coord|and
	pro:sub|I~mod|will v|fall prep|out_of det:art|the n|loop .
%gra:	1|5|COM 2|3|DET 3|5|SUBJ 4|3|NEG 5|0|ROOT 6|7|SUBJ 7|5|COMP 8|7|NEG
	9|7|PRED 10|9|JCT 11|10|POBJ 12|15|LINK 13|15|SUBJ 14|15|AUX 15|7|CJCT
	16|15|JCT 17|18|DET 18|16|POBJ 19|5|PUNCT
*S1:	I'll be done .
%mor:	pro:sub|I~mod|will cop|be part|do&PASTP .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|PRED 5|3|PUNCT
*S1:	once I'm done (.) I just wanna find out what D is .
%mor:	adv|once pro:sub|I~aux|be&1S part|do&PASTP pro:sub|I adv|just
	v|want~inf|to v|find adv|out pro:int|what n:prop|D cop|be&3S .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|7|SUBJ 6|7|JCT 7|4|COMP 8|9|INF
	9|7|COMP 10|9|JCT 11|13|LINK 12|13|SUBJ 13|9|COMP 14|4|PUNCT
*S1:	if D is one (.) lemme not write it that way (.) lest it confuse
	with C syntax (.) then num was prime .
%mor:	conj|if n:prop|D cop|be&3S det:num|one v|let~pro:obj|me neg|not
	v|write pro:per|it adv|that adv|way conj|lest pro:per|it v|confuse
	prep|with n:prop|C n|syntax adv:tem|then co|num cop|be&PAST&13S
	adj|prime .
%gra:	1|3|LINK 2|3|SUBJ 3|5|CJCT 4|5|QUANT 5|0|ROOT 6|5|OBJ 7|8|NEG 8|5|COMP
	9|8|OBJ 10|8|JCT 11|8|JCT 12|14|LINK 13|14|SUBJ 14|8|CJCT 15|14|JCT
	16|17|MOD 17|20|SUBJ 18|20|JCT 19|20|COM 20|15|POBJ 21|20|PRED 22|5|PUNCT
*S1:	&=pause_while_writing otherwise it's not .
%mor:	adv|otherwise pro:per|it~cop|be&3S neg|not .
%gra:	1|3|JCT 2|3|SUBJ 3|0|ROOT 4|3|NEG 5|3|PUNCT
*S1:	if D is not one then D is bigger than one and (.) it's not prime .
%mor:	conj|if n:prop|D cop|be&3S neg|not det:num|one adv:tem|then
	n:prop|D cop|be&3S adj|big-CP prep|than det:num|one coord|and
	pro:per|it~cop|be&3S neg|not adj|prime .
%gra:	1|3|LINK 2|3|SUBJ 3|8|SUBJ 4|3|NEG 5|6|QUANT 6|8|JCT 7|8|SUBJ 8|0|ROOT
	9|8|PRED 10|14|JCT 11|14|SUBJ 12|11|CONJ 13|12|COORD 14|9|CMOD 15|14|NEG
	16|14|PRED 17|8|PUNCT
*S1:	oh I'll squeeze it in here .
%mor:	co|oh pro:sub|I~mod|will v|squeeze pro:per|it prep|in n|here .
%gra:	1|4|COM 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|OBJ 6|4|JCT 7|6|POBJ 8|4|PUNCT
*S1:	&=pause_while_writing otherwise not prime +...
%mor:	adv|otherwise neg|not adj|prime +...
%gra:	1|3|JCT 2|1|NEG 3|0|INCROOT 4|3|PUNCT
*S1:	the reason I'm guaranteed that this loop will finish is I know
	everything's divisible by one .
%mor:	det:art|the n|reason pro:sub|I~aux|be&1S part|guarantee-PASTP
	adv|that det:dem|this n|loop mod|will v|finish aux|be&3S pro:sub|I
	v|know adj|everything&dn-POSS adj|divisible adv|by det:num|one .
%gra:	1|2|DET 2|0|INCROOT 3|5|SUBJ 4|5|AUX 5|2|CMOD 6|10|JCT 7|8|DET
	8|10|SUBJ 9|10|AUX 10|5|COMP 11|13|AUX 12|13|SUBJ 13|10|COMP 14|17|MOD 15|17|MOD
	16|17|JCT 17|13|COMP 18|2|PUNCT
*S1:	eventually this divisor will be one (.) we'll have walked all the
	way down to one then I'll get out_of this loop because num is
	divisible by one .
%mor:	adv|eventual&dadj-LY det:dem|this n|divisor mod|will cop|be
	det:num|one pro:sub|we~mod|will aux|have part|walk-PASTP qn|all
	det:art|the n|way adv|down prep|to det:num|one adv:tem|then
	pro:sub|I~mod|will v|get prep|out_of det:dem|this n|loop
	conj|because co|num cop|be&3S adj|divisible adv|by det:num|one .
%gra:	1|5|JCT 2|3|DET 3|5|SUBJ 4|5|AUX 5|10|CJCT 6|5|PRED 7|10|SUBJ 8|10|AUX
	9|10|AUX 10|20|XJCT 11|13|QUANT 12|13|DET 13|10|OBJ 14|10|JCT 15|10|JCT
	16|17|QUANT 17|15|POBJ 18|20|SUBJ 19|20|AUX 20|0|ROOT 21|20|JCT
	22|23|DET 23|21|POBJ 24|20|JCT 25|26|COM 26|24|CPOBJ 27|26|PRED 28|29|JCT
	29|26|PRED 30|20|PUNCT
*S1:	so <I don't have> [/] I don't have any concern about the endless
	loop (.) and when I'm done I can +//.
%mor:	co|so pro:sub|I mod|do~neg|not v|have qn|any n|concern prep|about
	det:art|the adj|end&dn-LESS n|loop coord|and conj|when
	pro:sub|I~aux|be&1S part|do&PASTP pro:sub|I mod|can +//.
%gra:	1|5|COM 2|5|SUBJ 3|5|AUX 4|3|NEG 5|0|ROOT 6|7|QUANT 7|5|OBJ 8|5|JCT
	9|11|DET 10|11|MOD 11|8|POBJ 12|5|CONJ 13|16|LINK 14|16|SUBJ 15|16|AUX
	16|18|CJCT 17|18|SUBJ 18|12|COORD 19|5|PUNCT
*S1:	I actually have two interesting pieces of information .
%mor:	pro:sub|I adv|actual&dadj-LY v|have det:num|two adj|interesting
	n|piece-PL prep|of n|inform&dv-TION .
%gra:	1|3|SUBJ 2|3|JCT 3|0|ROOT 4|6|QUANT 5|6|MOD 6|3|OBJ 7|6|NJCT 8|7|POBJ
	9|3|PUNCT
*S1:	I know if this num is prime or not and I actually know its largest
	divisor .
%mor:	pro:sub|I v|know comp|if pro:dem|this co|num cop|be&3S adj|prime
	coord|or neg|not coord|and pro:sub|I adv|actual&dadj-LY v|know
	det:poss|its adj|large-SP n|divisor .
%gra:	1|2|SUBJ 2|0|ROOT 3|6|LINK 4|6|SUBJ 5|6|COM 6|2|COMP 7|6|PRED 8|6|CONJ
	9|8|NEG 10|13|LINK 11|13|SUBJ 12|13|JCT 13|8|COORD 14|16|DET 15|16|MOD
	16|13|OBJ 17|2|PUNCT
*S1:	(be)cause I fall out_of this loop soon as I find a divisor of num .
%mor:	conj|because pro:sub|I v|fall prep|out_of det:dem|this n|loop
	adv|soon conj|as pro:sub|I v|find det:art|a n|divisor prep|of co|num
	.
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|6|DET 6|4|POBJ 7|3|JCT 8|10|LINK
	9|10|SUBJ 10|3|CJCT 11|12|DET 12|10|OBJ 13|12|NJCT 14|13|POBJ 15|3|PUNCT
*S1:	so let's look at the lovely C code to do that
	&=pause_while_lowering_screen see if this is readable (.) otherwise
	xxx this looks okay .
%mor:	adv|so v|let~pro:obj|us v|look prep|at det:art|the adj|love&dn-LY
	n:prop|C n|code inf|to v|do pro:dem|that v|see comp|if pro:dem|this
	cop|be&3S adj|read&dv-ABLE adv|otherwise pro:dem|this v|look-3S
	adj|okay .
%gra:	1|2|JCT 2|0|ROOT 3|2|OBJ 4|2|COMP 5|4|JCT 6|9|DET 7|9|MOD 8|9|MOD
	9|5|POBJ 10|11|INF 11|4|XJCT 12|13|SUBJ 13|11|COMP 14|16|LINK 15|16|SUBJ
	16|13|COMP 17|16|PRED 18|20|JCT 19|20|SUBJ 20|16|CPRED 21|20|COMP 22|2|PUNCT
*S1:	okay here's some C code to do this +...
%mor:	co|okay pro:exist|here~cop|be&3S qn|some n:prop|C n|code inf|to
	v|do pro:dem|this +...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|6|QUANT 5|6|MOD 6|3|PRED 7|8|INF 8|6|XMOD
	9|8|OBJ 10|3|PUNCT
*S1:	and now I've gone from my algorithm to C code and that means I
	hafta deal with all of the (.) annoying details you hafta deal with
	(.) when you're writing (.) real code .
%mor:	coord|and adv|now pro:sub|I~aux|have part|go&PASTP prep|from
	det:poss|my n|algorithm prep|to n:prop|C n|code coord|and comp|that
	v|mean-3S pro:sub|I mod|have~inf|to v|deal prep|with pro:indef|all
	prep|of det:art|the part|annoy-PRESP n|detail-PL pro:per|you
	mod|have~inf|to v|deal prep|with pro:rel|when
	pro:per|you~aux|be&PRES part|write-PRESP adj|real n|code .
%gra:	1|5|LINK 2|5|JCT 3|5|SUBJ 4|5|AUX 5|0|ROOT 6|5|JCT 7|8|DET 8|6|POBJ
	9|5|JCT 10|11|MOD 11|9|POBJ 12|5|CONJ 13|14|LINK 14|12|COORD 15|18|SUBJ
	16|18|AUX 17|18|INF 18|14|COMP 19|18|JCT 20|28|JCT 21|20|NJCT 22|24|DET
	23|24|MOD 24|21|POBJ 25|28|SUBJ 26|28|AUX 27|28|INF 28|19|POBJ 29|28|JCT
	30|33|LINK 31|33|SUBJ 32|33|AUX 33|29|CMOD 34|35|MOD 35|33|OBJ 36|5|PUNCT
*S1:	so (.) I hafta (.) include header files like S T D I O dot H .
%mor:	co|so pro:sub|I mod|have~inf|to v|include n|header n|file-PL
	co|like n:prop|S n:prop|T n:prop|D pro:sub|I n:prop|O n|dot n:prop|H
	.
%gra:	1|5|COM 2|5|SUBJ 3|5|AUX 4|5|INF 5|0|ROOT 6|7|MOD 7|5|COMP 8|10|COM
	9|10|NAME 10|11|NAME 11|7|APP 12|5|JCT 13|14|MOD 14|12|POBJ 15|14|APP
	16|5|PUNCT
*S1:	I hafta declare a main function .
%mor:	pro:sub|I mod|have~inf|to v|declare det:art|a adj|main n|function .
%gra:	1|4|SUBJ 2|4|AUX 3|4|INF 4|0|ROOT 5|7|DET 6|7|MOD 7|4|OBJ 8|4|PUNCT
*S1:	I hafta do all this garbage which only exists for the computer and
	not for my algorithm +...
%mor:	pro:sub|I mod|have~inf|to v|do qn|all det:dem|this n|garbage
	pro:rel|which adv|only v|exist-3S prep|for det:art|the
	n|compute&dv-AGT coord|and neg|not prep|for det:poss|my n|algorithm
	+...
%gra:	1|4|SUBJ 2|4|AUX 3|4|INF 4|0|ROOT 5|7|QUANT 6|7|DET 7|4|OBJ 8|10|LINK
	9|10|JCT 10|7|CMOD 11|10|JCT 12|13|DET 13|11|POBJ 14|10|CONJ 15|16|NEG
	16|14|COORD 17|18|DET 18|16|POBJ 19|4|PUNCT
*S1:	I print out using print f@l I ask the code to &-uh +//.
%mor:	pro:sub|I v|print adv|out part|use-PRESP n|print n:let|f pro:sub|I
	v|ask det:art|the n|code prep|to +//.
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|2|XJCT 5|4|OBJ 6|4|ENUM 7|8|SUBJ 8|6|CMOD
	9|10|DET 10|8|OBJ 11|8|JCT 12|2|PUNCT
*S1:	the code asks for a positive number (.) uses scan f@l to get that
	number (0.5) scan f@l percent i@l ampersand num (.) so I read in a
	number right there (.) if the number's negative or zero (.) code
	stops (.) okay ?
%mor:	det:art|the n|code v|ask-3S prep|for det:art|a n|positive n|number
	n|use-PL n|scan n:let|f inf|to v|get adv|that n|number n|scan
	n:let|f n|percent n:let|i n|ampersand co|num co|so pro:sub|I
	v|read&ZERO prep|in det:art|a n|number adv|right adv|there comp|if
	det:art|the adj|number&dn-POSS n|negative coord|or det:num|zero
	n|code v|stop-3S co|okay ?
%gra:	1|2|DET 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|9|DET 6|7|MOD 7|9|MOD 8|9|MOD
	9|4|POBJ 10|9|NJCT 11|12|INF 12|10|COMP 13|12|JCT 14|15|MOD 15|13|POBJ
	16|19|MOD 17|19|MOD 18|19|MOD 19|15|APP 20|12|COM 21|23|COM 22|23|SUBJ
	23|10|OM 24|23|JCT 25|26|DET 26|24|POBJ 27|28|JCT 28|23|JCT 29|36|LINK
	30|32|DET 31|32|MOD 32|36|JCT 33|32|CONJ 34|33|COORD 35|36|SUBJ 36|23|COMP
	37|36|OBJ 38|3|PUNCT
*S1:	that's sort_of all just details of getting information in .
%mor:	pro:rel|that~cop|be&3S adv|sort_of qn|all adj|just n|detail-PL
	prep|of n:gerund|get-PRESP n|inform&dv-TION adv|in .
%gra:	1|2|LINK 2|0|ROOT 3|2|JCT 4|6|QUANT 5|6|MOD 6|3|POBJ 7|6|NJCT 8|7|POBJ
	9|8|OBJ 10|8|JCT 11|2|PUNCT
*S1:	here's where the real algorithm starts there's the special case .
%mor:	pro:exist|here~cop|be&3S pro:int|where det:art|the adj|real
	n|algorithm v|start-3S pro:exist|there~cop|be&3S det:art|the
	n|special n|case .
%gra:	1|2|SUBJ 2|0|ROOT 3|7|LINK 4|6|DET 5|6|MOD 6|7|SUBJ 7|2|CPRED 8|9|SUBJ
	9|7|COMP 10|12|DET 11|12|MOD 12|9|PRED 13|2|PUNCT
*S1:	if one equals num (.) print out that it's prime and we're done .
%mor:	conj|if pro:indef|one v|equal-3S co|num v|print adv|out comp|that
	pro:per|it~cop|be&3S n|prime coord|and pro:sub|we~aux|be&PRES
	part|do&PASTP .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|5|COM 5|3|COMP 6|5|JCT 7|9|LINK 8|9|SUBJ
	9|5|COMP 10|9|PRED 11|14|LINK 12|14|SUBJ 13|14|AUX 14|10|CJCT 15|3|PUNCT
*S1:	(0.10) here's the rest of it (0.6) oh look I don't have a laser but
	I have a red crayon &=laughs:multiple initialize the divisors first
	set D to num minus one (.) and then here's the while@q loop .
%mor:	pro:exist|here~cop|be&3S det:art|the n|rest prep|of pro:per|it
	co|oh v|look pro:sub|I mod|do~neg|not v|have det:art|a n|laser
	conj|but pro:sub|I v|have det:art|a n|red n|crayon
	v|initial&dadj-IZE det:art|the n|divisor-PL adj|first n|set n:prop|D
	prep|to co|num prep|minus det:num|one coord|and adv:tem|then
	pro:exist|here~cop|be&3S det:art|the meta|while n|loop .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|4|NJCT 6|5|POBJ 7|8|COM 8|2|CPRED
	9|12|SUBJ 10|12|AUX 11|10|NEG 12|8|COMP 13|14|DET 14|12|OBJ 15|17|LINK
	16|17|SUBJ 17|21|CJCT 18|20|DET 19|20|MOD 20|21|SUBJ 21|8|CJCT 22|23|DET
	23|21|OBJ 24|23|POSTMOD 25|26|MOD 26|23|CMOD 27|26|NJCT 28|34|COM
	29|34|JCT 30|29|POBJ 31|30|CONJ 32|31|COORD 33|34|SUBJ 34|27|POBJ 35|37|DET
	36|37|MOD 37|26|APP 38|2|PUNCT
*S1:	this is C's version of the while@q loop this is how you express the
	while@q loop in C .
%mor:	pro:dem|this cop|be&3S adj|C&dn-POSS n|version prep|of det:art|the
	meta|while v|loop pro:dem|this cop|be&3S pro:int|how pro:per|you
	v|express det:art|the meta|while n|loop prep|in n:prop|C .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|MOD 4|2|PRED 5|4|NJCT 6|7|DET 7|5|POBJ 8|2|CPRED
	9|10|SUBJ 10|8|COMP 11|13|LINK 12|13|SUBJ 13|10|CPRED 14|16|DET
	15|16|MOD 16|13|OBJ 17|13|JCT 18|17|POBJ 19|2|PUNCT
*S1:	while parens [: parentheses] (.) condition (.) then a block of code
	between an opening bracket and a closing bracket .
%mor:	conj|while n:pt|parentheses v|condition adv:tem|then det:art|a
	n|block prep|of n|code prep|between det:art|a part|open-PRESP
	n|bracket coord|and det:art|a part|close-PRESP n|bracket .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|6|DET 6|4|OBJ 7|6|NJCT 8|7|POBJ
	9|6|NJCT 10|12|DET 11|12|MOD 12|9|POBJ 13|6|CONJ 14|16|DET 15|16|MOD
	16|13|COORD 17|3|PUNCT
*S1:	inside that is the loop body which is just D equals D minus one .
%mor:	n|inside pro:rel|that cop|be&3S det:art|the n|loop n|body
	pro:rel|which cop|be&3S adv|just n:prop|D v|equal-3S n:prop|D
	prep|minus pro:indef|one .
%gra:	1|0|INCROOT 2|3|LINK 3|1|CMOD 4|6|DET 5|6|MOD 6|3|PRED 7|8|LINK
	8|6|CMOD 9|11|JCT 10|11|SUBJ 11|8|CPRED 12|11|OBJ 13|11|JCT 14|13|POBJ
	15|1|PUNCT
*S1:	the condition says (.) num percent D not equal to zero .
%mor:	det:art|the n|condition v|say-3S co|num n|percent n:prop|D neg|not
	n|equal prep|to det:num|zero .
%gra:	1|2|DET 2|3|SUBJ 3|0|ROOT 4|6|COM 5|6|MOD 6|8|SUBJ 7|6|NEG 8|3|OBJ
	9|8|NJCT 10|9|POBJ 11|3|PUNCT
*S1:	well num percent D that's the divisor of number num divided by D
	(.) if that's zero they divided each_other (.) and I wanna stop .
%mor:	co|well co|num n|percent n:prop|D pro:dem|that~cop|be&3S
	det:art|the n|divisor prep|of n|number co|num v|divide-PAST prep|by
	n:prop|D conj|if pro:dem|that~cop|be&3S n|zero pro:sub|they
	v|divide-PAST pro:refl|each_other coord|and pro:sub|I v|want~inf|to
	v|stop .
%gra:	1|4|COM 2|4|COM 3|4|MOD 4|6|SUBJ 5|6|SUBJ 6|0|ROOT 7|8|DET 8|6|PRED
	9|8|NJCT 10|9|POBJ 11|12|COM 12|8|CMOD 13|12|JCT 14|13|POBJ 15|17|LINK
	16|17|SUBJ 17|20|CJCT 18|17|PRED 19|20|SUBJ 20|12|CJCT 21|20|OBJ 22|24|LINK
	23|24|SUBJ 24|20|CJCT 25|26|INF 26|24|COMP 27|6|PUNCT
*S1:	if that's not zero (.) there's a remainder (.) D +//.
%mor:	conj|if pro:dem|that~cop|be&3S neg|not det:num|zero
	pro:exist|there~cop|be&3S det:art|a n|remainder n:prop|D +//.
%gra:	1|3|LINK 2|3|SUBJ 3|7|CJCT 4|3|NEG 5|6|QUANT 6|7|SUBJ 7|0|ROOT 8|9|DET
	9|7|PRED 10|9|APP 11|7|PUNCT
*S1:	num is not divisible by D and I keep going .
%mor:	co|num aux|be&3S neg|not adj|divisible prep|by n:prop|D coord|and
	pro:sub|I v|keep part|go-PRESP .
%gra:	1|4|COM 2|4|AUX 3|2|NEG 4|0|ROOT 5|4|JCT 6|5|POBJ 7|9|LINK 8|9|SUBJ
	9|4|CJCT 10|9|COMP 11|4|PUNCT
*S1:	once I'm done (.) I have this if that I have down here .
%mor:	adv|once pro:sub|I~aux|be&1S part|do&PASTP pro:sub|I v|have
	pro:dem|this conj|if comp|that pro:sub|I v|have prep|down n|here .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|6|LINK 5|6|SUBJ 6|0|ROOT 7|6|OBJ 8|6|JCT
	9|11|LINK 10|11|SUBJ 11|8|CPOBJ 12|11|JCT 13|12|POBJ 14|6|PUNCT
*S1:	if D is bigger than one (.) print f@l &-uh such and such is not
	prime (.) and I actually also print out D (.) because it's the
	largest divisor .
%mor:	conj|if n:prop|D cop|be&3S adj|big-CP prep|than det:num|one n|print
	n:let|f qn|such coord|and qn|such aux|be&3S neg|not adj|prime
	coord|and pro:sub|I adv|actual&dadj-LY adv|also v|print adv|out
	n:prop|D conj|because pro:per|it~cop|be&3S det:art|the adj|large-SP
	n|divisor .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|4|JCT 6|7|QUANT 7|5|POBJ 8|7|CONJ
	9|8|COORD 10|9|CONJ 11|14|QUANT 12|14|AUX 13|12|NEG 14|10|COORD
	15|19|LINK 16|19|SUBJ 17|19|JCT 18|19|JCT 19|14|CMOD 20|19|JCT 21|19|XJCT
	22|24|LINK 23|24|SUBJ 24|21|CJCT 25|27|DET 26|27|MOD 27|24|PRED 28|3|PUNCT
*S1:	of that number .
%mor:	prep|of pro:dem|that v|number .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PUNCT
*S1:	so that's interesting .
%mor:	co|so pro:dem|that~cop|be&3S adj|interesting .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|3|PUNCT
*S1:	if D is &-uh equal to one (.) then I'm in the else clause down here
	and I print out that the number is prime .
%mor:	conj|if n:prop|D cop|be&3S n|equal prep|to det:num|one adv:tem|then
	pro:sub|I~cop|be&1S prep|in det:art|the post|else n|clause prep|down
	n|here coord|and pro:sub|I v|print adv|out comp|that det:art|the
	n|number cop|be&3S adj|prime .
%gra:	1|3|LINK 2|3|SUBJ 3|9|CJCT 4|3|PRED 5|4|NJCT 6|7|QUANT 7|5|POBJ
	8|9|SUBJ 9|0|ROOT 10|9|JCT 11|13|DET 12|13|MOD 13|10|POBJ 14|13|NJCT 15|14|POBJ
	16|18|LINK 17|18|SUBJ 18|13|CJCT 19|18|JCT 20|23|LINK 21|22|DET
	22|23|SUBJ 23|18|COMP 24|23|PRED 25|9|PUNCT
*S1:	(0.21) compile this beast (0.5) notice +...
%mor:	v|compile det:dem|this n|beast n|notice +...
%gra:	1|0|ROOT 2|4|DET 3|4|MOD 4|1|OBJ 5|1|PUNCT
*S1:	you've got Visual Studio you've got the command+line version of
	Visual Studio which you called c@l out (.) showed you CC at the
	beginning of the class (.) on some of the machines .
%mor:	pro:per|you~aux|have part|get&PASTP n:prop|Visual n:prop|Studio
	pro:per|you~aux|have part|get&PASTP det:art|the n|+n|command+n|line
	n|version prep|of n:prop|Visual n:prop|Studio pro:rel|which
	pro:per|you v|call-PAST n:let|c prep|out v|show-PAST pro:per|you
	n:prop|CC prep|at det:art|the n|beginning prep|of det:art|the
	n|class adv|on qn|some prep|of det:art|the n|machine-PL .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|NAME 5|3|OBJ 6|8|SUBJ 7|8|AUX 8|5|CMOD
	9|11|DET 10|11|MOD 11|8|OBJ 12|11|NJCT 13|14|NAME 14|12|POBJ 15|17|LINK
	16|17|SUBJ 17|11|CMOD 18|17|OBJ 19|17|JCT 20|19|POBJ 21|17|OBJ 22|21|OBJ
	23|22|NJCT 24|25|DET 25|23|POBJ 26|25|NJCT 27|28|DET 28|26|POBJ 29|22|JCT
	30|29|POBJ 31|30|NJCT 32|33|DET 33|31|POBJ 34|3|PUNCT
*S1:	my compiler was called EGCS which is pronounced eggs (.) the guy in
	the back of the room won't like that .
%mor:	det:poss|my n|compile&dv-AGT aux|be&PAST&13S part|call-PASTP
	n:prop|EGCS pro:rel|which aux|be&3S part|pronounce-PASTP n|egg-PL
	det:art|the n|guy prep|in det:art|the adv|back prep|of det:art|the
	n|room mod|will~neg|not co|like pro:dem|that .
%gra:	1|2|DET 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|OBJ 6|8|LINK 7|8|AUX 8|5|CMOD
	9|8|OBJ 10|11|DET 11|9|OBJ 12|11|NJCT 13|14|DET 14|21|JCT 15|21|JCT
	16|17|DET 17|15|POBJ 18|21|AUX 19|18|NEG 20|21|COM 21|12|POBJ 22|4|PUNCT
*S1:	&-um there are lots_of C compilers they're all made by different
	people but they all do the same thing .
%mor:	pro:exist|there cop|be&PRES qn|lots_of n:prop|C n|compile&dv-AGT-PL
	pro:sub|they~aux|be&PRES post|all part|make&PASTP adv|by
	adj|different n|person&PL conj|but pro:sub|they post|all v|do
	det:art|the adj|same n|thing .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|QUANT 4|5|MOD 5|2|PRED 6|9|SUBJ 7|9|AUX 8|7|PQ
	9|5|CMOD 10|12|JCT 11|12|MOD 12|9|OBJ 13|16|LINK 14|16|SUBJ 15|14|PQ
	16|12|CMOD 17|19|DET 18|19|MOD 19|16|OBJ 20|2|PUNCT
*S1:	okay I've compiled my program I can run it .
%mor:	co|okay pro:sub|I~aux|have part|compile-PASTP det:poss|my n|program
	pro:sub|I mod|can v|run pro:per|it .
%gra:	1|4|COM 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|6|DET 6|4|OBJ 7|9|SUBJ 8|9|AUX
	9|4|COMP 10|9|OBJ 11|4|PUNCT
*S1:	it asks for (.) a positive integer (.) I give it minus two .
%mor:	pro:per|it v|ask-3S prep|for det:art|a adj|positive n|integer
	pro:sub|I v|give pro:per|it prep|minus det:num|two .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|6|DET 5|6|MOD 6|3|POBJ 7|8|SUBJ 8|2|CJCT
	9|8|OBJ 10|8|JCT 11|10|POBJ 12|2|PUNCT
*S1:	so it doesn't do anything .
%mor:	co|so pro:per|it mod|do&3S~neg|not v|do pro:indef|anything .
%gra:	1|5|COM 2|5|SUBJ 3|5|AUX 4|3|NEG 5|0|ROOT 6|5|OBJ 7|5|PUNCT
*S1:	it looked and it saw I gave it minus two and it's +//.
%mor:	pro:per|it cop|look-PAST coord|and pro:per|it v|see&PAST pro:sub|I
	v|give&PAST pro:per|it prep|minus det:num|two coord|and
	pro:per|it~cop|be&3S +//.
%gra:	1|2|SUBJ 2|0|ROOT 3|5|LINK 4|5|SUBJ 5|2|CJCT 6|7|SUBJ 7|5|COMP 8|7|OBJ
	9|7|JCT 10|13|QUANT 11|10|CONJ 12|11|COORD 13|9|POBJ 14|2|PUNCT
*S1:	didn't &-uh +//.
%mor:	mod|do&PAST~neg|not +//.
%gra:	1|0|INCROOT 2|1|NEG 3|1|PUNCT
*S1:	refused to check its primeness .
%mor:	v|refuse-PAST inf|to v|check det:poss|its n|prime&dadj-NESS .
%gra:	1|0|ROOT 2|3|INF 3|1|COMP 4|5|DET 5|3|OBJ 6|1|PUNCT
*S1:	let's give it an interesting number twenty three (.) checks if it's
	prime it says it is prime .
%mor:	v|let~pro:obj|us v|give pro:per|it det:art|a adj|interesting
	n|number det:num|twenty det:num|three n|check-PL conj|if
	pro:per|it~cop|be&3S adj|prime pro:per|it v|say-3S pro:per|it
	cop|be&3S adj|prime .
%gra:	1|0|ROOT 2|1|OBJ 3|1|COMP 4|16|SUBJ 5|7|DET 6|7|MOD 7|16|JCT 8|10|QUANT
	9|10|QUANT 10|7|APP 11|13|LINK 12|13|SUBJ 13|16|CJCT 14|13|PRED
	15|16|SUBJ 16|3|COMP 17|18|SUBJ 18|16|COMP 19|18|PRED 20|1|PUNCT
*S1:	okay well everybody knew that .
%mor:	co|okay n|well pro:indef|everybody v|know&PAST comp|that .
%gra:	1|2|COM 2|4|SUBJ 3|4|SUBJ 4|0|ROOT 5|4|OBJ 6|4|PUNCT
*S1:	but how about one thousand two hundred and three ?
%mor:	conj|but pro:int|how prep|about det:num|one det:num|thousand
	det:num|two det:num|hundred coord|and det:num|three ?
%gra:	1|5|LINK 2|4|LINK 3|4|JCT 4|5|QUANT 5|7|DATE 6|7|DATE 7|0|ROOT 8|7|CONJ
	9|8|COORD 10|7|PUNCT
*S1:	well it's not prime it's divisible by four hundred and one as
	everyone could immediately see .
%mor:	co|well pro:per|it~cop|be&3S neg|not adj|prime pro:per|it~cop|be&3S
	adj|divisible prep|by det:num|four det:num|hundred coord|and
	det:num|one prep|as pro:indef|everyone mod|could
	adv|immediate&dadj-LY v|see .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|NEG 5|3|PRED 6|7|SUBJ 7|5|CMOD 8|7|PRED
	9|7|JCT 10|11|QUANT 11|18|JCT 12|11|CONJ 13|12|COORD 14|15|COORD
	15|18|SUBJ 16|18|AUX 17|18|JCT 18|9|POBJ 19|3|PUNCT
*S1:	&=laughs:multiple okay .
%mor:	co|okay .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	okay so the point is the code works it does what I say (.) it
	doesn't do +//.
%mor:	co|okay conj|so det:art|the n|point cop|be&3S det:art|the n|code
	v|work-3S pro:per|it mod|do&3S pro:int|what pro:sub|I v|say
	pro:per|it mod|do&3S~neg|not v|do +//.
%gra:	1|5|COM 2|5|LINK 3|4|DET 4|5|SUBJ 5|0|ROOT 6|7|DET 7|8|SUBJ 8|5|CPRED
	9|13|SUBJ 10|13|AUX 11|13|LINK 12|13|SUBJ 13|8|COMP 14|13|OBJ 15|17|AUX
	16|15|NEG 17|13|COMP 18|5|PUNCT
*S1:	it doesn't &wor I don't know that it works because I ran it on
	a_couple_of cases and it came out right .
%mor:	pro:per|it mod|do&3S~neg|not pro:sub|I mod|do~neg|not v|know
	comp|that pro:per|it v|work-3S conj|because pro:sub|I v|run&PAST
	pro:per|it prep|on qn|a_couple_of n|case-PL coord|and pro:per|it
	v|come&PAST adv|out co|right .
%gra:	1|7|SUBJ 2|7|AUX 3|2|NEG 4|7|SUBJ 5|7|AUX 6|5|NEG 7|0|ROOT 8|10|LINK
	9|10|SUBJ 10|7|COMP 11|13|LINK 12|13|SUBJ 13|7|CJCT 14|13|OBJ 15|13|JCT
	16|17|QUANT 17|15|POBJ 18|20|LINK 19|20|SUBJ 20|7|CJCT 21|20|JCT 22|20|COM
	23|7|PUNCT
*S1:	I know that it works (be)cause I've looked at this algorithm and
	I've thought about it .
%mor:	pro:sub|I v|know comp|that pro:per|it v|work-3S conj|because
	pro:sub|I~aux|have part|look-PASTP prep|at det:dem|this n|algorithm
	coord|and pro:sub|I~aux|have n|thought prep|about pro:per|it .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|LINK 4|5|SUBJ 5|2|COMP 6|9|LINK 7|9|SUBJ 8|9|AUX
	9|2|CJCT 10|9|JCT 11|12|DET 12|10|POBJ 13|16|LINK 14|16|SUBJ 15|16|AUX
	16|9|CJCT 17|16|NJCT 18|17|POBJ 19|2|PUNCT
*S1:	and I'm sure that [/] that algorithm (.) will find primes +...
%mor:	coord|and pro:sub|I~cop|be&1S adj|sure det:dem|that n|algorithm
	mod|will v|find n|prime-PL +...
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|6|DET 6|8|SUBJ 7|8|AUX 8|4|CMOD
	9|8|OBJ 10|3|PUNCT
*S1:	I don't care how many times I run a test through this code (.) I'll
	never be sure .
%mor:	pro:sub|I mod|do~neg|not v|care pro:int|how qn|many n|time-PL
	pro:sub|I v|run det:art|a n|test prep|through det:dem|this n|code
	pro:sub|I~mod|will adv|never cop|be adv|sure .
%gra:	1|4|SUBJ 2|4|AUX 3|2|NEG 4|0|ROOT 5|9|LINK 6|7|QUANT 7|9|JCT 8|9|SUBJ
	9|4|COMP 10|11|DET 11|9|OBJ 12|9|JCT 13|14|DET 14|12|POBJ 15|18|SUBJ
	16|18|AUX 17|18|JCT 18|4|CJCT 19|18|JCT 20|4|PUNCT
*S1:	but if I look at that algorithm carefully I can be sure about it .
%mor:	conj|but conj|if pro:sub|I v|look prep|at det:dem|that n|algorithm
	adv|care&dadj-FULL-LY pro:sub|I mod|can cop|be adv|sure prep|about
	pro:per|it .
%gra:	1|11|LINK 2|4|LINK 3|4|SUBJ 4|11|CJCT 5|4|JCT 6|7|DET 7|5|POBJ 8|4|JCT
	9|11|SUBJ 10|11|AUX 11|0|ROOT 12|11|JCT 13|11|JCT 14|13|POBJ 15|11|PUNCT
*S1:	(0.7) and it's a nice usable while@q loop .
%mor:	coord|and pro:per|it~cop|be&3S det:art|a adj|nice adj|use&dv-ABLE
	meta|while n|loop .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|6|DET 5|6|MOD 6|8|MOD 7|8|MOD 8|3|PRED
	9|3|PUNCT
*S1:	so once again (.) I have this piece of code (.) not a complicated
	piece of code in this case (.) but it could be as complicated as you
	want I can put anything in there .
%mor:	adv|so adv|once adv|again pro:sub|I v|have det:dem|this n|piece
	prep|of n|code neg|not det:art|a part|complicate-PASTP n|piece
	prep|of n|code prep|in det:dem|this n|case conj|but pro:per|it
	mod|could cop|be adv|as v|complicate-PAST conj|as pro:per|you v|want
	pro:sub|I mod|can v|put&ZERO pro:indef|anything prep|in n|there .
%gra:	1|2|JCT 2|5|JCT 3|2|JCT 4|5|SUBJ 5|0|ROOT 6|7|DET 7|5|OBJ 8|7|NJCT
	9|8|POBJ 10|9|NEG 11|13|DET 12|13|MOD 13|7|APP 14|13|NJCT 15|14|POBJ
	16|7|NJCT 17|18|DET 18|16|POBJ 19|22|LINK 20|22|SUBJ 21|22|AUX 22|5|CJCT
	23|24|COORD 24|22|ENUM 25|27|LINK 26|27|SUBJ 27|22|CJCT 28|30|SUBJ 29|30|AUX
	30|27|COMP 31|30|OBJ 32|30|JCT 33|32|POBJ 34|5|PUNCT
*S1:	piece of code that I wanted to be executed as long as a condition
	was true .
%mor:	n|piece prep|of n|code pro:rel|that pro:sub|I v|want-PAST inf|to
	aux|be part|execute-PASTP prep|as adv|long prep|as det:art|a
	n|condition cop|be&PAST&13S adj|true .
%gra:	1|0|INCROOT 2|1|NJCT 3|2|POBJ 4|6|LINK 5|6|SUBJ 6|3|CMOD 7|9|INF
	8|9|AUX 9|6|COMP 10|11|COORD 11|15|JCT 12|14|COORD 13|14|DET 14|15|SUBJ
	15|9|COMP 16|15|PRED 17|1|PUNCT
*S1:	lemme show you another code with a much more complicated thing
	inside this while@q loop .
%mor:	v|let~pro:obj|me v|show pro:per|you qn|another n|code prep|with
	det:art|a qn|much adv|more part|complicate-PASTP n|thing prep|inside
	det:dem|this meta|while n|loop .
%gra:	1|0|ROOT 2|1|OBJ 3|1|COMP 4|3|OBJ2 5|6|QUANT 6|3|OBJ 7|6|NJCT 8|9|DET
	9|7|POBJ 10|11|JCT 11|9|XMOD 12|11|OBJ 13|12|NJCT 14|16|DET 15|16|MOD
	16|13|POBJ 17|1|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	and [/] and I'm really excited by prime numbers today (.) so I'm
	gonna show you another prime number code .
%mor:	coord|and pro:sub|I~aux|be&1S adv|real&dadj-LY part|excite-PASTP
	adv|by adj|prime n|number-PL adv:tem|today adv|so
	pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|show pro:per|you
	qn|another n|prime n|number n|code .
%gra:	1|5|LINK 2|5|SUBJ 3|5|AUX 4|5|JCT 5|0|ROOT 6|7|JCT 7|8|MOD 8|5|OBJ
	9|8|JCT 10|13|JCT 11|13|SUBJ 12|13|AUX 13|5|XJCT 14|15|INF 15|13|COMP
	16|15|OBJ2 17|20|QUANT 18|20|MOD 19|20|MOD 20|15|OBJ 21|5|PUNCT
*S1:	(0.8) this one I think it should do xxx the code I just showed you
	&-um it asks for a number (.) you give it the number (.) it checks
	if it's prime (.) if it's prime it says yes if it's not prime it
	says no (.) and then it ends .
%mor:	pro:dem|this pro:indef|one pro:sub|I v|think pro:per|it mod|should
	v|do det:art|the n|code pro:sub|I adv|just v|show-PAST pro:per|you
	pro:per|it v|ask-3S prep|for det:art|a n|number pro:per|you v|give
	pro:per|it det:art|the n|number pro:per|it v|check-3S conj|if
	pro:per|it~cop|be&3S adj|prime conj|if pro:per|it~cop|be&3S
	adj|prime pro:per|it v|say-3S co|yes conj|if pro:per|it~cop|be&3S
	neg|not adj|prime pro:per|it v|say-3S co|no coord|and adv:tem|then
	pro:per|it v|end-3S .
%gra:	1|2|DET 2|4|LINK 3|4|SUBJ 4|7|SUBJ 5|4|OBJ 6|7|AUX 7|0|ROOT 8|9|DET
	9|7|OBJ 10|12|SUBJ 11|12|JCT 12|7|CJCT 13|12|OBJ 14|15|SUBJ 15|12|COMP
	16|15|JCT 17|18|DET 18|16|POBJ 19|20|SUBJ 20|15|CJCT 21|20|OBJ 22|23|DET
	23|20|OBJ 24|25|SUBJ 25|23|CMOD 26|28|LINK 27|28|SUBJ 28|35|CJCT 29|28|PRED
	30|32|LINK 31|32|SUBJ 32|35|CJCT 33|32|PRED 34|35|SUBJ 35|20|COMP
	36|35|OBJ 37|39|LINK 38|39|SUBJ 39|43|CJCT 40|39|NEG 41|43|JCT 42|43|SUBJ
	43|35|CJCT 44|43|OBJ 45|44|CONJ 46|48|JCT 47|48|SUBJ 48|45|COORD 49|7|PUNCT
*S1:	well maybe I'd like to check a_lot_of numbers for primeness .
%mor:	adv|well adv|maybe pro:sub|I~mod|genmod co|like inf|to v|check
	qn|a_lot_of n|number-PL prep|for n|prime&dadj-NESS .
%gra:	1|2|JCT 2|7|JCT 3|7|SUBJ 4|7|AUX 5|7|COM 6|7|INF 7|0|ROOT 8|9|QUANT
	9|7|OBJ 10|7|JCT 11|10|POBJ 12|7|PUNCT
*S1:	what I would like to do then (.) is write a code that looks like
	this .
%mor:	pro:int|what pro:sub|I mod|will&COND v|like inf|to v|do
	adv:tem|then cop|be&3S v|write det:art|a n|code pro:rel|that
	v|look-3S prep|like pro:dem|this .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|9|SUBJ 5|6|INF 6|4|COMP 7|6|JCT 8|9|AUX
	9|0|ROOT 10|11|DET 11|9|OBJ 12|13|LINK 13|11|CMOD 14|13|JCT 15|14|POBJ
	16|9|PUNCT
*S1:	(0.10) &=computer_company_website_on_overhead by the way I do not
	get any money for these shameless advertisements sorry about that .
%mor:	prep|by det:art|the n|way pro:sub|I mod|do neg|not v|get qn|any
	n|money prep|for det:dem|these adj|shame&dn-LESS
	n|advertise&dv-MENT-PL adj|sorry prep|about pro:dem|that .
%gra:	1|7|JCT 2|3|DET 3|1|POBJ 4|7|SUBJ 5|7|AUX 6|5|NEG 7|0|ROOT 8|9|QUANT
	9|7|OBJ 10|9|NJCT 11|13|DET 12|13|MOD 13|10|POBJ 14|13|POSTMOD 15|14|JCT
	16|15|POBJ 17|7|PUNCT
*S1:	sorry that I don't get money and sorry that I'm exposing you to
	shameless advertisements +...
%mor:	adj|sorry comp|that pro:sub|I mod|do~neg|not v|get n|money
	coord|and adj|sorry comp|that pro:sub|I~aux|be&1S part|expose-PRESP
	pro:per|you inf|to adj|shame&dn-LESS n|advertise&dv-MENT-PL +...
%gra:	1|0|INCROOT 2|6|LINK 3|6|SUBJ 4|6|AUX 5|4|NEG 6|1|CMOD 7|6|OBJ 8|7|CONJ
	9|8|COORD 10|13|LINK 11|13|SUBJ 12|13|AUX 13|9|CMOD 14|13|OBJ 15|16|INF
	16|17|MOD 17|14|OM 18|1|PUNCT
*S1:	(0.6) here's the way this code is gonna look (.) now this code in
	some sense is [x 3] less pure as an algorithm (be)cause really what
	I wanna deal with is some (.) issues of interacting with the person
	.
%mor:	pro:exist|here~cop|be&3S det:art|the n|way det:dem|this n|code
	aux|be&3S part|go-PRESP~inf|to co|look adv|now det:dem|this n|code
	prep|in qn|some n|sense cop|be&3S adj|less adj|pure prep|as
	det:art|a n|algorithm conj|because adv|real&dadj-LY pro:int|what
	pro:sub|I v|want~inf|to v|deal prep|with cop|be&3S qn|some
	n|issue-PL prep|of inter#n:gerund|act-PRESP prep|with det:art|the
	n|person .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|6|DET 6|8|SUBJ 7|8|AUX 8|4|XMOD
	9|10|INF 10|13|COM 11|13|JCT 12|13|DET 13|17|SUBJ 14|13|NJCT 15|16|QUANT
	16|14|POBJ 17|8|COMP 18|22|MOD 19|22|MOD 20|22|COORD 21|22|DET 22|17|PRED
	23|27|LINK 24|27|JCT 25|27|LINK 26|27|SUBJ 27|2|CJCT 28|29|INF
	29|27|COMP 30|29|JCT 31|30|POBJ 32|33|QUANT 33|31|PRED 34|33|NJCT 35|34|POBJ
	36|33|NJCT 37|38|DET 38|36|POBJ 39|2|PUNCT
*S1:	I wanna write a code that looks like this .
%mor:	pro:sub|I v|want~inf|to v|write det:art|a n|code pro:rel|that
	v|look-3S prep|like pro:dem|this .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|INF 4|2|COMP 5|6|DET 6|4|OBJ 7|8|LINK 8|6|CMOD
	9|8|JCT 10|9|POBJ 11|2|PUNCT
*S1:	&=pause_while_writing I want this one to (.) keep asking for input
	(.) until the &-uh human running the thing inputs garbage .
%mor:	pro:sub|I v|want det:dem|this det:num|one inf|to v|keep
	part|ask-PRESP prep|for n|input prep|until det:art|the n|human
	part|run-PRESP det:art|the n|thing v|input-3S n|garbage .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|COMP 5|6|INF 6|4|COMP 7|6|COMP 8|7|JCT
	9|8|POBJ 10|9|NJCT 11|12|DET 12|10|POBJ 13|12|XMOD 14|15|DET 15|16|SUBJ
	16|13|COMP 17|16|OBJ 18|2|PUNCT
*S1:	&=pause_while_writing so I'm gonna write a code that looks like
	this now .
%mor:	adv|so pro:sub|I~aux|be&1S part|go-PRESP~inf|to v|write det:art|a
	n|code pro:rel|that v|look-3S prep|like pro:dem|this adv|now .
%gra:	1|4|JCT 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|6|INF 6|4|COMP 7|8|DET 8|6|OBJ
	9|10|LINK 10|8|CMOD 11|10|JCT 12|11|POBJ 13|10|JCT 14|4|PUNCT
*S1:	&=pause_while_writing get num from human .
%mor:	v|get co|num prep|from n|human .
%gra:	1|0|ROOT 2|1|OBJ 3|2|JCT 4|3|POBJ 5|1|PUNCT
*S1:	that's an interesting phrase .
%mor:	pro:dem|that~cop|be&3S det:art|a adj|interesting n|phrase .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|DET 4|5|MOD 5|2|PRED 6|2|PUNCT
*S1:	&-um &=pause_while_writing lemme actually number the steps inside
	here just so you can see them distinctly .
%mor:	v|let~pro:obj|me adv|actual&dadj-LY v|number det:art|the n|step-PL
	prep|inside n|here adj|just conj|so pro:per|you mod|can v|see
	pro:obj|them adv|distinct&dadj-LY .
%gra:	1|0|ROOT 2|1|OBJ 3|4|JCT 4|1|COMP 5|6|DET 6|4|OBJ 7|4|JCT 8|7|POBJ
	9|4|JCT 10|13|LINK 11|13|SUBJ 12|13|AUX 13|9|CMOD 14|13|OBJ 15|13|JCT
	16|1|PUNCT
*S1:	and then after you've done that (.) get another number .
%mor:	coord|and adv:tem|then conj|after pro:per|you~aux|have
	part|do&PASTP adv|that v|get qn|another v|number .
%gra:	1|6|LINK 2|6|JCT 3|6|LINK 4|6|SUBJ 5|6|AUX 6|0|ROOT 7|8|JCT 8|6|COMP
	9|10|QUANT 10|8|COMP 11|6|PUNCT
*S1:	&=pause_while_writing it's gotten another num from the human (.)
	and it checks if it's positive or not .
%mor:	pro:per|it~aux|be&3S part|get&PASTP qn|another co|num prep|from
	det:art|the n|human coord|and pro:per|it v|check-3S conj|if
	pro:per|it~cop|be&3S n|positive coord|or neg|not .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|QUANT 5|11|COM 6|11|JCT 7|8|DET 8|6|POBJ
	9|11|LINK 10|11|SUBJ 11|3|COMP 12|14|LINK 13|14|SUBJ 14|11|COMP
	15|14|PRED 16|15|CONJ 17|16|COORD 18|3|PUNCT
*S1:	if it is (.) checks if it's prime (.) and asks for another number .
%mor:	conj|if pro:per|it cop|be&3S n|check-PL conj|if
	pro:per|it~cop|be&3S n|prime coord|and v|ask-3S prep|for qn|another
	v|number .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|7|LINK 6|7|SUBJ 7|3|CJCT 8|7|PRED
	9|8|CONJ 10|9|COORD 11|10|JCT 12|13|QUANT 13|11|POBJ 14|3|PUNCT
*S1:	and just keeps going .
%mor:	coord|and adv|just v|keep-3S part|go-PRESP .
%gra:	1|3|LINK 2|3|JCT 3|0|ROOT 4|3|COMP 5|3|PUNCT
*S1:	what makes this loop stop ?
%mor:	pro:int|what v|make-3S det:dem|this n|loop n|stop ?
%gra:	1|2|SUBJ 2|0|ROOT 3|5|DET 4|5|MOD 5|2|OBJ 6|2|PUNCT
*S1:	the human types in something that's not positive or else is
	gibberish .
%mor:	det:art|the n|human n|type-PL prep|in pro:indef|something
	pro:rel|that~cop|be&3S neg|not n|positive coord|or post|else
	aux|be&3S n|gibberish .
%gra:	1|3|DET 2|3|MOD 3|0|INCROOT 4|3|NJCT 5|4|POBJ 6|7|LINK 7|5|CMOD 8|7|NEG
	9|7|PRED 10|9|CONJ 11|13|SUBJ 12|13|AUX 13|10|COORD 14|3|PUNCT
*S1:	so we get out_of this loop when (.) the number that comes in from
	the human is not positive +...
%mor:	co|so pro:sub|we v|get prep|out_of det:dem|this n|loop conj|when
	det:art|the n|number pro:rel|that v|come-3S adv|in prep|from
	det:art|the n|human cop|be&3S neg|not adj|positive +...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|6|DET 6|4|POBJ 7|16|LINK 8|9|DET
	9|16|SUBJ 10|11|LINK 11|9|CMOD 12|11|JCT 13|11|JCT 14|15|DET 15|13|POBJ
	16|3|CJCT 17|16|NEG 18|16|PRED 19|3|PUNCT
*S1:	now +...
%mor:	adv|now +...
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	this is a few lines of C code involving some scan_fs@n and
	print_fs@n (.) I didn't write them out in detail here (be)cause I
	don't care about those details when I'm thinking about my algorithm
	.
%mor:	pro:dem|this cop|be&3S det:art|a n|few v|line-3S prep|of n:prop|C
	n|code part|involve-PRESP qn|some neo|scan_fs coord|and neo|print_fs
	pro:sub|I mod|do&PAST~neg|not v|write pro:obj|them adv|out prep|in
	n|detail adv|here conj|because pro:sub|I mod|do~neg|not v|care
	prep|about det:dem|those n|detail-PL conj|when pro:sub|I~aux|be&1S
	part|think-PRESP prep|about det:poss|my n|algorithm .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|5|SUBJ 5|2|CPRED 6|5|JCT 7|8|MOD 8|6|POBJ
	9|17|XJCT 10|11|QUANT 11|9|OBJ 12|11|CONJ 13|12|COORD 14|17|SUBJ
	15|17|AUX 16|15|NEG 17|5|CJCT 18|17|OBJ 19|17|JCT 20|17|JCT 21|20|POBJ 22|17|JCT
	23|27|LINK 24|27|SUBJ 25|27|AUX 26|25|NEG 27|17|CJCT 28|27|JCT
	29|30|DET 30|28|POBJ 31|34|LINK 32|34|SUBJ 33|34|AUX 34|27|CJCT 35|34|JCT
	36|37|DET 37|35|POBJ 38|2|PUNCT
*S1:	same with this these are pretty much the same lines .
%mor:	pro:indef|same prep|with det:dem|this det:dem|these aux|be&PRES
	adv|pretty adv|much det:art|the adj|same n|line-PL .
%gra:	1|0|INCROOT 2|1|NJCT 3|7|DET 4|7|DET 5|7|AUX 6|7|JCT 7|10|JCT 8|10|DET
	9|10|MOD 10|2|POBJ 11|1|PUNCT
*S1:	this is interesting what goes here ?
%mor:	pro:dem|this cop|be&3S adj|interesting pro:int|what v|go-3S
	adv|here ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|5|JCT 5|2|CPRED 6|5|JCT 7|2|PUNCT
*S1:	that .
%mor:	comp|that .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	&=pause_while_writing right there .
%mor:	adv|right adv|there .
%gra:	1|2|JCT 2|0|INCROOT 3|2|PUNCT
*S1:	the whole thing .
%mor:	det:art|the adj|whole n|thing .
%gra:	1|3|DET 2|3|MOD 3|0|INCROOT 4|3|PUNCT
*S1:	essentially as is +...
%mor:	adv|essential&dadj-LY adv|as cop|be&3S +...
%gra:	1|2|JCT 2|3|JCT 3|0|ROOT 4|3|PUNCT
*S1:	now (.) I'm not gonna write it in here (.) because that would
	obscure this if I had all that detail written right here (.) it
	would be harder for me to look at this and be sure it's right .
%mor:	adv|now pro:sub|I~aux|be&1S neg|not part|go-PRESP~inf|to v|write
	pro:per|it prep|in n|here conj|because pro:dem|that mod|will&COND
	v|obscure det:dem|this conj|if pro:sub|I v|have&PAST qn|all
	det:dem|that n|detail part|write&PASTP adv|right adv|here pro:per|it
	mod|will&COND cop|be adj|hard-CP prep|for pro:obj|me inf|to v|look
	prep|at det:dem|this coord|and cop|be adj|sure pro:per|it~cop|be&3S
	adj|right .
%gra:	1|5|JCT 2|5|SUBJ 3|5|AUX 4|3|NEG 5|0|ROOT 6|7|INF 7|5|COMP 8|7|OBJ
	9|7|JCT 10|9|POBJ 11|14|LINK 12|14|SUBJ 13|14|AUX 14|5|CJCT 15|14|OBJ
	16|18|LINK 17|18|SUBJ 18|15|CJCT 19|21|QUANT 20|21|DET 21|18|OBJ 22|21|XMOD
	23|24|JCT 24|27|JCT 25|27|SUBJ 26|27|AUX 27|22|COMP 28|27|PRED 29|28|JCT
	30|29|POBJ 31|32|INF 32|28|XMOD 33|32|JCT 34|33|POBJ 35|34|CONJ
	36|35|COORD 37|36|PRED 38|39|SUBJ 39|37|CMOD 40|39|PRED 41|5|PUNCT
*S1:	now it's not too bad it's not really very many lines (.) but here
	is a task all of its own (.) and I really don't need to think about
	how this task occurs (.) while I'm (.) describing this task .
%mor:	adv|now pro:per|it~cop|be&3S neg|not adv|too adj|bad
	pro:per|it~cop|be&3S neg|not adv|real&dadj-LY adv|very qn|many
	n|line-PL conj|but pro:exist|here cop|be&3S det:art|a n|task
	pro:indef|all prep|of det:poss|its adj|own coord|and pro:sub|I
	adv|real&dadj-LY mod|do~neg|not v|need inf|to v|think prep|about
	pro:int|how det:dem|this n|task v|occur-3S conj|while
	pro:sub|I~aux|be&1S part|describe-PRESP det:dem|this n|task .
%gra:	1|3|JCT 2|3|SUBJ 3|0|ROOT 4|3|NEG 5|6|JCT 6|3|PRED 7|8|SUBJ 8|6|CMOD
	9|8|NEG 10|13|JCT 11|12|JCT 12|13|QUANT 13|8|PRED 14|16|LINK 15|16|SUBJ
	16|3|CJCT 17|18|DET 18|16|PRED 19|18|XMOD 20|19|NJCT 21|22|DET 22|20|POBJ
	23|28|LINK 24|28|SUBJ 25|28|JCT 26|28|AUX 27|26|NEG 28|19|CJCT 29|30|INF
	30|28|COMP 31|30|JCT 32|35|LINK 33|34|DET 34|35|SUBJ 35|31|CPOBJ
	36|39|LINK 37|39|SUBJ 38|39|AUX 39|19|CJCT 40|41|DET 41|39|OBJ 42|3|PUNCT
*S1:	I just need to know +//.
%mor:	pro:sub|I adv|just v|need inf|to v|know +//.
%gra:	1|3|SUBJ 2|3|JCT 3|0|ROOT 4|5|INF 5|3|COMP 6|3|PUNCT
*S1:	somehow I need (.) a way to check if a number's prime or not .
%mor:	adv|somehow pro:sub|I v|need det:art|a n|way prep|to n|check
	comp|if det:art|a adj|number&dn-POSS n|prime coord|or neg|not .
%gra:	1|3|JCT 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|OBJ 6|5|NJCT 7|6|POBJ 8|5|ENUM
	9|11|DET 10|11|MOD 11|8|OBJ 12|11|CONJ 13|12|COORD 14|3|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	I want to think that way I want to separate (.) problems that can
	be separated (.) the human mind is finite and I can't think about
	everything at once .
%mor:	pro:sub|I v|want inf|to v|think adv|that n|way pro:sub|I v|want
	inf|to v|separate n|problem-PL pro:rel|that mod|can aux|be
	part|separate-PASTP det:art|the adj|human n|mind cop|be&3S
	adj|finite coord|and pro:sub|I mod|can~neg|not v|think prep|about
	pro:indef|everything prep|at adv|once .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|INF 4|2|COMP 5|8|JCT 6|8|JCT 7|8|SUBJ 8|4|COMP
	9|10|INF 10|8|COMP 11|10|OBJ 12|15|LINK 13|15|AUX 14|15|AUX 15|11|CMOD
	16|18|DET 17|18|MOD 18|19|SUBJ 19|15|COMP 20|19|PRED 21|25|LINK 22|25|SUBJ
	23|25|AUX 24|23|NEG 25|19|CJCT 26|25|JCT 27|26|POBJ 28|27|NJCT
	29|28|POBJ 30|2|PUNCT
*S1:	neither can you .
%mor:	coord|neither mod|can pro:per|you .
%gra:	1|3|LINK 2|3|AUX 3|0|INCROOT 4|3|PUNCT
*S1:	(0.7) let's plunge ourselves into darkness once again (.) and look
	at this new code called prime loop .
%mor:	v|let~pro:obj|us v|plunge pro:refl|ourselves prep|into
	n|dark&dadj-NESS adv|once adv|again coord|and v|look prep|at
	det:dem|this adj|new n|code v|call-PAST adj|prime n|loop .
%gra:	1|0|ROOT 2|1|OBJ 3|1|COMP 4|3|OBJ 5|3|JCT 6|5|POBJ 7|3|JCT 8|7|JCT
	9|7|CONJ 10|9|COORD 11|10|JCT 12|14|DET 13|14|MOD 14|11|POBJ 15|10|XJCT
	16|17|MOD 17|15|OBJ 18|1|PUNCT
*S1:	or prime loops or something like that .
%mor:	coord|or adj|prime n|loop-PL coord|or pro:indef|something prep|like
	pro:dem|that .
%gra:	1|3|LINK 2|3|MOD 3|0|INCROOT 4|3|CONJ 5|4|COORD 6|5|NJCT 7|6|POBJ
	8|3|PUNCT
*S1:	(0.20) okay all the standard garbage include standard IO start main
	somehow declare some variables num and D (.) then print f@l input a
	positive integer negative to quit in [/] in large red letters .
%mor:	co|okay adv|all det:art|the adj|standard n|garbage v|include
	adj|standard n:prop|IO v|start adj|main adv|somehow v|declare
	qn|some n|variable-PL co|num coord|and n:prop|D adv:tem|then v|print
	n:let|f v|input det:art|a adj|positive n|integer n|negative inf|to
	v|quit&ZERO prep|in adj|large adj|red n|letter-PL .
%gra:	1|6|COM 2|6|JCT 3|5|DET 4|5|MOD 5|6|SUBJ 6|0|ROOT 7|8|MOD 8|9|SUBJ
	9|6|COMP 10|9|PRED 11|12|JCT 12|10|CMOD 13|14|QUANT 14|12|OBJ 15|19|COM
	16|15|CONJ 17|16|COORD 18|19|JCT 19|14|CMOD 20|21|SUBJ 21|19|COMP 22|25|DET
	23|24|MOD 24|25|MOD 25|27|SUBJ 26|27|INF 27|21|COMP 28|27|JCT 29|31|MOD
	30|31|MOD 31|28|POBJ 32|6|PUNCT
*S1:	it scans that in .
%mor:	pro:per|it n|scan-PL adv|that adv|in .
%gra:	1|2|SUBJ 2|0|INCROOT 3|4|JCT 4|2|JCT 5|2|PUNCT
*S1:	now notice what I'm doing .
%mor:	adv|now v|notice pro:int|what pro:sub|I~aux|be&1S part|do-PRESP .
%gra:	1|2|JCT 2|0|ROOT 3|6|LINK 4|6|SUBJ 5|6|AUX 6|2|COMP 7|2|PUNCT
*S1:	this is a C detail not an algorithm detail but it's an important
	one +...
%mor:	pro:dem|this cop|be&3S det:art|a n:prop|C n|detail neg|not
	det:art|a n|algorithm n|detail conj|but pro:per|it~cop|be&3S
	det:art|a adj|important pro:indef|one +...
%gra:	1|2|SUBJ 2|0|ROOT 3|5|DET 4|5|MOD 5|2|PRED 6|5|NEG 7|9|DET 8|9|MOD
	9|5|APP 10|12|LINK 11|12|SUBJ 12|9|CMOD 13|15|DET 14|15|MOD 15|12|PRED
	16|2|PUNCT
*S1:	scan f@l percent i@l address of num so I ask (.) the &-uh machine
	to read input from the keyboard (.) and try and interpret it as an
	integer .
%mor:	n|scan n:let|f n|percent n:let|i n|address prep|of co|num conj|so
	pro:sub|I v|ask det:art|the n|machine inf|to v|read&ZERO n|input
	prep|from det:art|the n|+n|key+n|board coord|and v|try coord|and
	v|interpret pro:per|it prep|as det:art|a n|integer .
%gra:	1|0|INCROOT 2|1|NJCT 3|2|POBJ 4|3|NJCT 5|4|POBJ 6|5|NJCT 7|6|POBJ
	8|10|LINK 9|10|SUBJ 10|1|CJCT 11|12|DET 12|10|OBJ 13|14|INF 14|12|XMOD
	15|14|OBJ 16|14|JCT 17|18|DET 18|16|POBJ 19|1|CONJ 20|19|COORD 21|1|CONJ
	22|21|COORD 23|22|OBJ 24|22|JCT 25|26|DET 26|24|POBJ 27|1|PUNCT
*S1:	if it succeeds +...
%mor:	conj|if pro:per|it v|succeed-3S +...
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PUNCT
*S1:	scan f@l will return one .
%mor:	n|scan n:let|f mod|will v|return pro:indef|one .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|OBJ 6|4|PUNCT
*S1:	so I can check (.) did scan f@l equal one or not ?
%mor:	co|so pro:sub|I mod|can v|check v|do&PAST n|scan n:let|f v|equal
	det:num|one coord|or neg|not ?
%gra:	1|4|COM 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|COMP 6|5|OBJ 7|8|SUBJ 8|6|CMOD
	9|8|OBJ 10|9|CONJ 11|10|COORD 12|4|PUNCT
*S1:	if it did I'm okay but if it didn't (.) the user typed gobbledygook
	.
%mor:	conj|if pro:per|it v|do&PAST pro:sub|I~cop|be&1S adj|okay conj|but
	conj|if pro:per|it mod|do&PAST~neg|not det:art|the n|use&dv-AGT
	part|type-PASTP n|gobbledygook .
%gra:	1|3|LINK 2|3|SUBJ 3|5|CJCT 4|5|SUBJ 5|0|ROOT 6|5|PRED 7|5|CONJ
	8|13|LINK 9|13|SUBJ 10|13|AUX 11|10|NEG 12|13|DET 13|7|COORD 14|13|XMOD
	15|14|OBJ 16|5|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	what I do in that case right here is I set num to minus one .
%mor:	pro:int|what pro:sub|I v|do prep|in det:dem|that n|case adv|right
	adv|here cop|be&3S pro:sub|I v|set&ZERO co|num prep|to n|minus
	pro:indef|one .
%gra:	1|3|LINK 2|3|SUBJ 3|11|SUBJ 4|3|JCT 5|6|DET 6|4|POBJ 7|8|JCT 8|3|JCT
	9|11|AUX 10|11|SUBJ 11|0|ROOT 12|15|COM 13|15|INF 14|13|POBJ 15|11|OBJ
	16|11|PUNCT
*S1:	because that'll force the rest of the code to quit .
%mor:	conj|because pro:rel|that~mod|will v|force det:art|the n|rest
	prep|of det:art|the n|code inf|to v|quit&ZERO .
%gra:	1|4|LINK 2|4|LINK 3|4|AUX 4|0|ROOT 5|6|DET 6|4|OBJ 7|6|NJCT 8|9|DET
	9|7|POBJ 10|11|INF 11|6|XMOD 12|4|PUNCT
*S1:	so I check whether scan f@l worked or not .
%mor:	co|so pro:sub|I n|check comp|whether n|scan n:let|f v|work-PAST
	coord|or neg|not .
%gra:	1|3|COM 2|3|SUBJ 3|0|INCROOT 4|7|LINK 5|7|JCT 6|7|SUBJ 7|3|CMOD
	8|7|CONJ 9|8|COORD 10|3|PUNCT
*S1:	that's pretty important when you +//.
%mor:	pro:dem|that~cop|be&3S adv|pretty adj|important conj|when
	pro:per|you +//.
%gra:	1|2|SUBJ 2|0|ROOT 3|4|JCT 4|2|PRED 5|2|JCT 6|5|POBJ 7|2|PUNCT
*S1:	when a human is typing input into the machine .
%mor:	conj|when det:art|a n|human aux|be&3S part|type-PRESP n|input
	prep|into det:art|the n|machine .
%gra:	1|5|LINK 2|3|DET 3|5|SUBJ 4|5|AUX 5|0|ROOT 6|5|OBJ 7|5|JCT 8|9|DET
	9|7|POBJ 10|5|PUNCT
*S1:	(be)cause humans sometimes make mistakes +...
%mor:	conj|because n|human-PL adv|sometimes v|make n|mistake-PL +...
%gra:	1|2|LINK 2|4|SUBJ 3|4|JCT 4|0|ROOT 5|4|OBJ 6|4|PUNCT
*S1:	then +...
%mor:	adv:tem|then +...
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	below that (.) here's this big while@q loop .
%mor:	adv|below adv|that pro:exist|here~cop|be&3S det:dem|this adj|big
	meta|while n|loop .
%gra:	1|4|JCT 2|4|JCT 3|4|SUBJ 4|0|ROOT 5|8|DET 6|8|MOD 7|8|MOD 8|4|PRED
	9|4|PUNCT
*S1:	it's this loop .
%mor:	pro:per|it~cop|be&3S det:dem|this n|loop .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|2|PUNCT
*S1:	it's just this loop .
%mor:	pro:per|it~cop|be&3S adj|just det:dem|this n|loop .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|MOD 4|5|DET 5|2|PRED 6|2|PUNCT
*S1:	while num is bigger than zero (.) now I threw in some bells and
	whistles (.) print out some information and stuff but it's really
	just this loop (.) while num is bigger than zero (.) and then (.)
	all of a sudden we see this task .
%mor:	conj|while co|num aux|be&3S adj|big-CP prep|than det:num|zero
	adv|now pro:sub|I v|throw&PAST prep|in qn|some n|bell-PL coord|and
	v|whistle-3S v|print adv|out qn|some n|inform&dv-TION coord|and
	n|stuff conj|but pro:per|it~cop|be&3S adv|real&dadj-LY adv|just
	det:dem|this n|loop conj|while co|num aux|be&3S adj|big-CP prep|than
	det:num|zero coord|and adv:tem|then pro:indef|all prep|of det:art|a
	adj|sudden pro:sub|we v|see det:dem|this n|task .
%gra:	1|9|LINK 2|9|SUBJ 3|9|AUX 4|3|PRED 5|4|JCT 6|7|QUANT 7|5|POBJ 8|9|SUBJ
	9|0|ROOT 10|9|JCT 11|12|QUANT 12|10|POBJ 13|9|CONJ 14|13|COORD
	15|14|COMP 16|15|JCT 17|18|QUANT 18|15|OBJ 19|18|CONJ 20|19|COORD 21|23|LINK
	22|23|SUBJ 23|9|CJCT 24|25|JCT 25|27|JCT 26|27|DET 27|23|PRED 28|9|PUNCT
	29|28|INCROOT 30|29|INCROOT 31|30|PRED 32|31|JCT 33|32|POBJ 34|41|LINK
	35|41|JCT 36|41|JCT 37|36|NJCT 38|39|DET 39|37|POBJ 40|41|SUBJ 41|33|CJCT
	42|43|DET 43|41|OBJ 44|30|PUNCT
*S1:	check if the number's prime or not and it looks exactly like this .
%mor:	n|check comp|if det:art|the adj|number&dn-POSS n|prime coord|or
	neg|not coord|and pro:per|it v|look-3S adv|exact&dadj-LY v|like
	pro:dem|this .
%gra:	1|0|INCROOT 2|10|LINK 3|5|DET 4|5|MOD 5|10|SUBJ 6|5|CONJ 7|6|COORD
	8|5|CONJ 9|8|COORD 10|1|CMOD 11|10|JCT 12|10|COMP 13|12|OBJ 14|1|PUNCT
*S1:	check the special case of num equals one .
%mor:	v|check det:art|the n|special n|case prep|of co|num v|equal-3S
	pro:indef|one .
%gra:	1|0|ROOT 2|4|DET 3|4|MOD 4|1|OBJ 5|4|NJCT 6|7|COM 7|5|POBJ 8|7|OBJ
	9|1|PUNCT
*S1:	set D to num minus one .
%mor:	v|set&ZERO n:prop|D prep|to co|num prep|minus pro:indef|one .
%gra:	1|0|ROOT 2|1|OBJ 3|1|JCT 4|3|POBJ 5|4|JCT 6|5|POBJ 7|1|PUNCT
*S1:	do this while@q loop while [/] &w while num percent D is not zero .
%mor:	v|do det:dem|this meta|while n|loop conj|while co|num n|percent
	n:prop|D cop|be&3S neg|not det:num|zero .
%gra:	1|0|ROOT 2|4|DET 3|4|MOD 4|1|OBJ 5|9|LINK 6|8|COM 7|8|MOD 8|9|SUBJ
	9|1|CJCT 10|9|NEG 11|9|PRED 12|1|PUNCT
*S1:	reduce D by one throughout +//.
%mor:	v|reduce n:prop|D prep|by det:num|one adv|throughout +//.
%gra:	1|0|ROOT 2|1|OBJ 3|1|JCT 4|3|POBJ 5|4|JCT 6|1|PUNCT
*S1:	through that loop .
%mor:	prep|through det:dem|that n|loop .
%gra:	1|0|INCROOT 2|3|DET 3|1|POBJ 4|1|PUNCT
*S1:	when I fall out_of the bottom of that loop (.) I know if &-uh the
	number's prime or not (.) and I print out that answer .
%mor:	conj|when pro:sub|I v|fall prep|out_of det:art|the n|bottom prep|of
	det:dem|that n|loop pro:sub|I v|know comp|if det:art|the
	adj|number&dn-POSS n|prime coord|or neg|not coord|and pro:sub|I
	v|print adv|out pro:dem|that v|answer .
%gra:	1|3|LINK 2|3|SUBJ 3|11|CJCT 4|3|JCT 5|6|DET 6|4|POBJ 7|6|NJCT 8|9|DET
	9|7|POBJ 10|11|SUBJ 11|0|ROOT 12|20|LINK 13|15|DET 14|15|MOD 15|20|SUBJ
	16|15|CONJ 17|16|COORD 18|20|LINK 19|20|SUBJ 20|11|COMP 21|20|JCT
	22|23|SUBJ 23|20|CJCT 24|11|PUNCT
*S1:	so I've literally (.) cut and pasted the C code that I wrote for
	this (.) and stuck it right into this step .
%mor:	adv|so pro:sub|I~aux|have adv|literal&dadj-LY n|cut coord|and
	v|paste-PAST det:art|the n:prop|C n|code pro:rel|that pro:sub|I
	v|write&PAST prep|for pro:dem|this coord|and v|stick&PAST pro:per|it
	adv|right prep|into det:dem|this n|step .
%gra:	1|5|JCT 2|5|SUBJ 3|5|AUX 4|5|JCT 5|0|INCROOT 6|5|CONJ 7|6|COORD
	8|10|DET 9|10|MOD 10|7|OBJ 11|13|LINK 12|13|SUBJ 13|10|CMOD 14|13|JCT
	15|14|POBJ 16|5|CONJ 17|16|COORD 18|17|OBJ 19|17|JCT 20|5|JCT 21|22|DET
	22|20|POBJ 23|5|PUNCT
*S1:	(0.7) once I know if the number is prime or not it's time to get a
	new number .
%mor:	adv|once pro:sub|I v|know comp|if det:art|the n|number cop|be&3S
	adj|prime coord|or neg|not pro:per|it~cop|be&3S n|time inf|to v|get
	det:art|a adj|new v|number .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|7|LINK 5|6|DET 6|7|SUBJ 7|3|COMP 8|7|PRED
	9|12|LINK 10|11|NEG 11|12|SUBJ 12|7|CJCT 13|12|PRED 14|15|INF 15|13|XMOD
	16|18|DET 17|18|MOD 18|15|OBJ 19|3|PUNCT
*S1:	(0.5) if one is not equal to scan f@l then scan f@l tries to get a
	number from the keyboard .
%mor:	conj|if pro:indef|one cop|be&3S neg|not n|equal inf|to v|scan
	n:let|f adv:tem|then v|scan n:let|f v|try-3S inf|to v|get det:art|a
	n|number prep|from det:art|the n|+n|key+n|board .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|NEG 5|3|PRED 6|7|INF 7|5|XMOD 8|10|AUX
	9|10|JCT 10|7|COMP 11|12|SUBJ 12|10|COMP 13|14|INF 14|12|COMP 15|16|DET
	16|14|OBJ 17|14|JCT 18|19|DET 19|17|POBJ 20|3|PUNCT
*S1:	if scan f@l succeeds it returns one (be)cause it read one number
	(.) nothing happens here (.) I'm at the end of the outer while@q
	loop (.) I go back up (.) make sure the number that came in is
	positive (.) find out if it's prime (.) get another number (.) end
	of the outer while@q loop (.) go on up (.) check the number's
	positive and so on .
%mor:	conj|if n|scan n:let|f v|succeed-3S pro:per|it v|return-3S
	pro:indef|one conj|because pro:per|it v|read&ZERO det:num|one
	n|number pro:indef|nothing v|happen-3S adv|here pro:sub|I~cop|be&1S
	prep|at det:art|the n|end prep|of det:art|the adj|outer meta|while
	n|loop pro:sub|I v|go adv|back adv|up v|make adj|sure det:art|the
	n|number adv|that v|come&PAST prep|in cop|be&3S adj|positive v|find
	adv|out conj|if pro:per|it~cop|be&3S adj|prime v|get qn|another
	n|number n|end prep|of det:art|the adj|outer meta|while n|loop v|go
	prep|on adv|up v|check det:art|the adj|number&dn-POSS n|positive
	coord|and co|so adv|on .
%gra:	1|4|LINK 2|3|MOD 3|4|SUBJ 4|6|CJCT 5|6|SUBJ 6|0|ROOT 7|6|OBJ 8|10|LINK
	9|10|SUBJ 10|14|CJCT 11|12|QUANT 12|10|OBJ 13|14|SUBJ 14|6|COMP
	15|17|JCT 16|17|SUBJ 17|14|COMP 18|17|JCT 19|20|DET 20|18|POBJ 21|20|NJCT
	22|25|DET 23|25|MOD 24|25|MOD 25|21|POBJ 26|27|SUBJ 27|6|CJCT 28|27|JCT
	29|27|JCT 30|27|COMP 31|30|PRED 32|33|DET 33|35|SUBJ 34|35|JCT 35|39|CJCT
	36|35|JCT 37|36|POBJ 38|39|SUBJ 39|31|CMOD 40|39|JCT 41|43|LINK 42|43|SUBJ
	43|39|CJCT 44|43|PRED 45|43|CPRED 46|47|QUANT 47|45|OBJ 48|47|PRED
	49|48|NJCT 50|51|DET 51|49|POBJ 52|54|LINK 53|54|SUBJ 54|48|CMOD 55|54|JCT
	56|54|JCT 57|54|XJCT 58|60|DET 59|60|MOD 60|57|OBJ 61|60|CONJ 62|63|COM
	63|61|COORD 64|6|PUNCT
*S1:	on the other hand if scan f@l failed here (.) (be)cause somehow
	someone typed gobbledygook (.) I execute a statement called break .
%mor:	prep|on det:art|the qn|other n|hand conj|if n|scan n:let|f
	v|fail-PAST adv|here conj|because adv|somehow pro:indef|someone
	v|type-PAST n|gobbledygook pro:sub|I v|execute det:art|a
	n|state&dv-MENT part|call-PASTP n|break .
%gra:	1|16|JCT 2|4|DET 3|4|QUANT 4|1|POBJ 5|8|LINK 6|7|MOD 7|8|SUBJ 8|16|CJCT
	9|8|JCT 10|13|LINK 11|13|JCT 12|13|SUBJ 13|16|CJCT 14|13|OBJ 15|16|SUBJ
	16|0|ROOT 17|18|DET 18|16|OBJ 19|18|XMOD 20|19|OBJ 21|16|PUNCT
*S1:	I said we could have an escape (.) a little escape hatch from
	inside a loop (.) and here's an example of it .
%mor:	pro:sub|I v|say&PAST pro:sub|we mod|could v|have det:art|a n|escape
	det:art|a adj|little n|escape n|hatch prep|from n|inside det:art|a
	n|loop coord|and pro:exist|here~cop|be&3S det:art|a n|example
	prep|of pro:per|it .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|SUBJ 4|5|AUX 5|2|COMP 6|7|DET 7|5|OBJ 8|11|DET
	9|10|MOD 10|11|MOD 11|7|CMOD 12|11|NJCT 13|12|POBJ 14|15|DET 15|11|APP
	16|18|LINK 17|18|SUBJ 18|15|CMOD 19|20|DET 20|18|PRED 21|20|NJCT 22|21|POBJ
	23|2|PUNCT
*S1:	that's why I wrote it this way (.) just to show an example of break
	(.) if scan f@l didn't get a good number (.) we should just quit .
%mor:	pro:dem|that~cop|be&3S pro:int|why pro:sub|I v|write&PAST
	pro:per|it det:dem|this n|way adj|just inf|to v|show det:art|a
	n|example prep|of n|break conj|if n|scan n:let|f mod|do&PAST~neg|not
	v|get det:art|a adj|good n|number pro:sub|we mod|should adv|just
	part|quit&PASTP .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|LINK 4|5|SUBJ 5|2|CPRED 6|5|OBJ 7|8|DET 8|5|JCT
	9|8|PRED 10|11|INF 11|9|XMOD 12|13|DET 13|11|OBJ 14|13|NJCT 15|14|POBJ
	16|21|LINK 17|21|JCT 18|21|SUBJ 19|21|AUX 20|19|NEG 21|28|CJCT 22|24|DET
	23|24|MOD 24|21|OBJ 25|28|SUBJ 26|28|AUX 27|28|JCT 28|13|XMOD 29|2|PUNCT
*S1:	what this break does is jump out_of the enclosing while .
%mor:	pro:int|what det:dem|this n|break v|do&3S cop|be&3S v|jump
	prep|out_of det:art|the part|enclose-PRESP n|while .
%gra:	1|3|DET 2|3|DET 3|4|SUBJ 4|6|SUBJ 5|6|AUX 6|0|ROOT 7|6|JCT 8|10|DET
	9|10|MOD 10|7|POBJ 11|6|PUNCT
*S1:	so it jumps out_of this loop (.) and we're done we execute the
	statements that follow which just print quitting (.) and finish up
	+...
%mor:	co|so pro:per|it v|jump-3S prep|out_of det:dem|this n|loop
	coord|and pro:sub|we~aux|be&PRES part|do&PASTP pro:sub|we v|execute
	det:art|the n|state&dv-MENT-PL pro:rel|that v|follow pro:int|which
	adj|just n|print part|quit-PRESP coord|and v|finish adv|up +...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|6|DET 6|4|POBJ 7|10|LINK 8|10|SUBJ
	9|10|AUX 10|3|CJCT 11|12|SUBJ 12|10|COMP 13|14|DET 14|12|OBJ 15|16|LINK
	16|14|CMOD 17|19|LINK 18|19|MOD 19|16|OBJ 20|19|XMOD 21|20|CONJ
	22|21|COORD 23|22|JCT 24|3|PUNCT
*S1:	couple of things one (.) I have a while@q loop inside a while@q
	loop .
%mor:	n|couple prep|of n|thing-PL pro:indef|one pro:sub|I v|have
	det:art|a meta|while n|loop prep|inside det:art|a meta|while n|loop
	.
%gra:	1|4|MOD 2|1|NJCT 3|2|POBJ 4|0|ROOT 5|6|SUBJ 6|4|CMOD 7|9|DET 8|9|MOD
	9|6|OBJ 10|9|NJCT 11|13|DET 12|13|MOD 13|10|POBJ 14|4|PUNCT
*S1:	I can have <while loops inside> [/] while loops inside while loops
	.
%mor:	pro:sub|I mod|can v|have n|while v|loop-3S prep|inside n|while
	n|loop-PL .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|SUBJ 5|3|COMP 6|5|JCT 7|8|MOD 8|6|POBJ
	9|3|PUNCT
*S1:	I can put loops inside each_other .
%mor:	pro:sub|I mod|can v|put&ZERO n|loop-PL prep|inside
	pro:refl|each_other .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|OBJ 5|3|JCT 6|5|POBJ 7|3|PUNCT
*S1:	that's frequently very useful (.) for a_lot_of things we do it is
	(.) crucial .
%mor:	pro:dem|that~cop|be&3S adv|frequent&dadj-LY adv|very
	adj|use&dn-FULL prep|for qn|a_lot_of n|thing-PL pro:sub|we v|do
	pro:per|it cop|be&3S adj|crucial .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|5|JCT 5|2|PRED 6|5|JCT 7|8|QUANT 8|6|POBJ
	9|10|SUBJ 10|2|CJCT 11|12|SUBJ 12|10|COMP 13|12|PRED 14|2|PUNCT
*S1:	you can't do a_lot_of (.) very interesting things without putting
	loops inside loops .
%mor:	pro:per|you mod|can~neg|not v|do qn|a_lot_of adv|very
	adj|interesting n|thing-PL prep|without n:gerund|put-PRESP n|loop-PL
	prep|inside n|loop-PL .
%gra:	1|4|SUBJ 2|4|AUX 3|2|NEG 4|0|ROOT 5|8|QUANT 6|7|JCT 7|8|MOD 8|4|OBJ
	9|4|JCT 10|9|POBJ 11|10|OBJ 12|11|NJCT 13|12|POBJ 14|4|PUNCT
*S1:	all I've done here is (.) put (.) this loop (.) inside that loop .
%mor:	pro:indef|all pro:sub|I~aux|have part|do&PASTP adv|here cop|be&3S
	v|put&ZERO det:dem|this n|loop prep|inside det:dem|that n|loop .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|7|SUBJ 5|4|JCT 6|7|AUX 7|0|ROOT 8|9|DET
	9|7|OBJ 10|9|NJCT 11|12|DET 12|10|POBJ 13|7|PUNCT
*S1:	second was the fact that once I had this (.) I made sure it worked
	I knew it worked (.) I could pretty much (.) chuck it right in here
	(.) and I knew that any errors I had with this code would be due to
	this other stuff (.) not this .
%mor:	adv|second cop|be&PAST&13S det:art|the n|fact pro:rel|that adv|once
	pro:sub|I v|have&PAST det:dem|this pro:sub|I v|make&PAST adj|sure
	pro:per|it v|work-PAST pro:sub|I v|know&PAST pro:per|it v|work-PAST
	pro:sub|I mod|could adj|pretty adv|much v|chuck pro:per|it adj|right
	prep|in n|here coord|and pro:sub|I v|know&PAST comp|that qn|any
	n|error-PL pro:sub|I v|have&PAST prep|with det:dem|this n|code
	mod|will&COND cop|be n|due prep|to det:dem|this qn|other n|stuff
	neg|not pro:dem|this .
%gra:	1|2|JCT 2|0|ROOT 3|4|DET 4|2|PRED 5|8|LINK 6|8|JCT 7|8|SUBJ 8|4|CMOD
	9|11|DET 10|11|SUBJ 11|2|CJCT 12|16|JCT 13|14|SUBJ 14|12|CMOD 15|16|SUBJ
	16|11|COMP 17|16|OBJ 18|16|ENUM 19|21|SUBJ 20|21|AUX 21|23|JCT 22|21|JCT
	23|18|COMP 24|23|OBJ 25|24|PRED 26|25|JCT 27|26|POBJ 28|30|LINK
	29|30|SUBJ 30|25|CJCT 31|35|LINK 32|33|QUANT 33|35|JCT 34|35|SUBJ 35|30|COMP
	36|35|JCT 37|38|DET 38|36|POBJ 39|40|AUX 40|35|CJCT 41|40|PRED 42|41|NJCT
	43|45|DET 44|45|QUANT 45|42|POBJ 46|45|NEG 47|41|ENUM 48|2|PUNCT
*S1:	I trusted this step .
%mor:	pro:sub|I v|trust-PAST det:dem|this n|step .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|OBJ 5|2|PUNCT
*S1:	this step was right .
%mor:	pro:dem|this n|step cop|be&PAST&13S co|right .
%gra:	1|2|DET 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|3|PUNCT
*S1:	&=pause_while_lowering_projection_screen oh let me run that code
	(.) so let me once again plunge us into darkness (0.5) (be)cause I
	especially want to show you what happens when I input garbage .
%mor:	co|oh v|let&ZERO pro:obj|me v|run det:dem|that n|code co|so
	v|let&ZERO pro:obj|me adv|once adv|again v|plunge pro:obj|us
	prep|into n|dark&dadj-NESS conj|because pro:sub|I
	adv|especial&dadj-LY v|want inf|to v|show pro:per|you pro:int|what
	v|happen-3S conj|when pro:sub|I n|input n|garbage .
%gra:	1|2|COM 2|0|ROOT 3|4|SUBJ 4|2|COMP 5|6|DET 6|4|OBJ 7|8|COM 8|2|CJCT
	9|8|OBJ 10|8|JCT 11|8|JCT 12|8|COMP 13|12|OBJ 14|12|JCT 15|14|POBJ
	16|19|LINK 17|19|SUBJ 18|19|JCT 19|8|CJCT 20|21|INF 21|19|COMP 22|21|OBJ
	23|24|SUBJ 24|21|COMP 25|28|LINK 26|28|MOD 27|28|MOD 28|24|OBJ 29|2|PUNCT
*S1:	what I'm talking about .
%mor:	pro:int|what pro:sub|I~aux|be&1S part|talk-PRESP adv|about .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|JCT 6|4|PUNCT
*S1:	&=pause_while_setting_up_computer okay input a positive integer .
%mor:	co|okay v|input det:art|a adj|positive n|integer .
%gra:	1|2|COM 2|0|ROOT 3|5|DET 4|5|MOD 5|2|OBJ 6|2|PUNCT
*S1:	alright &-uh twenty three's good (.) says it +//.
%mor:	co|alright det:num|twenty adj|three&dn-POSS adj|good v|say-3S
	pro:per|it +//.
%gra:	1|3|COM 2|3|QUANT 3|5|JCT 4|5|MOD 5|0|ROOT 6|5|OBJ 7|5|PUNCT
*S1:	is it prime it checks (.) okay &i it did this .
%mor:	cop|be&3S pro:per|it adj|prime pro:per|it v|check-3S adj|okay
	pro:per|it mod|do&PAST det:dem|this .
%gra:	1|5|LINK 2|5|SUBJ 3|5|JCT 4|5|SUBJ 5|0|ROOT 6|5|PUNCT 7|9|SUBJ 8|9|AUX
	9|6|INCROOT 10|9|PUNCT
*S1:	<it did this> [/] it did this it told me that it's prime (.) and
	now it's down here .
%mor:	pro:per|it v|do&PAST det:dem|this pro:per|it v|tell&PAST pro:obj|me
	comp|that pro:per|it~cop|be&3S n|prime coord|and adv|now
	pro:per|it~cop|be&3S prep|down n|here .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|DET 4|5|SUBJ 5|2|COMP 6|5|OBJ 7|9|LINK 8|9|SUBJ
	9|5|COMP 10|9|PRED 11|14|LINK 12|14|JCT 13|14|SUBJ 14|9|CJCT 15|14|JCT
	16|15|POBJ 17|2|PUNCT
*S1:	and I give it another number .
%mor:	coord|and pro:sub|I v|give pro:per|it qn|another v|number .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|OBJ 5|6|QUANT 6|3|CJCT 7|3|PUNCT
*S1:	hundred and twenty seven (.) boy I'm good at picking primes aren't
	I ?
%mor:	det:num|hundred coord|and det:num|twenty det:num|seven n|boy
	pro:sub|I~cop|be&1S adj|good prep|at n:gerund|pick-PRESP n|prime-PL
	cop|be&PRES~neg|not pro:sub|I ?
%gra:	1|5|QUANT 2|1|CONJ 3|4|DATE 4|2|COORD 5|7|JCT 6|7|SUBJ 7|0|ROOT
	8|7|PRED 9|7|JCT 10|9|POBJ 11|12|SUBJ 12|10|COMP 13|12|NEG 14|12|PRED
	15|7|PUNCT
*S1:	it got a number (.) went up to the top the number was positive so
	it checked if it's prime or not (.) and told me .
%mor:	pro:per|it v|get&PAST det:art|a n|number v|go&PAST adv|up prep|to
	det:art|the n|top det:art|the n|number cop|be&PAST&13S adj|positive
	co|so pro:per|it v|check-PAST comp|if pro:per|it~cop|be&3S n|prime
	coord|or neg|not coord|and v|tell&PAST pro:obj|me .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|5|SUBJ 5|2|COMP 6|5|JCT 7|5|JCT 8|9|DET
	9|7|POBJ 10|11|DET 11|12|SUBJ 12|5|CJCT 13|12|PRED 14|16|COM 15|16|SUBJ
	16|12|CJCT 17|19|LINK 18|19|SUBJ 19|16|COMP 20|19|PRED 21|20|CONJ
	22|21|COORD 23|19|CONJ 24|23|COORD 25|24|OBJ 26|2|PUNCT
*S1:	and now it's sitting down here again waiting for another number .
%mor:	coord|and adv|now pro:per|it~aux|be&3S part|sit-PRESP prep|down
	n|here adv|again part|wait-PRESP prep|for qn|another v|number .
%gra:	1|5|LINK 2|5|JCT 3|5|SUBJ 4|5|AUX 5|0|ROOT 6|5|JCT 7|6|POBJ 8|5|JCT
	9|5|XJCT 10|9|JCT 11|12|QUANT 12|10|POBJ 13|5|PUNCT
*S1:	hundred and twenty three (.) it's not prime +...
%mor:	det:num|hundred coord|and det:num|twenty det:num|three
	pro:per|it~cop|be&3S neg|not adj|prime +...
%gra:	1|6|LINK 2|1|CONJ 3|4|DATE 4|2|COORD 5|6|SUBJ 6|0|ROOT 7|6|NEG 8|6|PRED
	9|6|PUNCT
*S1:	I input a hundred and twenty three we went up here it's positive it
	checks if it's prime or not (.) it says oh [/] oh I'm &s &-uh a
	hundred and twenty three is not prime it's divisible by forty one .
%mor:	pro:sub|I v|input det:art|a det:num|hundred coord|and
	det:num|twenty det:num|three pro:sub|we v|go&PAST prep|up n|here
	pro:per|it~cop|be&3S adj|positive pro:per|it v|check-3S conj|if
	pro:per|it~cop|be&3S n|prime coord|or neg|not pro:per|it v|say-3S
	co|oh pro:sub|I~cop|be&1S det:art|a det:num|hundred coord|and
	det:num|twenty det:num|three aux|be&3S neg|not adj|prime
	pro:per|it~cop|be&3S adj|divisible prep|by det:num|forty det:num|one
	.
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|OBJ 5|4|CONJ 6|5|COORD 7|9|QUANT 8|9|SUBJ
	9|2|CJCT 10|9|JCT 11|10|POBJ 12|13|SUBJ 13|9|CJCT 14|13|PRED 15|16|SUBJ
	16|13|CPRED 17|19|LINK 18|19|SUBJ 19|24|CJCT 20|19|PRED 21|20|CONJ
	22|21|COORD 23|24|SUBJ 24|16|COMP 25|27|COM 26|27|SUBJ 27|24|COMP 28|29|DET
	29|27|PRED 30|29|CONJ 31|30|COORD 32|35|SUBJ 33|35|AUX 34|33|NEG
	35|37|JCT 36|37|SUBJ 37|29|CMOD 38|37|PRED 39|37|JCT 40|41|ENUM 41|39|POBJ
	42|2|PUNCT
*S1:	now if I put in say minus thirty +//.
%mor:	adv|now conj|if pro:sub|I v|put&ZERO adv|in v|say prep|minus
	det:num|thirty +//.
%gra:	1|4|JCT 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|6|JCT 6|4|COMP 7|6|JCT 8|7|POBJ
	9|4|PUNCT
*S1:	twenty three it quits .
%mor:	det:num|twenty det:num|three pro:per|it v|quit-3S .
%gra:	1|2|QUANT 2|3|QUANT 3|4|SUBJ 4|0|ROOT 5|4|PUNCT
*S1:	okay because it's set up (.) the following way .
%mor:	co|okay conj|because pro:per|it~cop|be&3S n|set prep|up det:art|the
	n:gerund|follow-PRESP adv|way .
%gra:	1|4|COM 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|4|PRED 6|5|NJCT 7|8|DET 8|6|POBJ
	9|4|JCT 10|4|PUNCT
*S1:	it just read minus twenty three (.) it went up here (.) asked is
	minus twenty three positive no (.) so don't do the loop body just
	jump down we're done with this step do whatever comes next .
%mor:	pro:per|it adv|just v|read&ZERO n|minus det:num|twenty
	det:num|three pro:per|it v|go&PAST prep|up n|here v|ask-PAST
	aux|be&3S n|minus det:num|twenty det:num|three adj|positive co|no
	adv|so mod|do~neg|not v|do det:art|the n|loop n|body adj|just n|jump
	adv|down pro:sub|we~aux|be&PRES part|do&PASTP prep|with det:dem|this
	n|step v|do pro:int|whatever v|come-3S adv|next .
%gra:	1|3|SUBJ 2|3|JCT 3|0|ROOT 4|5|MOD 5|6|QUANT 6|3|OBJ 7|8|SUBJ 8|3|COMP
	9|8|JCT 10|9|POBJ 11|8|XJCT 12|11|OBJ 13|12|PRED 14|15|QUANT 15|16|QUANT
	16|13|POSTMOD 17|21|COM 18|21|JCT 19|21|AUX 20|19|NEG 21|16|CMOD
	22|24|DET 23|24|MOD 24|34|SUBJ 25|26|MOD 26|30|JCT 27|26|NJCT 28|30|SUBJ
	29|30|AUX 30|24|CMOD 31|30|JCT 32|33|DET 33|31|POBJ 34|21|COMP 35|36|SUBJ
	36|34|COMP 37|36|JCT 38|3|PUNCT
*S1:	(0.6) let's run it again (.) I'm very curious about &-uh ten
	thousand two hundred and thirty four (.) darn (.) it's not prime (.)
	asking for a positive integer .
%mor:	v|let~pro:obj|us v|run pro:per|it adv|again pro:sub|I~cop|be&1S
	adv|very adj|curious prep|about det:num|ten det:num|thousand
	det:num|two det:num|hundred coord|and det:num|thirty det:num|four
	n|darn pro:per|it~aux|be&3S neg|not n|prime part|ask-PRESP prep|for
	det:art|a adj|positive n|integer .
%gra:	1|7|CJCT 2|1|OBJ 3|1|COMP 4|3|OBJ 5|3|JCT 6|7|SUBJ 7|0|ROOT 8|9|JCT
	9|7|PRED 10|9|JCT 11|12|QUANT 12|14|DATE 13|14|DATE 14|10|CPOBJ 15|14|CONJ
	16|18|QUANT 17|18|QUANT 18|15|COORD 19|20|SUBJ 20|14|CJCT 21|20|NEG
	22|20|PRED 23|22|XMOD 24|23|JCT 25|27|DET 26|27|MOD 27|24|POBJ 28|7|PUNCT
*S1:	now (.) what prevents me from typing this ?
%mor:	adv|now pro:int|what v|prevent-3S pro:obj|me prep|from
	part|type-PRESP pro:dem|this ?
%gra:	1|3|JCT 2|3|SUBJ 3|0|ROOT 4|3|OBJ 5|3|JCT 6|5|POBJ 7|6|OBJ 8|3|PUNCT
*S1:	AWF semicolonoids@n (.) okay which I type all the time (.) nothing
	prevents me from typing that (.) and nothing prevents that from
	getting sucked in to this step right here .
%mor:	n:prop|AWF neo|semicolonoids adj|okay pro:int|which pro:sub|I
	v|type qn|all det:art|the n|time pro:indef|nothing v|prevent-3S
	pro:obj|me prep|from n:gerund|type-PRESP adv|that coord|and
	pro:indef|nothing v|prevent-3S comp|that prep|from
	n:gerund|get-PRESP v|suck-PAST adv|in prep|to det:dem|this n|step
	adv|right adv|here .
%gra:	1|2|SUBJ 2|11|LINK 3|11|JCT 4|6|LINK 5|6|SUBJ 6|11|CJCT 7|9|QUANT
	8|9|DET 9|6|OBJ 10|11|SUBJ 11|0|ROOT 12|11|OBJ 13|11|JCT 14|13|POBJ 15|14|JCT
	16|18|LINK 17|18|SUBJ 18|14|CJCT 19|22|LINK 20|22|JCT 21|22|SUBJ
	22|18|COMP 23|22|JCT 24|22|JCT 25|26|DET 26|24|POBJ 27|28|JCT 28|22|JCT
	29|11|PUNCT
*S1:	get num from human .
%mor:	v|get co|num prep|from n|human .
%gra:	1|0|ROOT 2|1|OBJ 3|2|JCT 4|3|POBJ 5|1|PUNCT
*S1:	that's done with that scan f@l .
%mor:	pro:dem|that~aux|be&3S part|do&PASTP prep|with det:dem|that n|scan
	n:let|f .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|JCT 5|6|DET 6|7|MOD 7|4|POBJ 8|3|PUNCT
*S1:	but the scan f@l easily looks at (.) AWF semicolonoids@n and says
	(.) you are not a number .
%mor:	conj|but det:art|the n|scan n:let|f adv|ease&dadj-Y-LY v|look-3S
	prep|at n:prop|AWF neo|semicolonoids coord|and v|say-3S pro:per|you
	cop|be&PRES neg|not det:art|a v|number .
%gra:	1|6|LINK 2|3|DET 3|6|SUBJ 4|3|POSTMOD 5|6|JCT 6|0|ROOT 7|6|JCT 8|7|POBJ
	9|7|POBJ 10|9|CONJ 11|10|COORD 12|13|SUBJ 13|11|COMP 14|13|NEG
	15|16|DET 16|13|PRED 17|6|PUNCT
*S1:	and so that (.) scan f@l does not return one it did not read a
	number (.) and I hit that break statement .
%mor:	coord|and adv|so det:dem|that n|scan n:let|f mod|do&3S neg|not
	adj|return det:num|one pro:per|it mod|do&PAST neg|not v|read&ZERO
	det:art|a n|number coord|and pro:sub|I v|hit&ZERO pro:dem|that
	n|break n|state&dv-MENT .
%gra:	1|5|LINK 2|5|JCT 3|4|DET 4|2|POBJ 5|0|ROOT 6|8|AUX 7|6|NEG 8|5|PRED
	9|13|LINK 10|13|SUBJ 11|13|AUX 12|11|NEG 13|8|CMOD 14|15|DET 15|13|OBJ
	16|18|LINK 17|18|SUBJ 18|13|CJCT 19|21|DET 20|21|MOD 21|18|OBJ 22|5|PUNCT
*S1:	I jump out_of this loop (.) right here (.) and go on to the next
	step .
%mor:	pro:sub|I v|jump prep|out_of det:dem|this n|loop adv|right adv|here
	coord|and v|go adv|on prep|to det:art|the adj|next n|step .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|5|DET 5|3|POBJ 6|7|JCT 7|2|JCT 8|2|CONJ
	9|8|COORD 10|9|JCT 11|9|JCT 12|14|DET 13|14|MOD 14|11|POBJ 15|2|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	very important to check your +//.
%mor:	adv|very adj|important inf|to v|check det:poss|your +//.
%gra:	1|2|JCT 2|0|INCROOT 3|4|INF 4|2|XMOD 5|4|OBJ 6|2|PUNCT
*S1:	the return from that scan f@l .
%mor:	det:art|the n|return prep|from det:dem|that n|scan n:let|f .
%gra:	1|2|DET 2|6|SUBJ 3|2|NJCT 4|5|DET 5|3|POBJ 6|0|ROOT 7|6|PUNCT
*S1:	if I hadn't checked the return from that scan f@l (.) this code
	would actually enter an infinite loop and run forever .
%mor:	conj|if pro:sub|I aux|have&PAST~neg|not part|check-PASTP
	det:art|the n|return prep|from det:dem|that n|scan n:let|f
	det:dem|this n|code mod|will&COND adv|actual&dadj-LY v|enter
	det:art|a in#adj|finite n|loop coord|and v|run adv:tem|forever .
%gra:	1|5|LINK 2|5|SUBJ 3|5|AUX 4|3|NEG 5|11|CJCT 6|7|DET 7|5|OBJ 8|5|JCT
	9|10|DET 10|8|POBJ 11|16|LINK 12|13|DET 13|16|SUBJ 14|16|AUX 15|16|JCT
	16|0|ROOT 17|19|DET 18|19|MOD 19|16|OBJ 20|16|CONJ 21|20|COORD 22|21|JCT
	23|16|PUNCT
*S1:	I'd lose all control .
%mor:	pro:sub|I~mod|genmod v|lose qn|all n|control .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|QUANT 5|3|OBJ 6|3|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	yeah .
%mor:	co|yeah .
%gra:	1|0|INCROOT 2|1|PUNCT
*S2:	what if you write &-uh one hundred and seven A B C xxx .
%mor:	pro:int|what conj|if pro:per|you v|write det:num|one
	det:num|hundred coord|and det:num|seven n:prop|A n:prop|B n:prop|C .
%gra:	1|4|LINK 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|6|QUANT 6|4|OBJ 7|4|CONJ
	8|9|QUANT 9|11|NAME 10|11|NAME 11|7|COORD 12|4|PUNCT
*S1:	tell me what you want ?
%mor:	v|tell pro:obj|me pro:int|what pro:per|you v|want ?
%gra:	1|0|ROOT 2|1|OBJ 3|5|LINK 4|5|SUBJ 5|1|COMP 6|1|PUNCT
*S2:	one hundred and seven A B C .
%mor:	det:num|one det:num|hundred coord|and det:num|seven n:prop|A
	n:prop|B n:prop|C .
%gra:	1|2|QUANT 2|5|QUANT 3|2|CONJ 4|3|COORD 5|6|NAME 6|7|NAME 7|0|ROOT
	8|7|PUNCT
*S1:	one hundred and seven A B C that's actually a good question .
%mor:	det:num|one det:num|hundred coord|and det:num|seven n:prop|A
	n:prop|B n:prop|C pro:rel|that~cop|be&3S adv|actual&dadj-LY
	det:art|a adj|good n|question .
%gra:	1|2|DATE 2|5|QUANT 3|2|CONJ 4|3|COORD 5|6|NAME 6|7|NAME 7|0|ROOT
	8|9|LINK 9|7|CMOD 10|9|JCT 11|13|DET 12|13|MOD 13|9|PRED 14|7|PUNCT
*S1:	what's it gonna do ?
%mor:	pro:int|what~cop|be&3S pro:per|it part|go-PRESP~inf|to v|do ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|3|XMOD 5|6|INF 6|4|COMP 7|2|PUNCT
*S1:	&=unintelligible_answers:multiple no it's not gonna quit it's gonna
	find this number .
%mor:	co|no pro:per|it~aux|be&3S neg|not part|go-PRESP~inf|to
	part|quit&PASTP pro:per|it~aux|be&3S part|go-PRESP~inf|to v|find
	det:dem|this v|number .
%gra:	1|5|COM 2|5|SUBJ 3|5|AUX 4|3|NEG 5|0|ROOT 6|7|INF 7|5|XJCT 8|10|SUBJ
	9|10|AUX 10|7|COMP 11|12|INF 12|10|COMP 13|14|DET 14|12|COMP 15|5|PUNCT
*S1:	it's gonna ignore this junk (.) but when it +//.
%mor:	pro:per|it~aux|be&3S part|go-PRESP~inf|to v|ignore det:dem|this
	n|junk conj|but conj|when pro:per|it +//.
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|INF 5|3|COMP 6|7|DET 7|5|OBJ 8|3|CONJ
	9|10|LINK 10|8|COORD 11|3|PUNCT
*S1:	when scan f@l starts looking for a number I told it to look for a
	number it just looks for digits until it sees something that's not a
	digit (.) and then it says okay that was the number (.) and it'll
	ignore this .
%mor:	conj|when n|scan n:let|f v|start-3S part|look-PRESP prep|for
	det:art|a n|number pro:sub|I v|tell&PAST pro:per|it inf|to v|look
	prep|for det:art|a n|number pro:per|it adv|just cop|look-3S prep|for
	n|digit-PL conj|until pro:per|it v|see-3S pro:indef|something
	pro:rel|that~cop|be&3S neg|not det:art|a n|digit coord|and
	adv:tem|then pro:per|it v|say-3S adj|okay adv|that cop|be&PAST&13S
	det:art|the n|number coord|and pro:per|it~mod|will v|ignore
	det:dem|this .
%gra:	1|4|LINK 2|4|SUBJ 3|2|POSTMOD 4|10|CJCT 5|4|COMP 6|5|JCT 7|8|DET
	8|6|POBJ 9|10|SUBJ 10|0|ROOT 11|10|OBJ 12|13|INF 13|10|XJCT 14|13|JCT
	15|16|DET 16|14|POBJ 17|19|SUBJ 18|19|JCT 19|13|CJCT 20|19|JCT 21|20|POBJ
	22|24|LINK 23|24|SUBJ 24|19|CJCT 25|24|OBJ 26|27|LINK 27|25|CMOD 28|27|NEG
	29|30|DET 30|27|PRED 31|30|CONJ 32|31|COORD 33|34|SUBJ 34|30|CMOD
	35|34|PRED 36|37|JCT 37|35|CMOD 38|39|DET 39|37|PRED 40|43|LINK 41|43|SUBJ
	42|43|AUX 43|39|CMOD 44|43|OBJ 45|10|PUNCT
*S1:	it'll do a hundred and seven .
%mor:	pro:per|it~mod|will v|do det:art|a det:num|hundred coord|and
	det:num|seven .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|DET 5|3|OBJ 6|5|CONJ 7|6|COORD 8|3|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S3:	what if it was (.) one oh a@l seven ?
%mor:	pro:int|what conj|if pro:per|it cop|be&PAST&13S det:num|one co|oh
	n:let|a det:num|seven ?
%gra:	1|4|LINK 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|6|QUANT 6|8|COM 7|8|DATE 8|4|PRED
	9|4|PUNCT
*S1:	I'm sorry ?
%mor:	pro:sub|I~cop|be&1S adj|sorry ?
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PRED 4|2|PUNCT
*S3:	one oh a@l seven ?
%mor:	det:num|one co|oh n:let|a det:num|seven ?
%gra:	1|2|QUANT 2|4|COM 3|4|DATE 4|0|ROOT 5|4|PUNCT
*S1:	hang on [/] on that one (be)cause it did something interesting .
%mor:	v|hang prep|on det:dem|that pro:indef|one conj|because pro:per|it
	v|do&PAST pro:indef|something adj|interesting .
%gra:	1|0|ROOT 2|1|JCT 3|4|DET 4|2|POBJ 5|7|LINK 6|7|SUBJ 7|1|CJCT 8|7|OBJ
	9|8|POSTMOD 10|1|PUNCT
*S1:	okay I told you it would do a hundred and seven and it did (.)
	hundred and seven is prime (.) and then it said input a positive
	integer where was it [/] it was right here (.) and then suddenly it
	quit I didn't type anything .
%mor:	adj|okay pro:sub|I v|tell&PAST pro:per|you pro:per|it mod|will&COND
	v|do det:art|a det:num|hundred coord|and det:num|seven coord|and
	pro:per|it v|do&PAST det:num|hundred coord|and det:num|seven
	cop|be&3S n|prime coord|and adv:tem|then pro:per|it v|say&PAST
	n|input det:art|a adj|positive n|integer pro:rel|where
	cop|be&PAST&13S pro:per|it cop|be&PAST&13S adv|right adv|here
	coord|and adv:tem|then adv|sudden&dadj-LY pro:per|it v|quit&ZERO
	pro:sub|I mod|do&PAST~neg|not v|type pro:indef|anything .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|OBJ 5|7|SUBJ 6|7|AUX 7|3|COMP 8|9|DET
	9|7|OBJ 10|9|CONJ 11|10|COORD 12|14|LINK 13|14|SUBJ 14|7|CJCT 15|18|SUBJ
	16|15|CONJ 17|16|COORD 18|14|COMP 19|18|PRED 20|19|CONJ 21|20|COORD
	22|23|SUBJ 23|18|CPRED 24|23|OBJ 25|27|DET 26|27|MOD 27|24|APP 28|29|LINK
	29|27|CMOD 30|31|SUBJ 31|29|PRED 32|33|JCT 33|31|PRED 34|38|LINK 35|38|JCT
	36|38|JCT 37|38|SUBJ 38|33|CJCT 39|42|SUBJ 40|42|AUX 41|40|NEG
	42|38|COMP 43|42|OBJ 44|3|PUNCT
*S1:	xxx again .
%mor:	adv|again .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	hundred and +...
%mor:	det:num|hundred coord|and +...
%gra:	1|0|INCROOT 2|1|CONJ 3|1|PUNCT
*S1:	make it exactly the same hundred and seven A B C .
%mor:	v|make pro:per|it adv|exact&dadj-LY det:art|the adj|same
	det:num|hundred coord|and det:num|seven n:prop|A n:prop|B n:prop|C .
%gra:	1|0|ROOT 2|1|OBJ 3|6|JCT 4|6|DET 5|6|MOD 6|9|QUANT 7|6|CONJ 8|7|COORD
	9|1|OBJ 10|11|NAME 11|9|APP 12|1|PUNCT
*S1:	I will hit enter once (.) it'll tell you a hundred and seven is
	prime and quit .
%mor:	pro:sub|I mod|will n|hit v|enter adv|once pro:per|it~mod|will
	v|tell pro:per|you det:art|a det:num|hundred coord|and det:num|seven
	cop|be&3S adj|prime coord|and v|quit&ZERO .
%gra:	1|4|SUBJ 2|4|AUX 3|4|SUBJ 4|0|ROOT 5|4|JCT 6|8|SUBJ 7|8|AUX 8|4|COMP
	9|8|OBJ2 10|11|DET 11|14|SUBJ 12|11|CONJ 13|12|COORD 14|8|COMP 15|14|PRED
	16|14|CONJ 17|16|COORD 18|4|PUNCT
*S1:	what did it do ?
%mor:	pro:int|what mod|do&PAST pro:per|it v|do ?
%gra:	1|4|OBJ 2|4|AUX 3|4|SUBJ 4|0|ROOT 5|4|PUNCT
*S1:	well it saw &tho the digits one zero seven (.) then it saw
	something that wasn't a digit but took a hundred and seven as a
	number (.) everything was cool (.) then it went back to read more
	information .
%mor:	co|well pro:per|it v|see&PAST det:art|the n|digit-PL det:num|one
	det:num|zero det:num|seven adv:tem|then pro:per|it v|see&PAST
	pro:indef|something pro:rel|that cop|be&PAST&13S~neg|not det:art|a
	n|digit conj|but v|take&PAST det:art|a det:num|hundred coord|and
	det:num|seven prep|as det:art|a n|number pro:indef|everything
	cop|be&PAST&13S adj|cool adv:tem|then pro:per|it v|go&PAST adv|back
	prep|to v|read&ZERO adv|more n|inform&dv-TION .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|5|DET 5|11|SUBJ 6|7|QUANT 7|8|QUANT
	8|9|QUANT 9|11|JCT 10|11|SUBJ 11|3|COMP 12|11|OBJ 13|14|LINK 14|12|CMOD
	15|14|NEG 16|17|DET 17|14|PRED 18|17|CONJ 19|18|COORD 20|21|DET 21|19|OBJ
	22|21|CONJ 23|22|COORD 24|28|JCT 25|26|DET 26|24|POBJ 27|28|SUBJ 28|19|CJCT
	29|32|JCT 30|32|JCT 31|32|SUBJ 32|28|PRED 33|32|JCT 34|32|JCT 35|34|POBJ
	36|35|JCT 37|36|POBJ 38|3|PUNCT
*S1:	well that A B C doesn't disappear .
%mor:	co|well comp|that n:prop|A n:prop|B n:prop|C mod|do&3S~neg|not
	dis#v|appear .
%gra:	1|8|COM 2|4|LINK 3|4|NAME 4|5|NAME 5|8|SUBJ 6|8|AUX 7|6|NEG 8|0|ROOT
	9|8|PUNCT
*S1:	that A B C was &w sitting there waiting to be read in .
%mor:	comp|that n:prop|A n:prop|B n:prop|C aux|be&PAST&13S part|sit-PRESP
	adv|there part|wait-PRESP inf|to cop|be v|read&ZERO adv|in .
%gra:	1|3|LINK 2|3|NAME 3|6|SUBJ 4|3|APP 5|6|AUX 6|0|ROOT 7|6|JCT 8|6|XJCT
	9|11|INF 10|11|SUBJ 11|8|COMP 12|11|JCT 13|6|PUNCT
*S1:	it started trying to read a number (.) immediately got A and it
	said (.) this isn't a number (.) can't read a number .
%mor:	pro:per|it v|start-PAST part|try-PRESP inf|to v|read&ZERO det:art|a
	n|number adv|immediate&dadj-LY v|get&PAST n:prop|A coord|and
	pro:per|it v|say&PAST det:dem|this cop|be&3S~neg|not det:art|a
	n|number mod|can~neg|not v|read&ZERO det:art|a v|number .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|COMP 4|5|INF 5|3|COMP 6|7|DET 7|5|OBJ 8|9|JCT
	9|3|COMP 10|9|OBJ 11|13|LINK 12|13|SUBJ 13|9|CJCT 14|15|DET 15|13|COMP
	16|15|NEG 17|18|DET 18|21|SUBJ 19|21|AUX 20|19|NEG 21|15|CPRED 22|23|DET
	23|21|OBJ 24|2|PUNCT
*S1:	and it stops .
%mor:	coord|and pro:per|it v|stop-3S .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|3|PUNCT
*S1:	okay +..?
%mor:	co|okay +..?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	sorry yours was .
%mor:	co|sorry pro:poss|yours cop|be&PAST&13S .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|PUNCT
*S3:	one oh a@l seven .
%mor:	det:num|one co|oh n:let|a det:num|seven .
%gra:	1|2|QUANT 2|4|COM 3|4|DATE 4|0|ROOT 5|4|PUNCT
*S1:	one oh [: zero] capital a@l seven .
%mor:	det:num|one det:num|zero adj|capital n:let|a det:num|seven .
%gra:	1|5|DATE 2|3|QUANT 3|5|MOD 4|5|MOD 5|0|ROOT 6|5|PUNCT
*S1:	any predictions ?
%mor:	qn|any n|prediction-PL ?
%gra:	1|2|QUANT 2|0|INCROOT 3|2|PUNCT
*S1:	&=unintelligible_answers:multiple ten is not prime and stop .
%mor:	det:num|ten aux|be&3S neg|not adj|prime coord|and n|stop .
%gra:	1|4|SUBJ 2|4|AUX 3|2|NEG 4|0|ROOT 5|4|CONJ 6|5|COORD 7|4|PUNCT
*S1:	because it's gonna read this number (.) &s it looks at this oh
	that's a digit cool (.) that's a digit cool (.) that's not a digit
	that must be the number (.) ten (.) then that A doesn't go away it
	still sitting there waiting to be read .
%mor:	conj|because pro:per|it~aux|be&3S part|go-PRESP~inf|to v|read&ZERO
	det:dem|this n|number pro:per|it v|look-3S prep|at det:dem|this
	co|oh pro:dem|that~cop|be&3S det:art|a n|digit adj|cool
	pro:dem|that~cop|be&3S det:art|a n|digit adj|cool
	pro:dem|that~cop|be&3S neg|not det:art|a n|digit pro:rel|that
	mod|must cop|be det:art|the n|number det:num|ten adv:tem|then
	comp|that n:prop|A mod|do&3S~neg|not v|go adv|away pro:per|it
	adv|still part|sit-PRESP adv|there part|wait-PRESP inf|to cop|be
	v|read&ZERO .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|6|INF 6|4|COMP 7|8|DET 8|6|OBJ
	9|10|SUBJ 10|6|COMP 11|10|JCT 12|13|DET 13|11|POBJ 14|15|SUBJ 15|10|COMP
	16|17|DET 17|15|PRED 18|19|MOD 19|20|SUBJ 20|17|CMOD 21|22|DET 22|20|PRED
	23|24|MOD 24|25|SUBJ 25|22|CMOD 26|25|NEG 27|28|DET 28|25|PRED
	29|31|LINK 30|31|AUX 31|28|CMOD 32|33|DET 33|31|PRED 34|35|QUANT 35|33|NJCT
	36|40|LINK 37|40|SUBJ 38|40|AUX 39|38|NEG 40|35|COMP 41|40|JCT 42|40|OBJ
	43|44|JCT 44|42|XMOD 45|44|JCT 46|44|XJCT 47|49|INF 48|49|AUX 49|46|COMP
	50|4|PUNCT
*S1:	so right here I read ten (.) it's positive I check that it's prime
	it's not (.) right here I then (.) try and get more input (.) and it
	actually reads that A (.) and says (.) this is not a number (.)
	quits .
%mor:	adv|so adv|right adv|here pro:sub|I v|read&ZERO det:num|ten
	pro:per|it~cop|be&3S n|positive pro:sub|I v|check comp|that
	pro:per|it~cop|be&3S adj|prime pro:per|it~cop|be&3S neg|not
	adv|right adv|here pro:sub|I adv:tem|then v|try coord|and v|get
	qn|more n|input coord|and pro:per|it adv|actual&dadj-LY v|read-3S
	comp|that n:prop|A coord|and v|say-3S pro:dem|this cop|be&3S neg|not
	det:art|a n|number v|quit-3S .
%gra:	1|2|JCT 2|3|JCT 3|5|JCT 4|5|SUBJ 5|0|ROOT 6|7|QUANT 7|8|SUBJ 8|5|COMP
	9|8|PRED 10|11|SUBJ 11|5|CJCT 12|14|LINK 13|14|SUBJ 14|11|COMP 15|14|PRED
	16|17|SUBJ 17|14|CPRED 18|17|NEG 19|20|JCT 20|23|JCT 21|23|SUBJ
	22|23|JCT 23|17|CPRED 24|23|CONJ 25|24|COORD 26|27|QUANT 27|25|OBJ 28|31|LINK
	29|31|SUBJ 30|31|JCT 31|25|CJCT 32|36|LINK 33|36|SUBJ 34|33|CONJ
	35|34|COORD 36|37|SUBJ 37|31|COMP 38|37|NEG 39|40|DET 40|41|SUBJ 41|37|CPRED
	42|5|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	yeah .
%mor:	co|yeah .
%gra:	1|0|INCROOT 2|1|PUNCT
*S4:	can we go back to the C code issue [?] xxx +/.
%mor:	mod|can pro:sub|we v|go adv|back prep|to det:art|the n:prop|C
	n|code n|issue +/.
%gra:	1|3|AUX 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|3|JCT 6|9|DET 7|9|MOD 8|9|MOD
	9|5|POBJ 10|3|PUNCT
*S1:	sure +/.
%mor:	adv|sure +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S4:	+, the &-um scan f@l thing I don't quite understand how that's
	working .
%mor:	det:art|the n|scan n:let|f n|thing pro:sub|I mod|do~neg|not
	adv|quite v|understand pro:int|how pro:rel|that~aux|be&3S
	part|work-PRESP .
%gra:	1|2|DET 2|4|MOD 3|4|MOD 4|0|INCROOT 5|9|SUBJ 6|9|AUX 7|6|NEG 8|9|JCT
	9|4|CMOD 10|9|OBJ 11|13|LINK 12|13|AUX 13|10|CMOD 14|4|PUNCT
*S1:	+, ⌈ this is +//.
%mor:	pro:dem|this cop|be&3S +//.
%gra:	1|2|SUBJ 2|0|ROOT 3|2|PUNCT
*S4:	+, ⌊ how is ⌋ I mean .
%mor:	pro:int|how cop|be&3S pro:sub|I v|mean .
%gra:	1|2|JCT 2|4|PRED 3|4|SUBJ 4|0|ROOT 5|4|PUNCT
*S1:	we need two of these that's what we need .
%mor:	pro:sub|we v|need det:num|two prep|of det:dem|these
	pro:dem|that~cop|be&3S pro:int|what pro:sub|we v|need .
%gra:	1|2|SUBJ 2|0|ROOT 3|7|QUANT 4|3|NJCT 5|6|DET 6|4|POBJ 7|2|COMP
	8|10|LINK 9|10|SUBJ 10|7|CPRED 11|2|PUNCT
*S1:	here's the deal +...
%mor:	pro:exist|here~cop|be&3S det:art|the n|deal +...
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|PRED 5|2|PUNCT
*S1:	scan f@l (0.5) some of this is detail that [/] that &-uh a &li I'm
	gonna give you a little detail that we're gonna talk about again
	later &-um (be)cause some of this is detail about the way (.) C (.)
	ANSIC is structured to treat data coming in .
%mor:	n|scan n:let|f pro:indef|some prep|of pro:dem|this cop|be&3S
	v|detail comp|that det:art|a pro:sub|I~aux|be&1S
	part|go-PRESP~inf|to v|give pro:per|you det:art|a adj|little
	n|detail comp|that pro:sub|we~aux|be&PRES part|go-PRESP~inf|to
	v|talk adv|about adv|again adv|later conj|because pro:indef|some
	prep|of pro:dem|this cop|be&3S v|detail prep|about det:art|the n|way
	n:prop|C n:prop|ANSIC aux|be&3S part|structure-PASTP prep|to n|treat
	n|data part|come-PRESP adv|in .
%gra:	1|6|SUBJ 2|1|NJCT 3|2|POBJ 4|3|NJCT 5|4|POBJ 6|0|ROOT 7|6|PRED
	8|12|LINK 9|12|DET 10|12|SUBJ 11|12|AUX 12|7|COMP 13|14|INF 14|12|COMP 15|14|OBJ
	16|18|DET 17|18|MOD 18|14|OBJ 19|22|LINK 20|22|SUBJ 21|22|AUX
	22|18|CMOD 23|24|INF 24|22|COMP 25|26|JCT 26|24|JCT 27|24|JCT 28|33|LINK
	29|33|SUBJ 30|29|NJCT 31|30|POBJ 32|33|AUX 33|6|CJCT 34|40|JCT 35|36|DET
	36|40|JCT 37|38|NAME 38|40|SUBJ 39|40|AUX 40|33|COMP 41|40|JCT 42|43|MOD
	43|41|POBJ 44|40|XJCT 45|44|JCT 46|6|PUNCT
*S1:	we have this scan f@l +...
%mor:	pro:sub|we v|have det:dem|this n|scan n:let|f +...
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|OBJ 5|4|OM 6|2|PUNCT
*S1:	oops I turned the lights up too bright you can't see sorry +...
%mor:	co|oops pro:sub|I v|turn-PAST det:art|the n|light-PL adv|up adv|too
	adj|bright pro:per|you mod|can~neg|not v|see adj|sorry +...
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|OBJ 6|5|NJCT 7|8|JCT 8|6|POBJ
	9|12|SUBJ 10|12|AUX 11|10|NEG 12|5|CMOD 13|12|JCT 14|3|PUNCT
*S1:	let's try this &=pause_while_moving_projector_screen is that
	readable ?
%mor:	v|let~pro:obj|us v|try det:dem|this cop|be&3S det:dem|that
	adj|read&dv-ABLE ?
%gra:	1|0|ROOT 2|1|OBJ 3|1|COMP 4|5|SUBJ 5|3|COMP 6|7|DET 7|5|PRED 8|1|PUNCT
*S1:	the [/] &i the idea behind these lights was we could use the
	blackboard on the edges and still read that I don't know if it
	worked .
%mor:	det:art|the n|idea adv|behind det:dem|these n|light-PL
	cop|be&PAST&13S pro:sub|we mod|could v|use det:art|the
	n|+adj|black+n|board prep|on det:art|the n|edge-PL coord|and
	adv|still v|read&ZERO comp|that pro:sub|I mod|do~neg|not v|know
	comp|if pro:per|it v|work-PAST .
%gra:	1|2|DET 2|6|SUBJ 3|2|NJCT 4|5|DET 5|3|POBJ 6|0|ROOT 7|9|SUBJ 8|9|AUX
	9|6|CPRED 10|11|DET 11|9|OBJ 12|9|JCT 13|14|DET 14|12|POBJ 15|9|CONJ
	16|17|JCT 17|15|COORD 18|22|LINK 19|22|SUBJ 20|22|AUX 21|20|NEG 22|17|COMP
	23|25|LINK 24|25|SUBJ 25|22|COMP 26|6|PUNCT
*S1:	&=pause_while_writing the code comes to this point scan f@l percent
	i@l address of number .
%mor:	det:art|the n|code v|come-3S prep|to det:dem|this n|point n|scan
	n:let|f n|percent n:let|i n|address prep|of v|number .
%gra:	1|2|DET 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|7|DET 6|7|MOD 7|4|POBJ 8|9|MOD
	9|7|CMOD 10|9|ENUM 11|10|OBJ 12|11|NJCT 13|12|POBJ 14|3|PUNCT
*S1:	what that makes it do is it starts reading every key I press .
%mor:	pro:int|what adv|that v|make-3S pro:per|it v|do cop|be&3S
	pro:per|it v|start-3S part|read-PRESP qn|every n|key pro:sub|I
	v|press .
%gra:	1|3|LINK 2|3|JCT 3|0|ROOT 4|5|SUBJ 5|3|COMP 6|5|OBJ 7|8|SUBJ 8|5|COMP
	9|8|COMP 10|11|QUANT 11|9|OBJ 12|13|SUBJ 13|8|CJCT 14|3|PUNCT
*S1:	okay like one two three A B C .
%mor:	co|okay prep|like det:num|one det:num|two det:num|three n:prop|A
	n:prop|B n:prop|C .
%gra:	1|0|INCROOT 2|1|NJCT 3|4|QUANT 4|5|QUANT 5|6|QUANT 6|8|NAME 7|8|NAME
	8|2|POBJ 9|1|PUNCT
*S1:	scan f@l has been told (be)cause I told it look for a number .
%mor:	n|scan n:let|f aux|have&3S aux|be&PASTP part|tell&PASTP
	conj|because pro:sub|I v|tell&PAST pro:per|it v|look prep|for
	det:art|a v|number .
%gra:	1|5|LINK 2|5|SUBJ 3|5|AUX 4|5|AUX 5|0|ROOT 6|8|LINK 7|8|SUBJ 8|5|CJCT
	9|8|OBJ 10|8|OBJ 11|10|JCT 12|13|DET 13|11|POBJ 14|5|PUNCT
*S1:	look for an integer .
%mor:	v|look prep|for det:art|a n|integer .
%gra:	1|0|ROOT 2|1|JCT 3|4|DET 4|2|POBJ 5|1|PUNCT
*S1:	well <that's part of an integer> [/] that's part of an integer
	that's part of an integer (.) this is not .
%mor:	co|well pro:dem|that~cop|be&3S n|part prep|of det:art|a n|integer
	pro:rel|that~cop|be&3S n|part prep|of det:art|a n|integer
	pro:dem|this cop|be&3S neg|not .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|PRED 5|4|NJCT 6|7|DET 7|5|POBJ 8|9|LINK
	9|7|CMOD 10|9|PRED 11|10|NJCT 12|13|DET 13|11|POBJ 14|15|SUBJ 15|3|CJCT
	16|15|NEG 17|3|PUNCT
*S1:	so it stops reading data (.) after it's read that (.) and it's got
	a hundred and twenty three .
%mor:	co|so pro:per|it n|stop-PL part|read-PRESP n|data prep|after
	pro:per|it~cop|be&3S v|read&ZERO adv|that coord|and
	pro:per|it~aux|be&3S part|get&PASTP det:art|a det:num|hundred
	coord|and det:num|twenty det:num|three .
%gra:	1|4|COM 2|4|SUBJ 3|4|AUX 4|9|SUBJ 5|4|OBJ 6|4|JCT 7|6|POBJ 8|9|AUX
	9|0|ROOT 10|9|JCT 11|14|LINK 12|14|SUBJ 13|14|AUX 14|9|CJCT 15|16|DET
	16|14|OBJ 17|16|CONJ 18|19|QUANT 19|17|COORD 20|9|PUNCT
*S1:	but I pressed those keys .
%mor:	conj|but pro:sub|I v|press-PAST det:dem|those n|key-PL .
%gra:	1|3|LINK 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|OBJ 6|3|PUNCT
*S1:	that data is still sitting there waiting to go into the code .
%mor:	det:dem|that n|data aux|be&3S adv|still part|sit-PRESP adv|there
	part|wait-PRESP inf|to v|go prep|into det:art|the n|code .
%gra:	1|2|DET 2|5|SUBJ 3|5|AUX 4|5|JCT 5|0|ROOT 6|5|JCT 7|5|XJCT 8|9|INF
	9|7|COMP 10|9|JCT 11|12|DET 12|10|POBJ 13|5|PUNCT
*S1:	hasta do with the way C actually is structured to treat data coming
	in it just has these (.) characters flying in at it +...
%mor:	mod|have&3S~inf|to v|do prep|with det:art|the n|way n:prop|C
	adv|actual&dadj-LY aux|be&3S part|structure-PASTP prep|to n|treat
	n|data part|come-PRESP prep|in pro:per|it adv|just aux|have&3S
	det:dem|these n|character-PL part|fly-PRESP adv|in prep|at
	pro:per|it +...
%gra:	1|3|AUX 2|3|INF 3|0|ROOT 4|3|JCT 5|6|DET 6|4|POBJ 7|6|APP 8|10|JCT
	9|10|AUX 10|6|XMOD 11|10|JCT 12|13|MOD 13|11|POBJ 14|10|XJCT 15|14|JCT
	16|15|POBJ 17|20|SUBJ 18|20|AUX 19|20|DET 20|16|OM 21|20|XMOD 22|21|JCT
	23|21|JCT 24|23|POBJ 25|3|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	so (.) it knew to stop reading the number (be)cause it saw an A but
	it's still waiting because maybe the next thing you're gonna do is
	ask for a character .
%mor:	co|so pro:per|it v|know&PAST prep|to n|stop part|read-PRESP
	det:art|the n|number conj|because pro:per|it v|see&PAST det:art|a
	n:prop|A conj|but pro:per|it~aux|be&3S adv|still part|wait-PRESP
	conj|because adv|maybe det:art|the adj|next n|thing
	pro:per|you~aux|be&PRES part|go-PRESP~inf|to v|do cop|be&3S v|ask
	prep|for det:art|a n|character .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|3|JCT 5|4|POBJ 6|3|XJCT 7|8|DET 8|6|OBJ
	9|11|LINK 10|11|SUBJ 11|3|CJCT 12|13|DET 13|11|OBJ 14|18|LINK 15|18|SUBJ
	16|18|AUX 17|18|JCT 18|11|CJCT 19|18|OBJ 20|19|JCT 21|23|DET 22|23|MOD
	23|20|POBJ 24|26|SUBJ 25|26|AUX 26|23|CMOD 27|28|INF 28|30|SUBJ 29|30|AUX
	30|26|COMP 31|30|JCT 32|33|DET 33|31|POBJ 34|3|PUNCT
*S1:	ask for a letter .
%mor:	v|ask prep|for det:art|a n|letter .
%gra:	1|0|ROOT 2|1|JCT 3|4|DET 4|2|POBJ 5|1|PUNCT
*S1:	in this code the next thing we do is (.) we go around the loop (.)
	and we hit this again .
%mor:	prep|in det:dem|this n|code det:art|the adj|next n|thing pro:sub|we
	v|do cop|be&3S pro:sub|we v|go prep|around det:art|the n|loop
	coord|and pro:sub|we v|hit&ZERO pro:dem|this adv|again .
%gra:	1|9|JCT 2|3|DET 3|1|POBJ 4|6|DET 5|6|MOD 6|9|SUBJ 7|8|SUBJ 8|6|CMOD
	9|0|ROOT 10|11|SUBJ 11|9|CPRED 12|11|JCT 13|14|DET 14|12|POBJ 15|17|LINK
	16|17|SUBJ 17|11|CJCT 18|17|OBJ 19|17|JCT 20|9|PUNCT
*S1:	so I've told it to look for an integer (.) the next thing coming in
	is the A that I already typed .
%mor:	adv|so pro:sub|I~aux|have part|tell&PASTP pro:per|it inf|to v|look
	prep|for det:art|a n|integer det:art|the adj|next n|thing
	part|come-PRESP prep|in cop|be&3S det:art|the n:prop|A pro:rel|that
	pro:sub|I adv|already part|type-PASTP .
%gra:	1|4|JCT 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|4|OBJ 6|7|INF 7|4|XJCT 8|7|JCT
	9|10|DET 10|8|POBJ 11|13|DET 12|13|MOD 13|7|OBJ 14|13|XMOD 15|14|JCT
	16|15|POBJ 17|18|DET 18|13|APP 19|22|LINK 20|22|SUBJ 21|22|JCT 22|18|CMOD
	23|4|PUNCT
*S1:	and nothing is forgotten nothing is thrown away .
%mor:	coord|and pro:indef|nothing aux|be&3S part|forget&PASTP
	pro:indef|nothing aux|be&3S part|throw&PASTP adv|away .
%gra:	1|4|LINK 2|4|SUBJ 3|4|AUX 4|0|ROOT 5|7|SUBJ 6|7|AUX 7|4|COMP 8|7|JCT
	9|4|PUNCT
*S1:	it reads the A and it says that's not the start of an integer .
%mor:	pro:per|it v|read-3S det:art|the n:prop|A coord|and pro:per|it
	v|say-3S pro:dem|that~cop|be&3S neg|not det:art|the v|start prep|of
	det:art|a n|integer .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|DET 4|2|OBJ 5|7|LINK 6|7|SUBJ 7|2|CJCT 8|9|SUBJ
	9|7|COMP 10|9|NEG 11|12|DET 12|9|CPRED 13|12|JCT 14|15|DET 15|13|POBJ
	16|2|PUNCT
*S1:	I'm being given garbage .
%mor:	pro:sub|I~aux|be&1S part|be-PRESP part|give&PASTP n|garbage .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|3|PRED 5|4|OBJ 6|3|PUNCT
*S1:	so scan f@l fails it reads nothing .
%mor:	adv|so v|scan n:let|f v|fail-3S pro:per|it v|read-3S
	pro:indef|nothing .
%gra:	1|2|JCT 2|0|ROOT 3|4|SUBJ 4|2|COMP 5|6|SUBJ 6|4|COMP 7|6|OBJ 8|2|PUNCT
*S1:	it does not put any information (.) in the place where this
	variable stores its bit pattern (.) doesn't read anything doesn't
	put anything there .
%mor:	pro:per|it mod|do&3S neg|not part|put&PASTP qn|any n|inform&dv-TION
	prep|in det:art|the n|place pro:int|where det:dem|this n|variable
	v|store-3S det:poss|its n|bit n|pattern mod|do&3S~neg|not
	v|read&ZERO pro:indef|anything mod|do&3S~neg|not v|put&ZERO
	pro:indef|anything adv|there .
%gra:	1|4|SUBJ 2|4|AUX 3|2|NEG 4|0|ROOT 5|6|QUANT 6|4|OBJ 7|4|JCT 8|9|DET
	9|7|POBJ 10|13|LINK 11|12|DET 12|13|SUBJ 13|4|CJCT 14|16|DET 15|16|MOD
	16|19|SUBJ 17|19|AUX 18|17|NEG 19|13|COMP 20|23|SUBJ 21|23|AUX 22|21|NEG
	23|19|COMP 24|23|OBJ 25|23|JCT 26|4|PUNCT
*S1:	instead this function returns a value (.) of [/] &zer of &-um zero
	.
%mor:	adv|instead pro:dem|this n|function v|return-3S det:art|a n|value
	prep|of det:num|zero .
%gra:	1|2|JCT 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|6|DET 6|4|OBJ 7|6|NJCT 8|7|POBJ
	9|4|PUNCT
*S1:	I really should check that but it doesn't return one that's the
	important thing .
%mor:	pro:sub|I adv|real&dadj-LY mod|should v|check pro:dem|that conj|but
	pro:per|it mod|do&3S~neg|not v|return pro:indef|one
	pro:dem|that~cop|be&3S det:art|the adj|important n|thing .
%gra:	1|4|SUBJ 2|4|JCT 3|4|AUX 4|0|ROOT 5|4|OBJ 6|10|LINK 7|10|SUBJ 8|10|AUX
	9|8|NEG 10|13|CJCT 11|10|OBJ 12|13|SUBJ 13|4|CJCT 14|16|DET 15|16|MOD
	16|13|PRED 17|4|PUNCT
*S1:	it's either zero or minus one I forget .
%mor:	pro:per|it~cop|be&3S adv|either v|zero coord|or prep|minus
	pro:indef|one pro:sub|I v|forget .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|JCT 4|2|PRED 5|9|LINK 6|9|JCT 7|6|POBJ 8|9|SUBJ
	9|4|CJCT 10|2|PUNCT
*S5:	what if you type a space (.) between one of those ?
%mor:	pro:int|what conj|if pro:per|you v|type det:art|a n|space
	prep|between det:num|one prep|of pro:dem|those ?
%gra:	1|4|LINK 2|4|LINK 3|4|SUBJ 4|0|ROOT 5|6|DET 6|4|OBJ 7|4|JCT 8|7|POBJ
	9|8|NJCT 10|9|POBJ 11|4|PUNCT
*S1:	hang on a second .
%mor:	v|hang prep|on det:art|a n|second .
%gra:	1|0|ROOT 2|1|JCT 3|4|DET 4|2|POBJ 5|1|PUNCT
*S1:	&-um so the point is that scan f@l returns a value and this whole
	bit of text right here (.) scan f@l double quote percent i@l comma
	ampersand num close+parens that whole thing evaluates to (.) zero
	(be)cause it didn't read anything .
%mor:	co|so det:art|the n|point cop|be&3S pro:dem|that v|scan n:let|f
	v|return-3S det:art|a n|value coord|and det:dem|this n|whole n|bit
	prep|of n|text adv|right adv|here v|scan n:let|f adj|double n|quote
	n|percent n:let|i n|comma n|ampersand co|num n|+v|close+n|paren-PL
	det:dem|that adj|whole n|thing v|evaluate-3S prep|to det:num|zero
	conj|because pro:per|it mod|do&PAST~neg|not v|read&ZERO
	pro:indef|anything .
%gra:	1|4|COM 2|3|DET 3|4|SUBJ 4|0|ROOT 5|4|PRED 6|4|CPRED 7|8|SUBJ 8|6|COMP
	9|10|DET 10|8|OBJ 11|19|LINK 12|14|DET 13|14|MOD 14|19|SUBJ 15|14|NJCT
	16|15|POBJ 17|19|JCT 18|19|JCT 19|10|CMOD 20|23|MOD 21|23|MOD 22|23|MOD
	23|19|OBJ 24|28|MOD 25|26|MOD 26|28|MOD 27|28|COM 28|23|OBJ 29|31|DET
	30|31|MOD 31|32|SUBJ 32|28|COMP 33|32|JCT 34|33|POBJ 35|39|LINK 36|39|SUBJ
	37|39|AUX 38|37|NEG 39|4|CJCT 40|39|OBJ 41|4|PUNCT
*S1:	one is not equal to zero .
%mor:	det:num|one aux|be&3S neg|not n|equal prep|to det:num|zero .
%gra:	1|4|SUBJ 2|4|AUX 3|2|NEG 4|0|INCROOT 5|4|NJCT 6|5|POBJ 7|4|PUNCT
*S1:	that's a true statement so (.) I get out .
%mor:	pro:dem|that~cop|be&3S det:art|a n|true n|state&dv-MENT conj|so
	pro:sub|I v|get adv|out .
%gra:	1|2|SUBJ 2|0|ROOT 3|5|DET 4|5|MOD 5|2|PRED 6|8|LINK 7|8|SUBJ 8|2|CJCT
	9|8|JCT 10|2|PUNCT
*S1:	something bad happened .
%mor:	pro:indef|something adj|bad part|happen-PASTP .
%gra:	1|0|INCROOT 2|3|MOD 3|1|CMOD 4|1|PUNCT
*S1:	(0.6) you [/] &nee you may need to go and actually play with this
	code and look at it a little to see this .
%mor:	pro:per|you mod|may v|need inf|to v|go coord|and adv|actual&dadj-LY
	v|play prep|with det:dem|this n|code coord|and v|look prep|at
	pro:per|it det:art|a adj|little inf|to co|see det:dem|this .
%gra:	1|3|SUBJ 2|3|AUX 3|0|ROOT 4|5|INF 5|3|COMP 6|5|CONJ 7|8|JCT 8|6|COORD
	9|8|JCT 10|11|DET 11|9|POBJ 12|5|CONJ 13|12|COORD 14|13|JCT 15|14|POBJ
	16|17|DET 17|13|JCT 18|19|INF 19|17|INCROOT 20|21|DET 21|19|PUNCT
*S1:	&=students_getting_up_to_leave lemme answer this guy's question .
%mor:	v|let~pro:obj|me v|answer det:dem|this adj|guy&dn-POSS n|question .
%gra:	1|0|ROOT 2|3|SUBJ 3|1|COMP 4|6|DET 5|6|MOD 6|3|OBJ 7|1|PUNCT
*S1:	I was just asked what if I do this one twenty three space A B C .
%mor:	pro:sub|I aux|be&PAST&13S adv|just part|ask-PASTP pro:int|what
	conj|if pro:sub|I v|do det:dem|this det:num|one det:num|twenty
	det:num|three n|space n:prop|A n:prop|B n:prop|C .
%gra:	1|4|SUBJ 2|4|AUX 3|4|JCT 4|0|ROOT 5|8|OBJ 6|8|LINK 7|8|SUBJ 8|4|COMP
	9|10|DET 10|13|QUANT 11|12|DATE 12|13|QUANT 13|8|OBJ 14|15|NAME 15|16|NAME
	16|13|APP 17|4|PUNCT
*S1:	any predictions ?
%mor:	qn|any n|prediction-PL ?
%gra:	1|2|QUANT 2|0|INCROOT 3|2|PUNCT
*S1:	&=unintelligible_answers:multiple what ?
%mor:	pro:int|what ?
%gra:	1|0|INCROOT 2|1|PUNCT
*SUM:	put in another xxx +/.
%mor:	v|put&ZERO prep|in qn|another +/.
%gra:	1|0|ROOT 2|1|JCT 3|2|POBJ 4|1|PUNCT
*S1:	+, <whoa [/] whoa> [/] whoa [x 3] .
%mor:	co|whoa .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	silence [/] silence .
%mor:	n|silence .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	what ?
%mor:	pro:int|what ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	put in another +/.
%mor:	v|put&ZERO prep|in qn|another +/.
%gra:	1|0|ROOT 2|1|JCT 3|2|POBJ 4|1|PUNCT
*S1:	+, oh after the space ?
%mor:	co|oh prep|after det:art|the n|space ?
%gra:	1|0|INCROOT 2|1|JCT 3|4|DET 4|2|POBJ 5|1|PUNCT
*SS:	+, yeah +/.
%mor:	co|yeah +/.
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	+, oh okay that's good .
%mor:	co|oh co|okay pro:dem|that~cop|be&3S adj|good .
%gra:	1|4|COM 2|3|COM 3|4|SUBJ 4|0|ROOT 5|4|PRED 6|4|PUNCT
*S1:	(0.5) seven space five .
%mor:	det:num|seven n|space det:num|five .
%gra:	1|2|QUANT 2|3|MOD 3|0|ROOT 4|3|PUNCT
*S1:	tells me they're both prime .
%mor:	v|tell-3S pro:obj|me pro:sub|they~cop|be&PRES qn|both n|prime .
%gra:	1|0|ROOT 2|1|OBJ 3|4|SUBJ 4|1|COMP 5|6|QUANT 6|4|PRED 7|1|PUNCT
*S1:	okay ?
%mor:	co|okay ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	it read the seven (.) it saw the space it knows that's not part of
	a number so it got seven (.) it came around the loop (.) tried to
	read another number (.) the five was already sitting there .
%mor:	pro:per|it v|read&ZERO det:art|the det:num|seven pro:per|it
	v|see&PAST det:art|the n|space pro:per|it v|know-3S
	pro:dem|that~cop|be&3S neg|not n|part prep|of det:art|a n|number
	co|so pro:per|it v|get&PAST det:num|seven pro:per|it v|come&PAST
	prep|around det:art|the n|loop v|try-PAST inf|to v|read&ZERO
	qn|another n|number det:art|the det:num|five aux|be&PAST&13S
	adv|already part|sit-PRESP adv|there .
%gra:	1|2|SUBJ 2|6|CJCT 3|4|DET 4|2|OBJ 5|6|SUBJ 6|0|ROOT 7|8|DET 8|12|SUBJ
	9|10|SUBJ 10|8|CMOD 11|12|SUBJ 12|6|COMP 13|12|NEG 14|12|PRED 15|14|NJCT
	16|17|DET 17|15|POBJ 18|20|COM 19|20|SUBJ 20|6|CJCT 21|20|OBJ 22|23|SUBJ
	23|20|COMP 24|23|JCT 25|26|DET 26|24|POBJ 27|23|XJCT 28|29|INF
	29|27|COMP 30|31|QUANT 31|29|OBJ 32|33|DET 33|36|SUBJ 34|36|AUX 35|36|JCT
	36|31|CMOD 37|36|JCT 38|6|PUNCT
*S1:	there's actually nothing very magical about pressing that return
	key .
%mor:	pro:exist|there~cop|be&3S adv|actual&dadj-LY pro:indef|nothing
	adv|very adj|magic&dn-AL adv|about n:gerund|press-PRESP adv|that
	adj|return n|key .
%gra:	1|2|SUBJ 2|0|ROOT 3|4|JCT 4|2|PRED 5|6|JCT 6|4|PRED 7|8|JCT 8|6|CMOD
	9|10|JCT 10|11|MOD 11|8|OBJ 12|2|PUNCT
*S1:	oh there was a hand up ⌈ over here ⌉ .
%mor:	co|oh adv|there cop|be&PAST&13S det:art|a n|hand adv|up adv|over
	adv|here .
%gra:	1|3|COM 2|3|SUBJ 3|0|ROOT 4|5|DET 5|3|PRED 6|7|JCT 7|5|NJCT 8|5|NJCT
	9|3|PUNCT
*S6:	⌊ do a decimal ⌋ .
%mor:	v|do det:art|a n|decimal .
%gra:	1|0|ROOT 2|3|DET 3|1|OBJ 4|1|PUNCT
*S1:	what ?
%mor:	pro:int|what ?
%gra:	1|0|INCROOT 2|1|PUNCT
*S6:	try a decimal .
%mor:	v|try det:art|a n|decimal .
%gra:	1|0|ROOT 2|3|DET 3|1|OBJ 4|1|PUNCT
*S1:	alright .
%mor:	co|alright .
%gra:	1|0|INCROOT 2|1|PUNCT
*S1:	one last test for those who wanna stay .
%mor:	det:num|one adj|last n|test prep|for det:dem|those pro:rel|who
	v|want~inf|to v|stay .
%gra:	1|3|QUANT 2|3|MOD 3|0|INCROOT 4|3|NJCT 5|4|POBJ 6|7|LINK 7|5|CMOD
	8|9|INF 9|7|COMP 10|3|PUNCT
*S1:	(0.5) &-uh how about ten point two .
%mor:	pro:int|how adv|about det:num|ten n|point det:num|two .
%gra:	1|3|LINK 2|3|JCT 3|4|QUANT 4|5|MOD 5|0|ROOT 6|5|PUNCT
*S1:	it gets to ten (.) it sees <the period> [/] the period is not part
	of an integer (.) stops scanning the ten (.) got the ten (.) comes
	around again (.) trying to read an integer it sees a period .
%mor:	pro:per|it v|get-3S prep|to det:num|ten pro:per|it v|see-3S
	det:art|the n|period aux|be&3S neg|not n|part prep|of det:art|a
	n|integer n|stop-PL part|scan-PRESP det:art|the det:num|ten
	v|get&PAST det:art|the det:num|ten v|come-3S adv|around adv|again
	part|try-PRESP inf|to v|read&ZERO det:art|a n|integer pro:per|it
	v|see-3S det:art|a n|period .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|JCT 4|3|POBJ 5|6|SUBJ 6|2|CJCT 7|8|DET 8|16|SUBJ
	9|16|AUX 10|9|NEG 11|16|SUBJ 12|11|NJCT 13|15|DET 14|15|MOD 15|12|POBJ
	16|6|COMP 17|18|DET 18|19|SUBJ 19|16|COMP 20|21|DET 21|22|SUBJ 22|19|OBJ
	23|22|JCT 24|22|JCT 25|22|XJCT 26|27|INF 27|25|COMP 28|29|DET 29|27|OBJ
	30|31|SUBJ 31|27|COMP 32|33|DET 33|31|OBJ 34|2|PUNCT
*S1:	period is not part of an integer it quits .
%mor:	n|period cop|be&3S neg|not adj|part prep|of det:art|a n|integer
	pro:per|it v|quit-3S .
%gra:	1|2|SUBJ 2|0|ROOT 3|2|NEG 4|2|PRED 5|4|JCT 6|7|DET 7|5|POBJ 8|9|SUBJ
	9|4|CMOD 10|2|PUNCT
*S1:	&=students_leave:SS .
@End
